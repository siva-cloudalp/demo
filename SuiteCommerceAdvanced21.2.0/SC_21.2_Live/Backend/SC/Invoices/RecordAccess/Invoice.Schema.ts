/**

	Â© 2020 NetSuite Inc.
	User may not copy, modify, distribute, or re-bundle or otherwise make available this code;
	provided, however, if you are an authorized user with a NetSuite account or log-in, you
	may use this code subject to the terms that govern your access and use.


 * @NApiVersion 2.x
 * @NModuleScope TargetAccount
 */

import { Schema, Select } from '../../../Common/Schema/Schema';
import { SchemaField } from '../../../Common/Schema/SchemaField';
import { SchemaColumn } from '../../../Common/Schema/SchemaColumn';
import { Type } from '../../../Common/ActiveRecord/ActiveRecord';
import { SchemaSublistField } from '../../../Common/Schema/SchemaSublistField';
import { FulfillingtransactionSchema } from '../../Transaction/RecordAccess/Fulfillingtransaction.Schema';
import { LocationSchema } from '../../Transaction/RecordAccess/Location.Schema';
import { ItemSchema } from '../../Transaction/RecordAccess/Item.Schema';
import { SchemaJoin } from '../../../Common/Schema/SchemaJoin';

export class InvoiceSchema implements Schema {
    // possible values can be seen here:
    // SuiteCloud Platform > SuiteScript > SuiteScript 2.0 API Reference >
    // SuiteScript 2.0 Modules > N/record Module > record.Type
    // NetSuite Version: 2019.1
    public readonly type = Type.INVOICE;

    private static instance: InvoiceSchema;

    public constructor() {}

    public static getInstance(): InvoiceSchema {
        if (!this.instance) {
            this.instance = new InvoiceSchema();
        }
        return this.instance;
    }

    public fields = {
        account: new SchemaField<Select>('account'),
        althandlingcost: new SchemaField<string>('althandlingcost'),
        altshippingcost: new SchemaField<string>('altshippingcost'),
        amountpaid: new SchemaField<string>('amountpaid'),
        amountremaining: new SchemaField<string>('amountremaining'),
        amountremainingtotalbox: new SchemaField<string>('amountremainingtotalbox'),
        approvalstatus: new SchemaField<Select>('approvalstatus'),
        balance: new SchemaField<string>('balance'),
        billaddress: new SchemaField<string>('billaddress'),
        billaddresslist: new SchemaField<Select>('billaddresslist'),
        billingaccount: new SchemaField<Select>('billingaccount'),
        billingaddress: new SchemaField<string>('billingaddress'),
        billisresidential: new SchemaField<string>('billisresidential'),
        canhavestackable: new SchemaField<boolean>('canhavestackable'),
        class: new SchemaField<Select>('class'),
        consolidatebalance: new SchemaField<string>('consolidatebalance'),
        couponcode: new SchemaField<Select>('couponcode'),
        createddate: new SchemaField<string>('createddate'),
        createdfrom: new SchemaField<Select>('createdfrom'),
        currency: new SchemaField<Select>('currency'),
        currencyname: new SchemaField<string>('currencyname'),
        currencysymbol: new SchemaField<string>('currencysymbol'),
        customform: new SchemaField<Select>('customform'),
        deferredrevenue: new SchemaField<string>('deferredrevenue'),
        department: new SchemaField<Select>('department'),
        discountamount: new SchemaField<string>('discountamount'),
        discountdate: new SchemaField<string>('discountdate'),
        discountitem: new SchemaField<Select>('discountitem'),
        discountrate: new SchemaField<string>('discountrate'),
        discounttotal: new SchemaField<string>('discounttotal'),
        duedate: new SchemaField<string>('duedate'),
        email: new SchemaField<string>('email'),
        enddate: new SchemaField<string>('enddate'),
        entity: new SchemaField<Select>('entity'),
        entitynexus: new SchemaField<Select>('entitynexus'),
        entitytaxregnum: new SchemaField<Select>('entitytaxregnum'),
        estgrossprofit: new SchemaField<string>('estgrossprofit'),
        estgrossprofitpercent: new SchemaField<string>('estgrossprofitpercent'),
        exchangerate: new SchemaField<string>('exchangerate'),
        excludecommission: new SchemaField<boolean>('excludecommission'),
        expcostdiscamount: new SchemaField<string>('expcostdiscamount'),
        expcostdiscount: new SchemaField<Select>('expcostdiscount'),
        expcostdiscprint: new SchemaField<boolean>('expcostdiscprint'),
        expcostdiscrate: new SchemaField<string>('expcostdiscrate'),
        expcostdisctaxable: new SchemaField<boolean>('expcostdisctaxable'),
        expcosttaxcode: new SchemaField<Select>('expcosttaxcode'),
        expcosttaxrate1: new SchemaField<string>('expcosttaxrate1'),
        externalid: new SchemaField<string>('externalid'),
        fob: new SchemaField<string>('fob'),
        giftcertapplied: new SchemaField<string>('giftcertapplied'),
        handlingcost: new SchemaField<string>('handlingcost'),
        handlingtax1rate: new SchemaField<string>('handlingtax1rate'),
        handlingtaxcode: new SchemaField<Select>('handlingtaxcode'),
        isbasecurrency: new SchemaField<boolean>('isbasecurrency'),
        ismultishipto: new SchemaField<boolean>('ismultishipto'),
        istaxable: new SchemaField<boolean>('istaxable'),
        itemcostdiscamount: new SchemaField<string>('itemcostdiscamount'),
        itemcostdiscount: new SchemaField<Select>('itemcostdiscount'),
        itemcostdiscprint: new SchemaField<boolean>('itemcostdiscprint'),
        itemcostdiscrate: new SchemaField<string>('itemcostdiscrate'),
        itemcostdisctaxable: new SchemaField<boolean>('itemcostdisctaxable'),
        itemcosttaxcode: new SchemaField<Select>('itemcosttaxcode'),
        itemcosttaxrate1: new SchemaField<string>('itemcosttaxrate1'),
        lastmodifieddate: new SchemaField<string>('lastmodifieddate'),
        leadsource: new SchemaField<Select>('leadsource'),
        linkedtrackingnumbers: new SchemaField<string>('linkedtrackingnumbers'),
        location: new SchemaField<string>('location'),
        memo: new SchemaField<string>('memo'),
        message: new SchemaField<string>('message'),
        messagesel: new SchemaField<Select>('messagesel'),
        muccpromocodeinstance: new SchemaField<string>('muccpromocodeinstance'),
        nextapprover: new SchemaField<Select>('nextapprover'),
        nexus: new SchemaField<Select>('nexus'),
        opportunity: new SchemaField<Select>('opportunity'),
        otherrefnum: new SchemaField<string>('otherrefnum'),
        partner: new SchemaField<Select>('partner'),
        paymenteventholdreason: new SchemaField<string>('paymenteventholdreason'),
        paymethtype: new SchemaField<string>('paymethtype'),
        postingperiod: new SchemaField<Select>('postingperiod'),
        promocode: new SchemaField<Select>('promocode'),
        promocodepluginimpl: new SchemaField<string>('promocodepluginimpl'),
        recognizedrevenue: new SchemaField<string>('recognizedrevenue'),
        recurringbill: new SchemaField<boolean>('recurringbill'),
        returntrackingnumbers: new SchemaField<string>('returntrackingnumbers'),
        revenuestatus: new SchemaField<string>('revenuestatus'),
        revreconrevcommitment: new SchemaField<boolean>('revreconrevcommitment'),
        saleseffectivedate: new SchemaField<string>('saleseffectivedate'),
        salesgroup: new SchemaField<Select>('salesgroup'),
        salesrep: new SchemaField<Select>('salesrep'),
        shipaddress: new SchemaField<string>('shipaddress'),
        shipaddresslist: new SchemaField<Select>('shipaddresslist'),
        shipdate: new SchemaField<string>('shipdate'),
        shipisresidential: new SchemaField<string>('shipisresidential'),
        shipmethod: new SchemaField<Select>('shipmethod'),
        shipoverride: new SchemaField<string>('shipoverride'),
        shippingaddress: new SchemaField<string>('shippingaddress'),
        shippingcost: new SchemaField<string>('shippingcost'),
        shippingcostoverridden: new SchemaField<string>('shippingcostoverridden'),
        shippingtax1rate: new SchemaField<string>('shippingtax1rate'),
        shippingtaxcode: new SchemaField<Select>('shippingtaxcode'),
        source: new SchemaField<string>('source'),
        startdate: new SchemaField<string>('startdate'),
        status: new SchemaField<string>('status'),
        statusRef: new SchemaField<string>('statusRef'),
        subsidiary: new SchemaField<Select>('subsidiary'),
        subsidiarytaxregnum: new SchemaField<Select>('subsidiarytaxregnum'),
        subtotal: new SchemaField<string>('subtotal'),
        syncpartnerteams: new SchemaField<boolean>('syncpartnerteams'),
        syncsalesteams: new SchemaField<boolean>('syncsalesteams'),
        taxdetailsoverride: new SchemaField<boolean>('taxdetailsoverride'),
        taxitem: new SchemaField<Select>('taxitem'),
        taxpointdate: new SchemaField<string>('taxpointdate'),
        taxpointdateoverride: new SchemaField<boolean>('taxpointdateoverride'),
        taxrate: new SchemaField<number>('taxrate'),
        taxregoverride: new SchemaField<boolean>('taxregoverride'),
        taxtotal: new SchemaField<string>('taxtotal'),
        terms: new SchemaField<Select>('terms'),
        timediscamount: new SchemaField<string>('timediscamount'),
        timediscount: new SchemaField<Select>('timediscount'),
        timediscprint: new SchemaField<boolean>('timediscprint'),
        timediscrate: new SchemaField<string>('timediscrate'),
        timedisctaxable: new SchemaField<boolean>('timedisctaxable'),
        timetaxcode: new SchemaField<Select>('timetaxcode'),
        timetaxrate1: new SchemaField<string>('timetaxrate1'),
        tobeemailed: new SchemaField<boolean>('tobeemailed'),
        tobefaxed: new SchemaField<boolean>('tobefaxed'),
        tobeprinted: new SchemaField<boolean>('tobeprinted'),
        total: new SchemaField<string>('total'),
        totalcostestimate: new SchemaField<string>('totalcostestimate'),
        trackingnumbers: new SchemaField<string>('trackingnumbers'),
        trandate: new SchemaField<string>('trandate'),
        tranid: new SchemaField<string>('tranid'),
        tranisvsoebundle: new SchemaField<boolean>('tranisvsoebundle'),
        unbilledorders: new SchemaField<string>('unbilledorders'),
        vsoeautocalc: new SchemaField<boolean>('vsoeautocalc')
    };

    public filters = {
        account: new SchemaColumn<Select>('account'),
        accounttype: new SchemaColumn<Select>('accounttype'),
        acctcorpcardexp: new SchemaColumn<Select>('acctcorpcardexp'),
        actualshipdate: new SchemaColumn<string>('actualshipdate'),
        altsalesamount: new SchemaColumn<string>('altsalesamount'),
        altsalesnetamount: new SchemaColumn<string>('altsalesnetamount'),
        amount: new SchemaColumn<string>('amount'),
        amountpaid: new SchemaColumn<string>('amountpaid'),
        amountremaining: new SchemaColumn<string>('amountremaining'),
        amountunbilled: new SchemaColumn<string>('amountunbilled'),
        anylineitem: new SchemaColumn<Select>('anylineitem'),
        appliedtoforeignamount: new SchemaColumn<string>('appliedtoforeignamount'),
        appliedtoisfxvariance: new SchemaColumn<boolean>('appliedtoisfxvariance'),
        appliedtolinkamount: new SchemaColumn<string>('appliedtolinkamount'),
        appliedtolinktype: new SchemaColumn<Select>('appliedtolinktype'),
        appliedtotransaction: new SchemaColumn<Select>('appliedtotransaction'),
        applyingforeignamount: new SchemaColumn<string>('applyingforeignamount'),
        applyingisfxvariance: new SchemaColumn<boolean>('applyingisfxvariance'),
        applyinglinkamount: new SchemaColumn<string>('applyinglinkamount'),
        applyinglinktype: new SchemaColumn<Select>('applyinglinktype'),
        applyingtransaction: new SchemaColumn<Select>('applyingtransaction'),
        approvalstatus: new SchemaColumn<Select>('approvalstatus'),
        authcode: new SchemaColumn<string>('authcode'),
        autocalculatelag: new SchemaColumn<boolean>('autocalculatelag'),
        avsstreetmatch: new SchemaColumn<Select>('avsstreetmatch'),
        avszipmatch: new SchemaColumn<Select>('avszipmatch'),
        billable: new SchemaColumn<boolean>('billable'),
        billcounty: new SchemaColumn<string>('billcounty'),
        billeddate: new SchemaColumn<string>('billeddate'),
        billingschedule: new SchemaColumn<Select>('billingschedule'),
        billingstatus: new SchemaColumn<boolean>('billingstatus'),
        billingtransaction: new SchemaColumn<Select>('billingtransaction'),
        billvariancestatus: new SchemaColumn<Select>('billvariancestatus'),
        binnumber: new SchemaColumn<string>('binnumber'),
        binnumberquantity: new SchemaColumn<number>('binnumberquantity'),
        bookspecifictransaction: new SchemaColumn<boolean>('bookspecifictransaction'),
        buildentireassembly: new SchemaColumn<boolean>('buildentireassembly'),
        buildvariance: new SchemaColumn<number>('buildvariance'),
        built: new SchemaColumn<number>('built'),
        canhavestackablepromotions: new SchemaColumn<boolean>('canhavestackablepromotions'),
        catchupperiod: new SchemaColumn<Select>('catchupperiod'),
        cccustomercode: new SchemaColumn<string>('cccustomercode'),
        ccexpiredate: new SchemaColumn<string>('ccexpiredate'),
        ccname: new SchemaColumn<string>('ccname'),
        ccnumber: new SchemaColumn<string>('ccnumber'),
        chargetype: new SchemaColumn<Select>('chargetype'),
        class: new SchemaColumn<Select>('class'),
        cleared: new SchemaColumn<boolean>('cleared'),
        closed: new SchemaColumn<boolean>('closed'),
        closedate: new SchemaColumn<string>('closedate'),
        cogs: new SchemaColumn<boolean>('cogs'),
        commissioneffectivedate: new SchemaColumn<string>('commissioneffectivedate'),
        commit: new SchemaColumn<Select>('commit'),
        confirmationnumber: new SchemaColumn<string>('confirmationnumber'),
        contribution: new SchemaColumn<number>('contribution'),
        costcomponentamount: new SchemaColumn<string>('costcomponentamount'),
        costcomponentcategory: new SchemaColumn<Select>('costcomponentcategory'),
        costcomponentitem: new SchemaColumn<Select>('costcomponentitem'),
        costcomponentquantity: new SchemaColumn<number>('costcomponentquantity'),
        costcomponentstandardcost: new SchemaColumn<number>('costcomponentstandardcost'),
        costestimate: new SchemaColumn<string>('costestimate'),
        costestimaterate: new SchemaColumn<string>('costestimaterate'),
        costestimatetype: new SchemaColumn<Select>('costestimatetype'),
        createdby: new SchemaColumn<Select>('createdby'),
        createdfrom: new SchemaColumn<Select>('createdfrom'),
        createdfromtype: new SchemaColumn<string[]>('createdfrom.type'),
        creditamount: new SchemaColumn<string>('creditamount'),
        cscmatch: new SchemaColumn<Select>('cscmatch'),
        currency: new SchemaColumn<Select>('currency'),
        customersubof: new SchemaColumn<Select>('customersubof'),
        customform: new SchemaColumn<Select>('customform'),
        customgl: new SchemaColumn<boolean>('customgl'),
        custtype: new SchemaColumn<Select>('custtype'),
        datecreated: new SchemaColumn<string>('datecreated'),
        daysopen: new SchemaColumn<number>('daysopen'),
        daysoverdue: new SchemaColumn<number>('daysoverdue'),
        debitamount: new SchemaColumn<string>('debitamount'),
        deferredrevenue: new SchemaColumn<string>('deferredrevenue'),
        deferrevrec: new SchemaColumn<boolean>('deferrevrec'),
        department: new SchemaColumn<Select>('department'),
        depositdate: new SchemaColumn<string>('depositdate'),
        deposittransaction: new SchemaColumn<Select>('deposittransaction'),
        draccount: new SchemaColumn<Select>('draccount'),
        duedate: new SchemaColumn<string>('duedate'),
        email: new SchemaColumn<string>('email'),
        employee: new SchemaColumn<Select>('employee'),
        enddate: new SchemaColumn<string>('enddate'),
        entity: new SchemaColumn<Select>('entity'),
        entitystatus: new SchemaColumn<Select>('entitystatus'),
        estgrossprofit: new SchemaColumn<string>('estgrossprofit'),
        estgrossprofitpct: new SchemaColumn<string>('estgrossprofitpct'),
        exchangerate: new SchemaColumn<string>('exchangerate'),
        excludecommission: new SchemaColumn<boolean>('excludecommission'),
        excludefromraterequest: new SchemaColumn<boolean>('excludefromraterequest'),
        expectedclosedate: new SchemaColumn<string>('expectedclosedate'),
        expectedreceiptdate: new SchemaColumn<string>('expectedreceiptdate'),
        expensedate: new SchemaColumn<string>('expensedate'),
        expreports: new SchemaColumn<Select>('expreports'),
        externalid: new SchemaColumn<Select>('externalid'),
        externalidstring: new SchemaColumn<string>('externalidstring'),
        finchrg: new SchemaColumn<boolean>('finchrg'),
        firmed: new SchemaColumn<boolean>('firmed'),
        forecasttype: new SchemaColumn<Select>('forecasttype'),
        formuladate: new SchemaColumn<string>('formuladate'),
        formulanumeric: new SchemaColumn<number>('formulanumeric'),
        formulatext: new SchemaColumn<string>('formulatext'),
        fulfillingtransaction: new SchemaColumn<Select>('fulfillingtransaction'),
        fxaccount: new SchemaColumn<Select>('fxaccount'),
        fxamount: new SchemaColumn<string>('fxamount'),
        fxcostestimate: new SchemaColumn<string>('fxcostestimate'),
        fxcostestimaterate: new SchemaColumn<string>('fxcostestimaterate'),
        fxestgrossprofit: new SchemaColumn<string>('fxestgrossprofit'),
        fxtrancostestimate: new SchemaColumn<string>('fxtrancostestimate'),
        fxvsoeallocation: new SchemaColumn<string>('fxvsoeallocation'),
        fxvsoeamount: new SchemaColumn<string>('fxvsoeamount'),
        fxvsoeprice: new SchemaColumn<string>('fxvsoeprice'),
        gcoavailabeltocharge: new SchemaColumn<boolean>('gcoavailabeltocharge'),
        gcoavailabletorefund: new SchemaColumn<string>('gcoavailabletorefund'),
        gcoavsstreetmatch: new SchemaColumn<string>('gcoavsstreetmatch'),
        gcoavszipmatch: new SchemaColumn<string>('gcoavszipmatch'),
        gcobuyeraccountage: new SchemaColumn<number>('gcobuyeraccountage'),
        gcobuyerip: new SchemaColumn<string>('gcobuyerip'),
        gcochargeamount: new SchemaColumn<string>('gcochargeamount'),
        gcochargebackamount: new SchemaColumn<string>('gcochargebackamount'),
        gcoconfirmedchargedtotal: new SchemaColumn<string>('gcoconfirmedchargedtotal'),
        gcoconfirmedrefundedtotal: new SchemaColumn<string>('gcoconfirmedrefundedtotal'),
        gcocreditcardnumber: new SchemaColumn<string>('gcocreditcardnumber'),
        gcocscmatch: new SchemaColumn<string>('gcocscmatch'),
        gcofinancialstate: new SchemaColumn<string>('gcofinancialstate'),
        gcofulfillmentstate: new SchemaColumn<string>('gcofulfillmentstate'),
        gcoorderid: new SchemaColumn<string>('gcoorderid'),
        gcoordertotal: new SchemaColumn<string>('gcoordertotal'),
        gcopromotionamount: new SchemaColumn<string>('gcopromotionamount'),
        gcopromotionname: new SchemaColumn<string>('gcopromotionname'),
        gcorefundamount: new SchemaColumn<string>('gcorefundamount'),
        gcoshippingtotal: new SchemaColumn<string>('gcoshippingtotal'),
        gcostatechangeddetail: new SchemaColumn<string>('gcostatechangeddetail'),
        giftcertificate: new SchemaColumn<string>('giftcertificate'),
        grossamount: new SchemaColumn<string>('grossamount'),
        includeinforecast: new SchemaColumn<boolean>('includeinforecast'),
        incoterm: new SchemaColumn<Select>('incoterm'),
        intercostatus: new SchemaColumn<Select>('intercostatus'),
        intercotransaction: new SchemaColumn<Select>('intercotransaction'),
        internalid: new SchemaColumn<Select>('internalid'),
        internalidnumber: new SchemaColumn<number>('internalidnumber'),
        inventorylocation: new SchemaColumn<Select>('inventorylocation'),
        inventorysubsidiary: new SchemaColumn<Select>('inventorysubsidiary'),
        invsoebundle: new SchemaColumn<boolean>('invsoebundle'),
        isallocation: new SchemaColumn<boolean>('isallocation'),
        isbackflush: new SchemaColumn<boolean>('isbackflush'),
        iscustomapproval: new SchemaColumn<boolean>('iscustomapproval'),
        isgcochargeback: new SchemaColumn<boolean>('isgcochargeback'),
        isgcochargeconfirmed: new SchemaColumn<boolean>('isgcochargeconfirmed'),
        isgcopaymentguaranteed: new SchemaColumn<boolean>('isgcopaymentguaranteed'),
        isgcorefundconfirmed: new SchemaColumn<boolean>('isgcorefundconfirmed'),
        isinsidedelivery: new SchemaColumn<boolean>('isinsidedelivery'),
        isinsidepickup: new SchemaColumn<boolean>('isinsidepickup'),
        isintercompanyadjustment: new SchemaColumn<boolean>('isintercompanyadjustment'),
        isintransitpayment: new SchemaColumn<boolean>('isintransitpayment'),
        ispaypalmeth: new SchemaColumn<boolean>('ispaypalmeth'),
        isreversal: new SchemaColumn<boolean>('isreversal'),
        isrevrectransaction: new SchemaColumn<boolean>('isrevrectransaction'),
        isscrap: new SchemaColumn<boolean>('isscrap'),
        isshipaddress: new SchemaColumn<boolean>('isshipaddress'),
        istransferpricecosting: new SchemaColumn<boolean>('istransferpricecosting'),
        isvsoealloc: new SchemaColumn<boolean>('isvsoealloc'),
        iswip: new SchemaColumn<boolean>('iswip'),
        item: new SchemaColumn<Select>('item'),
        itemfulfillmentchoice: new SchemaColumn<Select>('itemfulfillmentchoice'),
        itemrevision: new SchemaColumn<Select>('itemrevision'),
        itemsubof: new SchemaColumn<Select>('itemsubof'),
        lastmodifieddate: new SchemaColumn<string>('lastmodifieddate'),
        leadsource: new SchemaColumn<Select>('leadsource'),
        line: new SchemaColumn<number>('line'),
        lineuniquekey: new SchemaColumn<number>('lineuniquekey'),
        location: new SchemaColumn<Select>('location'),
        mainline: new SchemaColumn<boolean>('mainline'),
        mainname: new SchemaColumn<Select>('mainname'),
        matchbilltoreceipt: new SchemaColumn<boolean>('matchbilltoreceipt'),
        memo: new SchemaColumn<string>('memo'),
        memomain: new SchemaColumn<string>('memomain'),
        memorized: new SchemaColumn<boolean>('memorized'),
        merchantaccount: new SchemaColumn<string>('merchantaccount'),
        message: new SchemaColumn<string>('message'),
        multisubsidiary: new SchemaColumn<boolean>('multisubsidiary'),
        netamount: new SchemaColumn<string>('netamount'),
        nextapprover: new SchemaColumn<Select>('nextapprover'),
        nextbilldate: new SchemaColumn<string>('nextbilldate'),
        nonreimbursable: new SchemaColumn<boolean>('nonreimbursable'),
        number: new SchemaColumn<number>('number'),
        opportunity: new SchemaColumn<Select>('opportunity'),
        otherrefnum: new SchemaColumn<string>('otherrefnum'),
        packagecount: new SchemaColumn<number>('packagecount'),
        paidtransaction: new SchemaColumn<Select>('paidtransaction'),
        partner: new SchemaColumn<Select>('partner'),
        partnercontribution: new SchemaColumn<number>('partnercontribution'),
        partnerrole: new SchemaColumn<Select>('partnerrole'),
        partnerteammember: new SchemaColumn<Select>('partnerteammember'),
        payingtransaction: new SchemaColumn<Select>('payingtransaction'),
        paymenteventdate: new SchemaColumn<string>('paymenteventdate'),
        paymenteventholdreason: new SchemaColumn<Select>('paymenteventholdreason'),
        paymenteventpurchasecardused: new SchemaColumn<boolean>('paymenteventpurchasecardused'),
        paymenteventpurchasedatasent: new SchemaColumn<boolean>('paymenteventpurchasedatasent'),
        paymenteventresult: new SchemaColumn<Select>('paymenteventresult'),
        paymenteventtype: new SchemaColumn<Select>('paymenteventtype'),
        paymenthold: new SchemaColumn<boolean>('paymenthold'),
        paymentmethod: new SchemaColumn<Select>('paymentmethod'),
        paymentoption: new SchemaColumn<string>('paymentoption'),
        paypalpending: new SchemaColumn<boolean>('paypalpending'),
        paypalstatus: new SchemaColumn<string>('paypalstatus'),
        paypaltranid: new SchemaColumn<string>('paypaltranid'),
        pnrefnum: new SchemaColumn<string>('pnrefnum'),
        poastext: new SchemaColumn<string>('poastext'),
        posting: new SchemaColumn<boolean>('posting'),
        postingperiod: new SchemaColumn<string>('postingperiod'),
        pricelevel: new SchemaColumn<Select>('pricelevel'),
        printedpickingticket: new SchemaColumn<boolean>('printedpickingticket'),
        probability: new SchemaColumn<number>('probability'),
        projectedamount: new SchemaColumn<string>('projectedamount'),
        projecttask: new SchemaColumn<Select>('projecttask'),
        promocode: new SchemaColumn<Select>('promocode'),
        purchaseorder: new SchemaColumn<Select>('purchaseorder'),
        quantity: new SchemaColumn<number>('quantity'),
        quantitybilled: new SchemaColumn<number>('quantitybilled'),
        quantitycommitted: new SchemaColumn<number>('quantitycommitted'),
        quantitypacked: new SchemaColumn<number>('quantitypacked'),
        quantitypicked: new SchemaColumn<number>('quantitypicked'),
        quantityrevcommitted: new SchemaColumn<number>('quantityrevcommitted'),
        quantityshiprecv: new SchemaColumn<number>('quantityshiprecv'),
        recognizedrevenue: new SchemaColumn<string>('recognizedrevenue'),
        recordtype: new SchemaColumn<string>('recordtype'),
        revcommitstatus: new SchemaColumn<Select>('revcommitstatus'),
        revcommittingstatus: new SchemaColumn<boolean>('revcommittingstatus'),
        revcommittingtransaction: new SchemaColumn<Select>('revcommittingtransaction'),
        revenuestatus: new SchemaColumn<Select>('revenuestatus'),
        reversaldate: new SchemaColumn<string>('reversaldate'),
        reversalnumber: new SchemaColumn<string>('reversalnumber'),
        revrecenddate: new SchemaColumn<string>('revrecenddate'),
        revreconrevcommitment: new SchemaColumn<boolean>('revreconrevcommitment'),
        revrecstartdate: new SchemaColumn<string>('revrecstartdate'),
        revrecterminmonths: new SchemaColumn<number>('revrecterminmonths'),
        saleseffectivedate: new SchemaColumn<string>('saleseffectivedate'),
        salesorder: new SchemaColumn<Select>('salesorder'),
        salesrep: new SchemaColumn<Select>('salesrep'),
        salesteammember: new SchemaColumn<Select>('salesteammember'),
        salesteamrole: new SchemaColumn<Select>('salesteamrole'),
        schedulingmethod: new SchemaColumn<Select>('schedulingmethod'),
        serialnumber: new SchemaColumn<string>('serialnumber'),
        serialnumbercost: new SchemaColumn<string>('serialnumbercost'),
        serialnumbercostadjustment: new SchemaColumn<string>('serialnumbercostadjustment'),
        serialnumberquantity: new SchemaColumn<number>('serialnumberquantity'),
        shipcarrier: new SchemaColumn<Select>('shipcarrier'),
        shipcomplete: new SchemaColumn<boolean>('shipcomplete'),
        shipcounty: new SchemaColumn<string>('shipcounty'),
        shipdate: new SchemaColumn<string>('shipdate'),
        shipgroup: new SchemaColumn<number>('shipgroup'),
        shipmethod: new SchemaColumn<Select>('shipmethod'),
        shipping: new SchemaColumn<boolean>('shipping'),
        shiprecvstatus: new SchemaColumn<boolean>('shiprecvstatus'),
        shiprecvstatusline: new SchemaColumn<boolean>('shiprecvstatusline'),
        shipto: new SchemaColumn<Select>('shipto'),
        source: new SchemaColumn<Select>('source'),
        startdate: new SchemaColumn<string>('startdate'),
        status: new SchemaColumn<Select>('status'),
        subsidiary: new SchemaColumn<Select>('subsidiary'),
        taxitem: new SchemaColumn<Select>('taxitem'),
        taxline: new SchemaColumn<boolean>('taxline'),
        taxperiod: new SchemaColumn<string>('taxperiod'),
        taxpointdate: new SchemaColumn<string>('taxpointdate'),
        taxrate: new SchemaColumn<string>('taxrate'),
        terms: new SchemaColumn<Select>('terms'),
        termsofsale: new SchemaColumn<Select>('termsofsale'),
        title: new SchemaColumn<string>('title'),
        tobeemailed: new SchemaColumn<boolean>('tobeemailed'),
        tobeprinted: new SchemaColumn<boolean>('tobeprinted'),
        tosubsidiary: new SchemaColumn<Select>('tosubsidiary'),
        totalamount: new SchemaColumn<string>('totalamount'),
        trackingnumbers: new SchemaColumn<string>('trackingnumbers'),
        trancostestimate: new SchemaColumn<string>('trancostestimate'),
        trandate: new SchemaColumn<string>('trandate'),
        tranestgrossprofit: new SchemaColumn<string>('tranestgrossprofit'),
        tranestgrossprofitpct: new SchemaColumn<string>('tranestgrossprofitpct'),
        tranfxestgrossprofit: new SchemaColumn<string>('tranfxestgrossprofit'),
        tranid: new SchemaColumn<string>('tranid'),
        tranisvsoebundle: new SchemaColumn<boolean>('tranisvsoebundle'),
        transactiondiscount: new SchemaColumn<boolean>('transactiondiscount'),
        transactionlinetype: new SchemaColumn<Select>('transactionlinetype'),
        transactionnumber: new SchemaColumn<string>('transactionnumber'),
        transferlocation: new SchemaColumn<Select>('transferlocation'),
        transferorderquantitycommitted: new SchemaColumn<number>('transferorderquantitycommitted'),
        transferorderquantitypacked: new SchemaColumn<number>('transferorderquantitypacked'),
        transferorderquantitypicked: new SchemaColumn<number>('transferorderquantitypicked'),
        transferorderquantityreceived: new SchemaColumn<number>('transferorderquantityreceived'),
        transferorderquantityshipped: new SchemaColumn<number>('transferorderquantityshipped'),
        type: new SchemaColumn<Select>('type'),
        unit: new SchemaColumn<Select>('unit'),
        unitcostoverride: new SchemaColumn<string>('unitcostoverride'),
        vendtype: new SchemaColumn<Select>('vendtype'),
        visibletocustomer: new SchemaColumn<boolean>('visibletocustomer'),
        voided: new SchemaColumn<boolean>('voided'),
        vsoeallocation: new SchemaColumn<string>('vsoeallocation'),
        vsoeamount: new SchemaColumn<string>('vsoeamount'),
        vsoedeferral: new SchemaColumn<Select>('vsoedeferral'),
        vsoedelivered: new SchemaColumn<boolean>('vsoedelivered'),
        vsoepermitdiscount: new SchemaColumn<Select>('vsoepermitdiscount'),
        vsoeprice: new SchemaColumn<string>('vsoeprice'),
        website: new SchemaColumn<Select>('website')
    };

    public columns = {
        account: new SchemaColumn<Select>('account'),
        accounttype: new SchemaColumn<Select>('accounttype'),
        acctcorpcardexp: new SchemaColumn<Select>('acctcorpcardexp'),
        actualshipdate: new SchemaColumn<string>('actualshipdate'),
        altsalesamount: new SchemaColumn<string>('altsalesamount'),
        altsalesnetamount: new SchemaColumn<string>('altsalesnetamount'),
        amount: new SchemaColumn<string>('amount'),
        amountpaid: new SchemaColumn<string>('amountpaid'),
        amountremaining: new SchemaColumn<string>('amountremaining'),
        amountunbilled: new SchemaColumn<string>('amountunbilled'),
        anylineitem: new SchemaColumn<Select>('anylineitem'),
        appliedtoforeignamount: new SchemaColumn<string>('appliedtoforeignamount'),
        appliedtoisfxvariance: new SchemaColumn<boolean>('appliedtoisfxvariance'),
        appliedtolinkamount: new SchemaColumn<string>('appliedtolinkamount'),
        appliedtolinktype: new SchemaColumn<Select>('appliedtolinktype'),
        appliedtotransaction: new SchemaColumn<Select>('appliedtotransaction'),
        applyingforeignamount: new SchemaColumn<string>('applyingforeignamount'),
        applyingisfxvariance: new SchemaColumn<boolean>('applyingisfxvariance'),
        applyinglinkamount: new SchemaColumn<string>('applyinglinkamount'),
        applyinglinktype: new SchemaColumn<Select>('applyinglinktype'),
        applyingtransaction: new SchemaColumn<Select>('applyingtransaction'),
        approvalstatus: new SchemaColumn<Select>('approvalstatus'),
        authcode: new SchemaColumn<string>('authcode'),
        autocalculatelag: new SchemaColumn<boolean>('autocalculatelag'),
        avsstreetmatch: new SchemaColumn<Select>('avsstreetmatch'),
        avszipmatch: new SchemaColumn<Select>('avszipmatch'),
        billable: new SchemaColumn<boolean>('billable'),
        billcounty: new SchemaColumn<string>('billcounty'),
        billeddate: new SchemaColumn<string>('billeddate'),
        billingschedule: new SchemaColumn<Select>('billingschedule'),
        billingstatus: new SchemaColumn<boolean>('billingstatus'),
        billingtransaction: new SchemaColumn<Select>('billingtransaction'),
        billvariancestatus: new SchemaColumn<Select>('billvariancestatus'),
        binnumber: new SchemaColumn<string>('binnumber'),
        binnumberquantity: new SchemaColumn<number>('binnumberquantity'),
        bookspecifictransaction: new SchemaColumn<boolean>('bookspecifictransaction'),
        buildentireassembly: new SchemaColumn<boolean>('buildentireassembly'),
        buildvariance: new SchemaColumn<number>('buildvariance'),
        built: new SchemaColumn<number>('built'),
        canhavestackablepromotions: new SchemaColumn<boolean>('canhavestackablepromotions'),
        catchupperiod: new SchemaColumn<Select>('catchupperiod'),
        cccustomercode: new SchemaColumn<string>('cccustomercode'),
        ccexpiredate: new SchemaColumn<string>('ccexpiredate'),
        ccexpdate: new SchemaColumn<string>('ccexpdate'),
        ccname: new SchemaColumn<string>('ccname'),
        ccnumber: new SchemaColumn<string>('ccnumber'),
        chargetype: new SchemaColumn<Select>('chargetype'),
        class: new SchemaColumn<Select>('class'),
        cleared: new SchemaColumn<boolean>('cleared'),
        closed: new SchemaColumn<boolean>('closed'),
        closedate: new SchemaColumn<string>('closedate'),
        cogs: new SchemaColumn<boolean>('cogs'),
        commissioneffectivedate: new SchemaColumn<string>('commissioneffectivedate'),
        commit: new SchemaColumn<Select>('commit'),
        confirmationnumber: new SchemaColumn<string>('confirmationnumber'),
        contribution: new SchemaColumn<number>('contribution'),
        costcomponentamount: new SchemaColumn<string>('costcomponentamount'),
        costcomponentcategory: new SchemaColumn<Select>('costcomponentcategory'),
        costcomponentitem: new SchemaColumn<Select>('costcomponentitem'),
        costcomponentquantity: new SchemaColumn<number>('costcomponentquantity'),
        costcomponentstandardcost: new SchemaColumn<number>('costcomponentstandardcost'),
        costestimate: new SchemaColumn<string>('costestimate'),
        costestimaterate: new SchemaColumn<string>('costestimaterate'),
        costestimatetype: new SchemaColumn<Select>('costestimatetype'),
        createdby: new SchemaColumn<Select>('createdby'),
        createdfrom: new SchemaColumn<Select>('createdfrom'),
        creditamount: new SchemaColumn<string>('creditamount'),
        cscmatch: new SchemaColumn<Select>('cscmatch'),
        currency: new SchemaColumn<Select>('currency'),
        customersubof: new SchemaColumn<Select>('customersubof'),
        customform: new SchemaColumn<Select>('customform'),
        customgl: new SchemaColumn<boolean>('customgl'),
        custtype: new SchemaColumn<Select>('custtype'),
        datecreated: new SchemaColumn<string>('datecreated'),
        daysopen: new SchemaColumn<number>('daysopen'),
        daysoverdue: new SchemaColumn<number>('daysoverdue'),
        debitamount: new SchemaColumn<string>('debitamount'),
        deferredrevenue: new SchemaColumn<string>('deferredrevenue'),
        deferrevrec: new SchemaColumn<boolean>('deferrevrec'),
        department: new SchemaColumn<Select>('department'),
        depositdate: new SchemaColumn<string>('depositdate'),
        deposittransaction: new SchemaColumn<Select>('deposittransaction'),
        draccount: new SchemaColumn<Select>('draccount'),
        duedate: new SchemaColumn<string>('duedate'),
        email: new SchemaColumn<string>('email'),
        employee: new SchemaColumn<Select>('employee'),
        enddate: new SchemaColumn<string>('enddate'),
        entity: new SchemaColumn<Select>('entity'),
        entitystatus: new SchemaColumn<Select>('entitystatus'),
        estgrossprofit: new SchemaColumn<string>('estgrossprofit'),
        estgrossprofitpct: new SchemaColumn<string>('estgrossprofitpct'),
        exchangerate: new SchemaColumn<string>('exchangerate'),
        excludecommission: new SchemaColumn<boolean>('excludecommission'),
        excludefromraterequest: new SchemaColumn<boolean>('excludefromraterequest'),
        expectedclosedate: new SchemaColumn<string>('expectedclosedate'),
        expectedreceiptdate: new SchemaColumn<string>('expectedreceiptdate'),
        expensedate: new SchemaColumn<string>('expensedate'),
        expreports: new SchemaColumn<Select>('expreports'),
        externalid: new SchemaColumn<Select>('externalid'),
        externalidstring: new SchemaColumn<string>('externalidstring'),
        finchrg: new SchemaColumn<boolean>('finchrg'),
        firmed: new SchemaColumn<boolean>('firmed'),
        forecasttype: new SchemaColumn<Select>('forecasttype'),
        formuladate: new SchemaColumn<string>('formuladate'),
        formulanumeric: new SchemaColumn<number>('formulanumeric'),
        formulatext: new SchemaColumn<string>('formulatext'),
        fulfillingtransaction: new SchemaColumn<Select>('fulfillingtransaction'),
        fxaccount: new SchemaColumn<Select>('fxaccount'),
        fxamount: new SchemaColumn<string>('fxamount'),
        fxcostestimate: new SchemaColumn<string>('fxcostestimate'),
        fxcostestimaterate: new SchemaColumn<string>('fxcostestimaterate'),
        fxestgrossprofit: new SchemaColumn<string>('fxestgrossprofit'),
        fxtrancostestimate: new SchemaColumn<string>('fxtrancostestimate'),
        fxvsoeallocation: new SchemaColumn<string>('fxvsoeallocation'),
        fxvsoeamount: new SchemaColumn<string>('fxvsoeamount'),
        fxvsoeprice: new SchemaColumn<string>('fxvsoeprice'),
        gcoavailabeltocharge: new SchemaColumn<boolean>('gcoavailabeltocharge'),
        gcoavailabletorefund: new SchemaColumn<string>('gcoavailabletorefund'),
        gcoavsstreetmatch: new SchemaColumn<string>('gcoavsstreetmatch'),
        gcoavszipmatch: new SchemaColumn<string>('gcoavszipmatch'),
        gcobuyeraccountage: new SchemaColumn<number>('gcobuyeraccountage'),
        gcobuyerip: new SchemaColumn<string>('gcobuyerip'),
        gcochargeamount: new SchemaColumn<string>('gcochargeamount'),
        gcochargebackamount: new SchemaColumn<string>('gcochargebackamount'),
        gcoconfirmedchargedtotal: new SchemaColumn<string>('gcoconfirmedchargedtotal'),
        gcoconfirmedrefundedtotal: new SchemaColumn<string>('gcoconfirmedrefundedtotal'),
        gcocreditcardnumber: new SchemaColumn<string>('gcocreditcardnumber'),
        gcocscmatch: new SchemaColumn<string>('gcocscmatch'),
        gcofinancialstate: new SchemaColumn<string>('gcofinancialstate'),
        gcofulfillmentstate: new SchemaColumn<string>('gcofulfillmentstate'),
        gcoorderid: new SchemaColumn<string>('gcoorderid'),
        gcoordertotal: new SchemaColumn<string>('gcoordertotal'),
        gcopromotionamount: new SchemaColumn<string>('gcopromotionamount'),
        gcopromotionname: new SchemaColumn<string>('gcopromotionname'),
        gcorefundamount: new SchemaColumn<string>('gcorefundamount'),
        gcoshippingtotal: new SchemaColumn<string>('gcoshippingtotal'),
        gcostatechangeddetail: new SchemaColumn<string>('gcostatechangeddetail'),
        giftcertificate: new SchemaColumn<string>('giftcertificate'),
        grossamount: new SchemaColumn<string>('grossamount'),
        includeinforecast: new SchemaColumn<boolean>('includeinforecast'),
        incoterm: new SchemaColumn<Select>('incoterm'),
        intercostatus: new SchemaColumn<Select>('intercostatus'),
        intercotransaction: new SchemaColumn<Select>('intercotransaction'),
        internalid: new SchemaColumn<Select>('internalid'),
        internalidnumber: new SchemaColumn<number>('internalidnumber'),
        inventorylocation: new SchemaColumn<Select>('inventorylocation'),
        inventorysubsidiary: new SchemaColumn<Select>('inventorysubsidiary'),
        invsoebundle: new SchemaColumn<boolean>('invsoebundle'),
        isallocation: new SchemaColumn<boolean>('isallocation'),
        isbackflush: new SchemaColumn<boolean>('isbackflush'),
        iscustomapproval: new SchemaColumn<boolean>('iscustomapproval'),
        isgcochargeback: new SchemaColumn<boolean>('isgcochargeback'),
        isgcochargeconfirmed: new SchemaColumn<boolean>('isgcochargeconfirmed'),
        isgcopaymentguaranteed: new SchemaColumn<boolean>('isgcopaymentguaranteed'),
        isgcorefundconfirmed: new SchemaColumn<boolean>('isgcorefundconfirmed'),
        isinsidedelivery: new SchemaColumn<boolean>('isinsidedelivery'),
        isinsidepickup: new SchemaColumn<boolean>('isinsidepickup'),
        isintercompanyadjustment: new SchemaColumn<boolean>('isintercompanyadjustment'),
        isintransitpayment: new SchemaColumn<boolean>('isintransitpayment'),
        ispaypalmeth: new SchemaColumn<boolean>('ispaypalmeth'),
        isreversal: new SchemaColumn<boolean>('isreversal'),
        isrevrectransaction: new SchemaColumn<boolean>('isrevrectransaction'),
        isscrap: new SchemaColumn<boolean>('isscrap'),
        isshipaddress: new SchemaColumn<boolean>('isshipaddress'),
        istransferpricecosting: new SchemaColumn<boolean>('istransferpricecosting'),
        isvsoealloc: new SchemaColumn<boolean>('isvsoealloc'),
        iswip: new SchemaColumn<boolean>('iswip'),
        item: new SchemaColumn<Select>('item'),
        itemfulfillmentchoice: new SchemaColumn<Select>('itemfulfillmentchoice'),
        itemrevision: new SchemaColumn<Select>('itemrevision'),
        itemsubof: new SchemaColumn<Select>('itemsubof'),
        lastmodifieddate: new SchemaColumn<string>('lastmodifieddate'),
        leadsource: new SchemaColumn<Select>('leadsource'),
        line: new SchemaColumn<number>('line'),
        lineuniquekey: new SchemaColumn<number>('lineuniquekey'),
        location: new SchemaColumn<Select>('location'),
        mainline: new SchemaColumn<boolean>('mainline'),
        mainname: new SchemaColumn<Select>('mainname'),
        matchbilltoreceipt: new SchemaColumn<boolean>('matchbilltoreceipt'),
        memo: new SchemaColumn<string>('memo'),
        memomain: new SchemaColumn<string>('memomain'),
        memorized: new SchemaColumn<boolean>('memorized'),
        merchantaccount: new SchemaColumn<string>('merchantaccount'),
        message: new SchemaColumn<string>('message'),
        multisubsidiary: new SchemaColumn<boolean>('multisubsidiary'),
        netamount: new SchemaColumn<string>('netamount'),
        nextapprover: new SchemaColumn<Select>('nextapprover'),
        nextbilldate: new SchemaColumn<string>('nextbilldate'),
        nonreimbursable: new SchemaColumn<boolean>('nonreimbursable'),
        number: new SchemaColumn<number>('number'),
        opportunity: new SchemaColumn<Select>('opportunity'),
        otherrefnum: new SchemaColumn<string>('otherrefnum'),
        packagecount: new SchemaColumn<number>('packagecount'),
        paidtransaction: new SchemaColumn<Select>('paidtransaction'),
        partner: new SchemaColumn<Select>('partner'),
        partnercontribution: new SchemaColumn<number>('partnercontribution'),
        partnerrole: new SchemaColumn<Select>('partnerrole'),
        partnerteammember: new SchemaColumn<Select>('partnerteammember'),
        payingtransaction: new SchemaColumn<Select>('payingtransaction'),
        paymenteventdate: new SchemaColumn<string>('paymenteventdate'),
        paymenteventholdreason: new SchemaColumn<Select>('paymenteventholdreason'),
        paymenteventpurchasecardused: new SchemaColumn<boolean>('paymenteventpurchasecardused'),
        paymenteventpurchasedatasent: new SchemaColumn<boolean>('paymenteventpurchasedatasent'),
        paymenteventresult: new SchemaColumn<Select>('paymenteventresult'),
        paymenteventtype: new SchemaColumn<Select>('paymenteventtype'),
        paymenthold: new SchemaColumn<boolean>('paymenthold'),
        paymentmethod: new SchemaColumn<Select>('paymentmethod'),
        paymentoption: new SchemaColumn<string>('paymentoption'),
        paypalpending: new SchemaColumn<boolean>('paypalpending'),
        paypalstatus: new SchemaColumn<string>('paypalstatus'),
        paypaltranid: new SchemaColumn<string>('paypaltranid'),
        pnrefnum: new SchemaColumn<string>('pnrefnum'),
        poastext: new SchemaColumn<string>('poastext'),
        posting: new SchemaColumn<boolean>('posting'),
        postingperiod: new SchemaColumn<string>('postingperiod'),
        pricelevel: new SchemaColumn<Select>('pricelevel'),
        printedpickingticket: new SchemaColumn<boolean>('printedpickingticket'),
        probability: new SchemaColumn<number>('probability'),
        projectedamount: new SchemaColumn<string>('projectedamount'),
        projecttask: new SchemaColumn<Select>('projecttask'),
        promocode: new SchemaColumn<Select>('promocode'),
        purchaseorder: new SchemaColumn<Select>('purchaseorder'),
        quantity: new SchemaColumn<number>('quantity'),
        quantitybilled: new SchemaColumn<number>('quantitybilled'),
        quantitycommitted: new SchemaColumn<number>('quantitycommitted'),
        quantitypacked: new SchemaColumn<number>('quantitypacked'),
        quantitypicked: new SchemaColumn<number>('quantitypicked'),
        quantityrevcommitted: new SchemaColumn<number>('quantityrevcommitted'),
        quantityshiprecv: new SchemaColumn<number>('quantityshiprecv'),
        recognizedrevenue: new SchemaColumn<string>('recognizedrevenue'),
        recordtype: new SchemaColumn<string>('recordtype'),
        revcommitstatus: new SchemaColumn<Select>('revcommitstatus'),
        revcommittingstatus: new SchemaColumn<boolean>('revcommittingstatus'),
        revcommittingtransaction: new SchemaColumn<Select>('revcommittingtransaction'),
        revenuestatus: new SchemaColumn<Select>('revenuestatus'),
        reversaldate: new SchemaColumn<string>('reversaldate'),
        reversalnumber: new SchemaColumn<string>('reversalnumber'),
        revrecenddate: new SchemaColumn<string>('revrecenddate'),
        revreconrevcommitment: new SchemaColumn<boolean>('revreconrevcommitment'),
        revrecstartdate: new SchemaColumn<string>('revrecstartdate'),
        revrecterminmonths: new SchemaColumn<number>('revrecterminmonths'),
        saleseffectivedate: new SchemaColumn<string>('saleseffectivedate'),
        salesorder: new SchemaColumn<Select>('salesorder'),
        salesrep: new SchemaColumn<Select>('salesrep'),
        salesteammember: new SchemaColumn<Select>('salesteammember'),
        salesteamrole: new SchemaColumn<Select>('salesteamrole'),
        schedulingmethod: new SchemaColumn<Select>('schedulingmethod'),
        serialnumber: new SchemaColumn<string>('serialnumber'),
        serialnumbercost: new SchemaColumn<string>('serialnumbercost'),
        serialnumbercostadjustment: new SchemaColumn<string>('serialnumbercostadjustment'),
        serialnumberquantity: new SchemaColumn<number>('serialnumberquantity'),
        shipcarrier: new SchemaColumn<Select>('shipcarrier'),
        shipcomplete: new SchemaColumn<boolean>('shipcomplete'),
        shipcounty: new SchemaColumn<string>('shipcounty'),
        shipdate: new SchemaColumn<string>('shipdate'),
        shipgroup: new SchemaColumn<number>('shipgroup'),
        shipmethod: new SchemaColumn<Select>('shipmethod'),
        shipping: new SchemaColumn<boolean>('shipping'),
        shiprecvstatus: new SchemaColumn<boolean>('shiprecvstatus'),
        shiprecvstatusline: new SchemaColumn<boolean>('shiprecvstatusline'),
        shipto: new SchemaColumn<Select>('shipto'),
        source: new SchemaColumn<Select>('source'),
        startdate: new SchemaColumn<string>('startdate'),
        status: new SchemaColumn<Select>('status'),
        subsidiary: new SchemaColumn<Select>('subsidiary'),
        taxitem: new SchemaColumn<Select>('taxitem'),
        taxline: new SchemaColumn<boolean>('taxline'),
        taxperiod: new SchemaColumn<string>('taxperiod'),
        taxpointdate: new SchemaColumn<string>('taxpointdate'),
        taxrate: new SchemaColumn<string>('taxrate'),
        terms: new SchemaColumn<Select>('terms'),
        termsofsale: new SchemaColumn<Select>('termsofsale'),
        title: new SchemaColumn<string>('title'),
        tobeemailed: new SchemaColumn<boolean>('tobeemailed'),
        tobeprinted: new SchemaColumn<boolean>('tobeprinted'),
        tosubsidiary: new SchemaColumn<Select>('tosubsidiary'),
        totalamount: new SchemaColumn<string>('totalamount'),
        trackingnumbers: new SchemaColumn<string>('trackingnumbers'),
        trancostestimate: new SchemaColumn<string>('trancostestimate'),
        trandate: new SchemaColumn<string>('trandate'),
        tranestgrossprofit: new SchemaColumn<string>('tranestgrossprofit'),
        tranestgrossprofitpct: new SchemaColumn<string>('tranestgrossprofitpct'),
        tranfxestgrossprofit: new SchemaColumn<string>('tranfxestgrossprofit'),
        tranid: new SchemaColumn<string>('tranid'),
        tranisvsoebundle: new SchemaColumn<boolean>('tranisvsoebundle'),
        transactiondiscount: new SchemaColumn<boolean>('transactiondiscount'),
        transactionlinetype: new SchemaColumn<Select>('transactionlinetype'),
        transactionnumber: new SchemaColumn<string>('transactionnumber'),
        transferlocation: new SchemaColumn<Select>('transferlocation'),
        transferorderquantitycommitted: new SchemaColumn<number>('transferorderquantitycommitted'),
        transferorderquantitypacked: new SchemaColumn<number>('transferorderquantitypacked'),
        transferorderquantitypicked: new SchemaColumn<number>('transferorderquantitypicked'),
        transferorderquantityreceived: new SchemaColumn<number>('transferorderquantityreceived'),
        transferorderquantityshipped: new SchemaColumn<number>('transferorderquantityshipped'),
        type: new SchemaColumn<Select>('type'),
        unit: new SchemaColumn<Select>('unit'),
        unitcostoverride: new SchemaColumn<string>('unitcostoverride'),
        vendtype: new SchemaColumn<Select>('vendtype'),
        visibletocustomer: new SchemaColumn<boolean>('visibletocustomer'),
        voided: new SchemaColumn<boolean>('voided'),
        vsoeallocation: new SchemaColumn<string>('vsoeallocation'),
        vsoeamount: new SchemaColumn<string>('vsoeamount'),
        vsoedeferral: new SchemaColumn<Select>('vsoedeferral'),
        vsoedelivered: new SchemaColumn<boolean>('vsoedelivered'),
        vsoepermitdiscount: new SchemaColumn<Select>('vsoepermitdiscount'),
        vsoeprice: new SchemaColumn<string>('vsoeprice'),
        website: new SchemaColumn<Select>('website')
    };

    private fulfillingtransactionSchema = FulfillingtransactionSchema.getInstance();
    private locationSchema = LocationSchema.getInstance();
    private itemSchema = ItemSchema.getInstance();

    public joins = {
        fulfillingtransaction: new SchemaJoin(
            'fulfillingtransaction',
            this.fulfillingtransactionSchema
        ),
        location: new SchemaJoin('location', this.locationSchema),
        item: new SchemaJoin('item', this.itemSchema)
    };

    public initializeDefaults: {
        entity?: string;
        subsidiary?: string;
        billingaccount?: string;
        shipaddresslist?: string;
        shipaddress?: string;
        shipcountry?: string;
        shipstate?: string;
        shipzip?: string;
        shipcity?: string;
        shipaddr1?: string;
        shipaddr2?: string;
        shipaddressee?: string;
        shipattention?: string;
        shipisresidential?: string;
        shipoverride?: string;
        billexpenses?: string;
        billitems?: string;
        billtime?: string;
        billcharges?: string;
        billorderedtime?: string;
        billstart?: string;
        billend?: string;
        bulk?: string;
        memdate?: string;
        nexus?: string;
        currency?: string;
        chrgroupfield?: string;
        invgroupfield?: string;
        groupval?: string;
        automaticallyapplypromotions?: string;
        canhavestackable?: string;
        standalonecopy?: string;
        customform?: string;
        enablefieldtriggers?: string;
        enablefieldpermissions?: string;
        disabletriggers?: string;
        recordmode?: string;
        cf?: string;
        sobcmode?: string;
        shoppernexus?: string;
        print?: string;
        advancedprint?: string;
        is?: string;
        ps?: string;
        pt?: string;
        bom?: string;
        hasrm?: string;
        popup?: string;
        rmloaddata?: string;
        userm?: string;
        nameprefix?: string;
        deletionreason?: string;
        deletionreasonmemo?: string;
        platformtype?: string;
        ignorecache?: string;
    } = {
        entity: 'entity',
        subsidiary: 'subsidiary',
        billingaccount: 'billingaccount',
        shipaddresslist: 'shipaddresslist',
        shipaddress: 'shipaddress',
        shipcountry: 'shipcountry',
        shipstate: 'shipstate',
        shipzip: 'shipzip',
        shipcity: 'shipcity',
        shipaddr1: 'shipaddr1',
        shipaddr2: 'shipaddr2',
        shipaddressee: 'shipaddressee',
        shipattention: 'shipattention',
        shipisresidential: 'shipisresidential',
        shipoverride: 'shipoverride',
        billexpenses: 'billexpenses',
        billitems: 'billitems',
        billtime: 'billtime',
        billcharges: 'billcharges',
        billorderedtime: 'billorderedtime',
        billstart: 'billstart',
        billend: 'billend',
        bulk: 'bulk',
        memdate: 'memdate',
        nexus: 'nexus',
        currency: 'currency',
        chrgroupfield: 'chrgroupfield',
        invgroupfield: 'invgroupfield',
        groupval: 'groupval',
        automaticallyapplypromotions: 'automaticallyapplypromotions',
        canhavestackable: 'canhavestackable',
        standalonecopy: 'standalonecopy',
        customform: 'customform',
        enablefieldtriggers: 'enablefieldtriggers',
        enablefieldpermissions: 'enablefieldpermissions',
        disabletriggers: 'disabletriggers',
        recordmode: 'recordmode',
        cf: 'cf',
        sobcmode: 'sobcmode',
        shoppernexus: 'shoppernexus',
        print: 'print',
        advancedprint: 'advancedprint',
        is: 'is',
        ps: 'ps',
        pt: 'pt',
        bom: 'bom',
        hasrm: 'hasrm',
        popup: 'popup',
        rmloaddata: 'rmloaddata',
        userm: 'userm',
        nameprefix: 'nameprefix',
        deletionreason: 'deletionreason',
        deletionreasonmemo: 'deletionreasonmemo',
        platformtype: 'platformtype',
        ignorecache: 'ignorecache'
    };

    public transformDefaults: {
        customform?: string;
        enablefieldtriggers?: string;
        enablefieldpermissions?: string;
        disabletriggers?: string;
        recordmode?: string;
        cf?: string;
        sobcmode?: string;
        shoppernexus?: string;
        print?: string;
        advancedprint?: string;
        is?: string;
        ps?: string;
        pt?: string;
        bom?: string;
        hasrm?: string;
        popup?: string;
        rmloaddata?: string;
        userm?: string;
        nameprefix?: string;
        deletionreason?: string;
        deletionreasonmemo?: string;
        platformtype?: string;
        ignorecache?: string;
        billdate?: string;
        billremaining?: string;
        billcharges?: string;
    } = {
        customform: 'customform',
        enablefieldtriggers: 'enablefieldtriggers',
        enablefieldpermissions: 'enablefieldpermissions',
        disabletriggers: 'disabletriggers',
        recordmode: 'recordmode',
        cf: 'cf',
        sobcmode: 'sobcmode',
        shoppernexus: 'shoppernexus',
        print: 'print',
        advancedprint: 'advancedprint',
        is: 'is',
        ps: 'ps',
        pt: 'pt',
        bom: 'bom',
        hasrm: 'hasrm',
        popup: 'popup',
        rmloaddata: 'rmloaddata',
        userm: 'userm',
        nameprefix: 'nameprefix',
        deletionreason: 'deletionreason',
        deletionreasonmemo: 'deletionreasonmemo',
        platformtype: 'platformtype',
        ignorecache: 'ignorecache',
        billdate: 'billdate',
        billremaining: 'billremaining',
        billcharges: 'billcharges'
    };

    public sublists = {
        accountingbookdetail: {
            sublistId: 'accountingbookdetail',
            fields: {
                accountingbook: new SchemaSublistField<Select>(
                    'accountingbook',
                    'accountingbookdetail'
                ),
                exchangerate: new SchemaSublistField<string>(
                    'exchangerate',
                    'accountingbookdetail'
                ),
                revreconrevcommitment: new SchemaSublistField<boolean>(
                    'revreconrevcommitment',
                    'accountingbookdetail'
                ),
                tranisvsoebundle: new SchemaSublistField<boolean>(
                    'tranisvsoebundle',
                    'accountingbookdetail'
                )
            }
        },
        expcost: {
            sublistId: 'expcost',
            fields: {
                amortizationperiod: new SchemaSublistField<string>('amortizationperiod', 'expcost'),
                amortizationtype: new SchemaSublistField<string>('amortizationtype', 'expcost'),
                amount: new SchemaSublistField<string>('amount', 'expcost'),
                apply: new SchemaSublistField<boolean>('apply', 'expcost'),
                billeddate: new SchemaSublistField<string>('billeddate', 'expcost'),
                category: new SchemaSublistField<string>('category', 'expcost'),
                doc: new SchemaSublistField<number>('doc', 'expcost'),
                employee: new SchemaSublistField<string>('employee', 'expcost'),
                job: new SchemaSublistField<string>('job', 'expcost'),
                line: new SchemaSublistField<number>('line', 'expcost'),
                location: new SchemaSublistField<Select>('location', 'expcost'),
                memo: new SchemaSublistField<string>('memo', 'expcost'),
                originalamount: new SchemaSublistField<string>('originalamount', 'expcost'),
                revrecenddate: new SchemaSublistField<string>('revrecenddate', 'expcost'),
                revrecschedule: new SchemaSublistField<Select>('revrecschedule', 'expcost'),
                revrecstartdate: new SchemaSublistField<string>('revrecstartdate', 'expcost'),
                taxable: new SchemaSublistField<string>('taxable', 'expcost'),
                taxcode: new SchemaSublistField<Select>('taxcode', 'expcost'),
                taxrate1: new SchemaSublistField<string>('taxrate1', 'expcost'),
                url: new SchemaSublistField<string>('url', 'expcost')
            }
        },
        item: {
            sublistId: 'item',
            fields: {
                account: new SchemaSublistField<string>('account', 'item'),
                amortizationperiod: new SchemaSublistField<string>('amortizationperiod', 'item'),
                amortizationtype: new SchemaSublistField<string>('amortizationtype', 'item'),
                amount: new SchemaSublistField<string>('amount', 'item'),
                billvariancestatus: new SchemaSublistField<string>('billvariancestatus', 'item'),
                catchupperiod: new SchemaSublistField<Select>('catchupperiod', 'item'),
                chargetype: new SchemaSublistField<string>('chargetype', 'item'),
                costestimate: new SchemaSublistField<string>('costestimate', 'item'),
                costestimaterate: new SchemaSublistField<string>('costestimaterate', 'item'),
                costestimatetype: new SchemaSublistField<Select>('costestimatetype', 'item'),
                daysbeforeexpiration: new SchemaSublistField<string>(
                    'daysbeforeexpiration',
                    'item'
                ),
                deferrevrec: new SchemaSublistField<boolean>('deferrevrec', 'item'),
                description: new SchemaSublistField<string>('description', 'item'),
                excludefromraterequest: new SchemaSublistField<boolean>(
                    'excludefromraterequest',
                    'item'
                ),
                giftcertfrom: new SchemaSublistField<string>('giftcertfrom', 'item'),
                giftcertmessage: new SchemaSublistField<string>('giftcertmessage', 'item'),
                giftcertrecipientemail: new SchemaSublistField<string>(
                    'giftcertrecipientemail',
                    'item'
                ),
                giftcertrecipientname: new SchemaSublistField<string>(
                    'giftcertrecipientname',
                    'item'
                ),
                id: new SchemaSublistField<string>('id', 'item'),
                inventorydetail: new SchemaSublistField<string>('inventorydetail', 'item'),
                istaxable: new SchemaSublistField<boolean>('istaxable', 'item'),
                isvsoebundle: new SchemaSublistField<string>('isvsoebundle', 'item'),
                item: new SchemaSublistField<Select>('item', 'item'),
                itemsubtype: new SchemaSublistField<string>('itemsubtype', 'item'),
                itemtype: new SchemaSublistField<string>('itemtype', 'item'),
                job: new SchemaSublistField<Select>('job', 'item'),
                licensecode: new SchemaSublistField<string>('licensecode', 'item'),
                line: new SchemaSublistField<string>('line', 'item'),
                matrixtype: new SchemaSublistField<string>('matrixtype', 'item'),
                options: new SchemaSublistField<string>('options', 'item'),
                price: new SchemaSublistField<Select>('price', 'item'),
                printitems: new SchemaSublistField<string>('printitems', 'item'),
                quantity: new SchemaSublistField<number>('quantity', 'item'),
                quantityavailable: new SchemaSublistField<number>('quantityavailable', 'item'),
                quantityremaining: new SchemaSublistField<number>('quantityremaining', 'item'),
                rate: new SchemaSublistField<string>('rate', 'item'),
                rateschedule: new SchemaSublistField<string>('rateschedule', 'item'),
                revrecenddate: new SchemaSublistField<string>('revrecenddate', 'item'),
                revrecschedule: new SchemaSublistField<Select>('revrecschedule', 'item'),
                revrecstartdate: new SchemaSublistField<string>('revrecstartdate', 'item'),
                shipaddress: new SchemaSublistField<Select>('shipaddress', 'item'),
                shipcarrier: new SchemaSublistField<Select>('shipcarrier', 'item'),
                shipmethod: new SchemaSublistField<Select>('shipmethod', 'item'),
                subscriptionline: new SchemaSublistField<Select>('subscriptionline', 'item'),
                taxcode: new SchemaSublistField<Select>('taxcode', 'item'),
                taxrate1: new SchemaSublistField<string>('taxrate1', 'item'),
                units: new SchemaSublistField<Select>('units', 'item'),
                vsoeallocation: new SchemaSublistField<string>('vsoeallocation', 'item'),
                vsoeamount: new SchemaSublistField<string>('vsoeamount', 'item'),
                vsoedeferral: new SchemaSublistField<Select>('vsoedeferral', 'item'),
                vsoedelivered: new SchemaSublistField<boolean>('vsoedelivered', 'item'),
                vsoeisestimate: new SchemaSublistField<boolean>('vsoeisestimate', 'item'),
                vsoepermitdiscount: new SchemaSublistField<Select>('vsoepermitdiscount', 'item'),
                vsoeprice: new SchemaSublistField<string>('vsoeprice', 'item'),
                vsoesopgroup: new SchemaSublistField<Select>('vsoesopgroup', 'item')
            }
        },
        itemcost: {
            sublistId: 'itemcost',
            fields: {
                amortizationperiod: new SchemaSublistField<string>(
                    'amortizationperiod',
                    'itemcost'
                ),
                amortizationtype: new SchemaSublistField<string>('amortizationtype', 'itemcost'),
                amount: new SchemaSublistField<string>('amount', 'itemcost'),
                apply: new SchemaSublistField<boolean>('apply', 'itemcost'),
                billeddate: new SchemaSublistField<string>('billeddate', 'itemcost'),
                binnumbers: new SchemaSublistField<string>('binnumbers', 'itemcost'),
                cost: new SchemaSublistField<string>('cost', 'itemcost'),
                doc: new SchemaSublistField<number>('doc', 'itemcost'),
                item: new SchemaSublistField<string>('item', 'itemcost'),
                itemcostcount: new SchemaSublistField<string>('itemcostcount', 'itemcost'),
                job: new SchemaSublistField<string>('job', 'itemcost'),
                line: new SchemaSublistField<number>('line', 'itemcost'),
                location: new SchemaSublistField<Select>('location', 'itemcost'),
                memo: new SchemaSublistField<string>('memo', 'itemcost'),
                options: new SchemaSublistField<string>('options', 'itemcost'),
                rateschedule: new SchemaSublistField<string>('rateschedule', 'itemcost'),
                revrecenddate: new SchemaSublistField<string>('revrecenddate', 'itemcost'),
                revrecschedule: new SchemaSublistField<Select>('revrecschedule', 'itemcost'),
                revrecstartdate: new SchemaSublistField<string>('revrecstartdate', 'itemcost'),
                serialnumbers: new SchemaSublistField<string>('serialnumbers', 'itemcost'),
                taxable: new SchemaSublistField<string>('taxable', 'itemcost'),
                taxcode: new SchemaSublistField<Select>('taxcode', 'itemcost'),
                taxrate1: new SchemaSublistField<string>('taxrate1', 'itemcost'),
                unit: new SchemaSublistField<string>('unit', 'itemcost'),
                url: new SchemaSublistField<string>('url', 'itemcost')
            }
        },
        partners: {
            sublistId: 'partners',
            fields: {
                contribution: new SchemaSublistField<string>('contribution', 'partners'),
                id: new SchemaSublistField<string>('id', 'partners'),
                isprimary: new SchemaSublistField<boolean>('isprimary', 'partners'),
                partner: new SchemaSublistField<Select>('partner', 'partners'),
                partnerrole: new SchemaSublistField<Select>('partnerrole', 'partners'),
                transaction: new SchemaSublistField<string>('transaction', 'partners')
            }
        },
        promotions: {
            sublistId: 'promotions',
            fields: {
                cannotbecombined: new SchemaSublistField<string>('cannotbecombined', 'promotions'),
                couponcode: new SchemaSublistField<Select>('couponcode', 'promotions'),
                discount: new SchemaSublistField<Select>('discount', 'promotions'),
                discountrate: new SchemaSublistField<string>('discountrate', 'promotions'),
                muccpromocodeinstance: new SchemaSublistField<string>(
                    'muccpromocodeinstance',
                    'promotions'
                ),
                promocode: new SchemaSublistField<Select>('promocode', 'promotions'),
                purchasediscount: new SchemaSublistField<string>('purchasediscount', 'promotions'),
                shippingdiscount: new SchemaSublistField<string>('shippingdiscount', 'promotions')
            }
        },
        salesteam: {
            sublistId: 'salesteam',
            fields: {
                contribution: new SchemaSublistField<string>('contribution', 'salesteam'),
                employee: new SchemaSublistField<Select>('employee', 'salesteam'),
                id: new SchemaSublistField<string>('id', 'salesteam'),
                isprimary: new SchemaSublistField<boolean>('isprimary', 'salesteam'),
                issalesrep: new SchemaSublistField<string>('issalesrep', 'salesteam'),
                salesrole: new SchemaSublistField<Select>('salesrole', 'salesteam'),
                transaction: new SchemaSublistField<string>('transaction', 'salesteam')
            }
        },
        shipgroup: {
            sublistId: 'shipgroup',
            fields: {
                destinationaddress: new SchemaSublistField<string>(
                    'destinationaddress',
                    'shipgroup'
                ),
                handlingrate: new SchemaSublistField<string>('handlingrate', 'shipgroup'),
                id: new SchemaSublistField<number>('id', 'shipgroup'),
                shippingcarrier: new SchemaSublistField<string>('shippingcarrier', 'shipgroup'),
                shippingmethod: new SchemaSublistField<string>('shippingmethod', 'shipgroup'),
                shippingrate: new SchemaSublistField<string>('shippingrate', 'shipgroup'),
                sourceaddress: new SchemaSublistField<string>('sourceaddress', 'shipgroup'),
                weight: new SchemaSublistField<number>('weight', 'shipgroup')
            }
        },
        taxdetails: {
            sublistId: 'taxdetails',
            fields: {
                calcdetail: new SchemaSublistField<string>('calcdetail', 'taxdetails'),
                grossamount: new SchemaSublistField<string>('grossamount', 'taxdetails'),
                linename: new SchemaSublistField<string>('linename', 'taxdetails'),
                linetype: new SchemaSublistField<string>('linetype', 'taxdetails'),
                netamount: new SchemaSublistField<string>('netamount', 'taxdetails'),
                taxamount: new SchemaSublistField<string>('taxamount', 'taxdetails'),
                taxbasis: new SchemaSublistField<string>('taxbasis', 'taxdetails'),
                taxcode: new SchemaSublistField<Select>('taxcode', 'taxdetails'),
                taxdetailsreference: new SchemaSublistField<string>(
                    'taxdetailsreference',
                    'taxdetails'
                ),
                taxrate: new SchemaSublistField<string>('taxrate', 'taxdetails'),
                transaction: new SchemaSublistField<Select>('transaction', 'taxdetails')
            }
        },
        time: {
            sublistId: 'time',
            fields: {
                amortizationperiod: new SchemaSublistField<string>('amortizationperiod', 'time'),
                amortizationtype: new SchemaSublistField<string>('amortizationtype', 'time'),
                amount: new SchemaSublistField<string>('amount', 'time'),
                apply: new SchemaSublistField<boolean>('apply', 'time'),
                billeddate: new SchemaSublistField<string>('billeddate', 'time'),
                doc: new SchemaSublistField<string>('doc', 'time'),
                item: new SchemaSublistField<string>('item', 'time'),
                job: new SchemaSublistField<string>('job', 'time'),
                memo: new SchemaSublistField<string>('memo', 'time'),
                rate: new SchemaSublistField<string>('rate', 'time'),
                rateschedule: new SchemaSublistField<string>('rateschedule', 'time'),
                revrecenddate: new SchemaSublistField<string>('revrecenddate', 'time'),
                revrecschedule: new SchemaSublistField<Select>('revrecschedule', 'time'),
                revrecstartdate: new SchemaSublistField<string>('revrecstartdate', 'time'),
                taxable: new SchemaSublistField<string>('taxable', 'time'),
                taxcode: new SchemaSublistField<Select>('taxcode', 'time'),
                taxrate1: new SchemaSublistField<string>('taxrate1', 'time'),
                unit: new SchemaSublistField<string>('unit', 'time'),
                url: new SchemaSublistField<string>('url', 'time')
            }
        }
    };
}