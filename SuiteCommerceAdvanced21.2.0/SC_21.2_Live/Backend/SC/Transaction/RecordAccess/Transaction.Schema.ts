/**

	Â© 2020 NetSuite Inc.
	User may not copy, modify, distribute, or re-bundle or otherwise make available this code;
	provided, however, if you are an authorized user with a NetSuite account or log-in, you
	may use this code subject to the terms that govern your access and use.


 * @NApiVersion 2.x
 * @NModuleScope TargetAccount
 */

import { Schema } from '../../../Common/Schema/Schema';
import { RecordType } from '../../../Common/ActiveRecord/ActiveRecord';
import { SchemaColumn } from '../../../Common/Schema/SchemaColumn';
import { SchemaField } from '../../../Common/Schema/SchemaField';
import { LocationSchema } from './Location.Schema';
import { SchemaJoin } from '../../../Common/Schema/SchemaJoin';
import { ItemSchema } from './Item.Schema';
import { SchemaSublistField } from '../../../Common/Schema/SchemaSublistField';

export class TransactionSchema implements Schema {
    public type: RecordType = 'transaction';

    private static instance: TransactionSchema;

    private constructor() {}

    public static getInstance(): TransactionSchema {
        if (!this.instance) {
            this.instance = new TransactionSchema();
        }
        return this.instance;
    }

    public fields = {
        allowemptycards: new SchemaField<boolean>('allowemptycards'),
        althandlingcost: new SchemaField<string>('althandlingcost'),
        altsalestotal: new SchemaField<string>('altsalestotal'),
        altshippingcost: new SchemaField<string>('altshippingcost'),
        authcode: new SchemaField<string>('authcode'),
        balance: new SchemaField<string>('balance'),
        tax2total: new SchemaField<string>('tax2total'),
        billaddress: new SchemaField<string>('billaddress'),
        billaddresslist: new SchemaField<string>('billaddresslist'),
        billingaddress: new SchemaField<string>('billingaddress'),
        billingschedule: new SchemaField<string>('billingschedule'),
        billisresidential: new SchemaField<string>('billisresidential'),
        canhavestackable: new SchemaField<boolean>('canhavestackable'),
        carrier: new SchemaField<string>('carrier'),
        ccapproved: new SchemaField<boolean>('ccapproved'),
        ccavsstreetmatch: new SchemaField<string>('ccavsstreetmatch'),
        ccavszipmatch: new SchemaField<string>('ccavszipmatch'),
        ccexpiredate: new SchemaField<string>('ccexpiredate'),
        cchold: new SchemaField<string>('cchold'),
        ccholdetails: new SchemaField<string>('ccholdetails'),
        cciavsmatch: new SchemaField<string>('cciavsmatch'),
        ccname: new SchemaField<string>('ccname'),
        ccnumber: new SchemaField<string>('ccnumber'),
        ccprocessoraccount: new SchemaField<string>('ccprocessoraccount'),
        ccsecuritycode: new SchemaField<string>('ccsecuritycode'),
        ccsecuritycodematch: new SchemaField<string>('ccsecuritycodematch'),
        ccstreet: new SchemaField<string>('ccstreet'),
        cczipcode: new SchemaField<string>('cczipcode'),
        checknumber: new SchemaField<string>('checknumber'),
        class: new SchemaField<string>('class'),
        consolidatebalance: new SchemaField<string>('consolidatebalance'),
        couponcode: new SchemaField<string>('couponcode'),
        createddate: new SchemaField<string>('createddate'),
        createdfrom: new SchemaField<string>('createdfrom'),
        creditcard: new SchemaField<string>('creditcard'),
        creditcardprocessor: new SchemaField<string>('creditcardprocessor'),
        currency: new SchemaField<string>('currency'),
        currencyname: new SchemaField<string>('currencyname'),
        currencysymbol: new SchemaField<string>('currencysymbol'),
        customercode: new SchemaField<string>('customercode'),
        customform: new SchemaField<string>('customform'),
        debitcardissueno: new SchemaField<string>('debitcardissueno'),
        deferredrevenue: new SchemaField<string>('deferredrevenue'),
        department: new SchemaField<string>('department'),
        discountitem: new SchemaField<string>('discountitem'),
        discountrate: new SchemaField<string>('discountrate'),
        discounttotal: new SchemaField<string>('discounttotal'),
        draccount: new SchemaField<string>('draccount'),
        dynamicdescriptor: new SchemaField<string>('dynamicdescriptor'),
        email: new SchemaField<string>('email'),
        enddate: new SchemaField<string>('enddate'),
        entity: new SchemaField<string>('entity'),
        entitynexus: new SchemaField<string>('entitynexus'),
        entitytaxregnum: new SchemaField<string>('entitytaxregnum'),
        errorurl: new SchemaField<string>('errorurl'),
        estgrossprofit: new SchemaField<string>('estgrossprofit'),
        estgrossprofitpercent: new SchemaField<string>('estgrossprofitpercent'),
        exchangerate: new SchemaField<string>('exchangerate'),
        excludecommission: new SchemaField<boolean>('excludecommission'),
        externalid: new SchemaField<string>('externalid'),
        fob: new SchemaField<string>('fob'),
        fxaccount: new SchemaField<string>('fxaccount'),
        getauth: new SchemaField<boolean>('getauth'),
        giftcertapplied: new SchemaField<string>('giftcertapplied'),
        handlingcost: new SchemaField<string>('handlingcost'),
        handlingmode: new SchemaField<string>('handlingmode'),
        handlingtax1rate: new SchemaField<string>('handlingtax1rate'),
        handlingtaxcode: new SchemaField<string>('handlingtaxcode'),
        ignoreavs: new SchemaField<boolean>('ignoreavs'),
        ignorecsc: new SchemaField<boolean>('ignorecsc'),
        inputauthcode: new SchemaField<string>('inputauthcode'),
        inputpnrefnum: new SchemaField<string>('inputpnrefnum'),
        inputreferencecode: new SchemaField<string>('inputreferencecode'),
        intercostatus: new SchemaField<string>('intercostatus'),
        intercotransaction: new SchemaField<string>('intercotransaction'),
        isbasecurrency: new SchemaField<boolean>('isbasecurrency'),
        isdefaultshippingrequest: new SchemaField<string>('isdefaultshippingrequest'),
        ismultishipto: new SchemaField<boolean>('ismultishipto'),
        ispurchasecard: new SchemaField<string>('ispurchasecard'),
        isrecurringpayment: new SchemaField<boolean>('isrecurringpayment'),
        istaxable: new SchemaField<boolean>('istaxable'),
        lastmodifieddate: new SchemaField<string>('lastmodifieddate'),
        leadsource: new SchemaField<string>('leadsource'),
        linkedtrackingnumbers: new SchemaField<string>('linkedtrackingnumbers'),
        location: new SchemaField<string>('location'),
        memo: new SchemaField<string>('memo'),
        message: new SchemaField<string>('message'),
        messagesel: new SchemaField<string>('messagesel'),
        muccpromocodeinstance: new SchemaField<string>('muccpromocodeinstance'),
        nextbill: new SchemaField<string>('nextbill'),
        nexus: new SchemaField<string>('nexus'),
        onetime: new SchemaField<string>('onetime'),
        opportunity: new SchemaField<string>('opportunity'),
        orderstatus: new SchemaField<string>('orderstatus'),
        otherrefnum: new SchemaField<string>('otherrefnum'),
        outputauthcode: new SchemaField<string>('outputauthcode'),
        outputreferencecode: new SchemaField<string>('outputreferencecode'),
        overridehold: new SchemaField<boolean>('overridehold'),
        overrideholdchecked: new SchemaField<boolean>('overrideholdchecked'),
        overrideshippingcost: new SchemaField<number>('overrideshippingcost'),
        partner: new SchemaField<string>('partner'),
        paymentcardcsc: new SchemaField<string>('paymentcardcsc'),
        paymenteventdate: new SchemaField<string>('paymenteventdate'),
        paymenteventholdreason: new SchemaField<string>('paymenteventholdreason'),
        paymenteventpurchasedatasent: new SchemaField<string>('paymenteventpurchasedatasent'),
        paymenteventresult: new SchemaField<string>('paymenteventresult'),
        paymenteventtype: new SchemaField<string>('paymenteventtype'),
        paymenteventupdatedby: new SchemaField<string>('paymenteventupdatedby'),
        paymentmethod: new SchemaField<string>('paymentmethod'),
        paymentoperation: new SchemaField<string>('paymentoperation'),
        paymentoption: new SchemaField<string>('paymentoption'),
        paymentprocessingprofile: new SchemaField<string>('paymentprocessingprofile'),
        paymentterms: new SchemaField<string>('paymentterms'),
        paypalauthid: new SchemaField<string>('paypalauthid'),
        paypalprocess: new SchemaField<boolean>('paypalprocess'),
        paypalstatus: new SchemaField<string>('paypalstatus'),
        paypaltranid: new SchemaField<string>('paypaltranid'),
        pnrefnum: new SchemaField<string>('pnrefnum'),
        promocode: new SchemaField<string>('promocode'),
        promocodepluginimpl: new SchemaField<string>('promocodepluginimpl'),
        recognizedrevenue: new SchemaField<string>('recognizedrevenue'),
        recurannually: new SchemaField<string>('recurannually'),
        recurmonthly: new SchemaField<string>('recurmonthly'),
        recurquarterly: new SchemaField<string>('recurquarterly'),
        recurweekly: new SchemaField<string>('recurweekly'),
        returntrackingnumbers: new SchemaField<string>('returntrackingnumbers'),
        returnurl: new SchemaField<string>('returnurl'),
        revcommitstatus: new SchemaField<string>('revcommitstatus'),
        revenuestatus: new SchemaField<string>('revenuestatus'),
        revreconrevcommitment: new SchemaField<boolean>('revreconrevcommitment'),
        saleseffectivedate: new SchemaField<string>('saleseffectivedate'),
        salesgroup: new SchemaField<string>('salesgroup'),
        salesrep: new SchemaField<string>('salesrep'),
        shipaddress: new SchemaField<string>('shipaddress'),
        country: new SchemaField<string>('country'),
        state: new SchemaField<string>('state'),
        city: new SchemaField<string>('city'),
        zip: new SchemaField<string>('zip'),
        addr1: new SchemaField<string>('addr1'),
        addr2: new SchemaField<string>('addr2'),
        attention: new SchemaField<string>('attention'),
        addressee: new SchemaField<string>('addressee'),
        addrphone: new SchemaField<string>('addrphone'),
        shipaddresslist: new SchemaField<string>('shipaddresslist'),
        shipcomplete: new SchemaField<boolean>('shipcomplete'),
        shipdate: new SchemaField<string>('shipdate'),
        shipisresidential: new SchemaField<string>('shipisresidential'),
        shipmethod: new SchemaField<string>('shipmethod'),
        shipoverride: new SchemaField<string>('shipoverride'),
        shipping_rate: new SchemaField<string>('shipping_rate'),
        shippingaddress: new SchemaField<string>('shippingaddress'),
        shippingcost: new SchemaField<string>('shippingcost'),
        shippingcostoverridden: new SchemaField<string>('shippingcostoverridden'),
        shippingtax1rate: new SchemaField<string>('shippingtax1rate'),
        shippingtaxcode: new SchemaField<string>('shippingtaxcode'),
        softdescriptor: new SchemaField<string>('softdescriptor'),
        source: new SchemaField<string>('source'),
        startdate: new SchemaField<string>('startdate'),
        status: new SchemaField<string>('status'),
        statusRef: new SchemaField<string>('statusRef'),
        subsidiary: new SchemaField<string>('subsidiary'),
        subsidiarytaxregnum: new SchemaField<string>('subsidiarytaxregnum'),
        subtotal: new SchemaField<string>('subtotal'),
        syncpartnerteams: new SchemaField<boolean>('syncpartnerteams'),
        syncsalesteams: new SchemaField<boolean>('syncsalesteams'),
        taxdetailsoverride: new SchemaField<boolean>('taxdetailsoverride'),
        taxitem: new SchemaField<string>('taxitem'),
        taxpointdate: new SchemaField<string>('taxpointdate'),
        taxpointdateoverride: new SchemaField<boolean>('taxpointdateoverride'),
        taxrate: new SchemaField<number>('taxrate'),
        taxregoverride: new SchemaField<boolean>('taxregoverride'),
        taxtotal: new SchemaField<string>('taxtotal'),
        terms: new SchemaField<string>('terms'),
        thankyouurl: new SchemaField<string>('thankyouurl'),
        threedstatuscode: new SchemaField<string>('threedstatuscode'),
        tobeemailed: new SchemaField<boolean>('tobeemailed'),
        tobefaxed: new SchemaField<boolean>('tobefaxed'),
        tobeprinted: new SchemaField<boolean>('tobeprinted'),
        total: new SchemaField<string>('total'),
        totalcostestimate: new SchemaField<string>('totalcostestimate'),
        trandate: new SchemaField<string>('trandate'),
        tranid: new SchemaField<string>('tranid'),
        tranisvsoebundle: new SchemaField<boolean>('tranisvsoebundle'),
        unbilledorders: new SchemaField<string>('unbilledorders'),
        validfrom: new SchemaField<string>('validfrom'),
        vsoeautocalc: new SchemaField<boolean>('vsoeautocalc')
    };

    public filters = {
        account: new SchemaColumn<string>('account'),
        accounttype: new SchemaColumn<string>('accounttype'),
        acctcorpcardexp: new SchemaColumn<string>('acctcorpcardexp'),
        actualshipdate: new SchemaColumn<string>('actualshipdate'),
        altsalesamount: new SchemaColumn<string>('altsalesamount'),
        altsalesnetamount: new SchemaColumn<string>('altsalesnetamount'),
        amount: new SchemaColumn<string>('amount'),
        amountpaid: new SchemaColumn<string>('amountpaid'),
        amountremaining: new SchemaColumn<string>('amountremaining'),
        amountunbilled: new SchemaColumn<string>('amountunbilled'),
        anylineitem: new SchemaColumn<string>('anylineitem'),
        appliedtoforeignamount: new SchemaColumn<string>('appliedtoforeignamount'),
        appliedtoisfxvariance: new SchemaColumn<boolean>('appliedtoisfxvariance'),
        appliedtolinkamount: new SchemaColumn<string>('appliedtolinkamount'),
        appliedtolinktype: new SchemaColumn<string>('appliedtolinktype'),
        appliedtotransaction: new SchemaColumn<string>('appliedtotransaction'),
        applyingforeignamount: new SchemaColumn<string>('applyingforeignamount'),
        applyingisfxvariance: new SchemaColumn<boolean>('applyingisfxvariance'),
        applyinglinkamount: new SchemaColumn<string>('applyinglinkamount'),
        applyinglinktype: new SchemaColumn<string>('applyinglinktype'),
        applyingtransaction: new SchemaColumn<string>('applyingtransaction'),
        approvalstatus: new SchemaColumn<string>('approvalstatus'),
        authcode: new SchemaColumn<string>('authcode'),
        autocalculatelag: new SchemaColumn<boolean>('autocalculatelag'),
        avsstreetmatch: new SchemaColumn<string>('avsstreetmatch'),
        avszipmatch: new SchemaColumn<string>('avszipmatch'),
        billable: new SchemaColumn<boolean>('billable'),
        billcounty: new SchemaColumn<string>('billcounty'),
        billeddate: new SchemaColumn<string>('billeddate'),
        billingschedule: new SchemaColumn<string>('billingschedule'),
        billingstatus: new SchemaColumn<boolean>('billingstatus'),
        billingtransaction: new SchemaColumn<string>('billingtransaction'),
        billvariancestatus: new SchemaColumn<string>('billvariancestatus'),
        binnumber: new SchemaColumn<string>('binnumber'),
        binnumberquantity: new SchemaColumn<number>('binnumberquantity'),
        bookspecifictransaction: new SchemaColumn<boolean>('bookspecifictransaction'),
        buildentireassembly: new SchemaColumn<boolean>('buildentireassembly'),
        buildvariance: new SchemaColumn<number>('buildvariance'),
        built: new SchemaColumn<number>('built'),
        canhavestackablepromotions: new SchemaColumn<boolean>('canhavestackablepromotions'),
        catchupperiod: new SchemaColumn<string>('catchupperiod'),
        cccustomercode: new SchemaColumn<string>('cccustomercode'),
        ccexpiredate: new SchemaColumn<string>('ccexpiredate'),
        ccname: new SchemaColumn<string>('ccname'),
        ccnumber: new SchemaColumn<string>('ccnumber'),
        chargetype: new SchemaColumn<string>('chargetype'),
        class: new SchemaColumn<string>('class'),
        cleared: new SchemaColumn<boolean>('cleared'),
        closed: new SchemaColumn<boolean>('closed'),
        closedate: new SchemaColumn<string>('closedate'),
        cogs: new SchemaColumn<boolean>('cogs'),
        commissioneffectivedate: new SchemaColumn<string>('commissioneffectivedate'),
        commit: new SchemaColumn<string>('commit'),
        confirmationnumber: new SchemaColumn<string>('confirmationnumber'),
        contribution: new SchemaColumn<number>('contribution'),
        costcomponentamount: new SchemaColumn<string>('costcomponentamount'),
        costcomponentcategory: new SchemaColumn<string>('costcomponentcategory'),
        costcomponentitem: new SchemaColumn<string>('costcomponentitem'),
        costcomponentquantity: new SchemaColumn<number>('costcomponentquantity'),
        costcomponentstandardcost: new SchemaColumn<number>('costcomponentstandardcost'),
        costestimate: new SchemaColumn<string>('costestimate'),
        costestimaterate: new SchemaColumn<string>('costestimaterate'),
        costestimatetype: new SchemaColumn<string>('costestimatetype'),
        createdby: new SchemaColumn<string>('createdby'),
        createdfrom: new SchemaColumn<string>('createdfrom'),
        creditamount: new SchemaColumn<string>('creditamount'),
        cscmatch: new SchemaColumn<string>('cscmatch'),
        currency: new SchemaColumn<string>('currency'),
        customersubof: new SchemaColumn<string>('customersubof'),
        customform: new SchemaColumn<string>('customform'),
        customgl: new SchemaColumn<boolean>('customgl'),
        custtype: new SchemaColumn<string>('custtype'),
        datecreated: new SchemaColumn<string>('datecreated'),
        daysopen: new SchemaColumn<number>('daysopen'),
        daysoverdue: new SchemaColumn<number>('daysoverdue'),
        debitamount: new SchemaColumn<string>('debitamount'),
        deferredrevenue: new SchemaColumn<string>('deferredrevenue'),
        deferrevrec: new SchemaColumn<boolean>('deferrevrec'),
        department: new SchemaColumn<string>('department'),
        depositdate: new SchemaColumn<string>('depositdate'),
        deposittransaction: new SchemaColumn<string>('deposittransaction'),
        draccount: new SchemaColumn<string>('draccount'),
        duedate: new SchemaColumn<string>('duedate'),
        email: new SchemaColumn<string>('email'),
        employee: new SchemaColumn<string>('employee'),
        enddate: new SchemaColumn<string>('enddate'),
        entity: new SchemaColumn<string>('entity'),
        entitystatus: new SchemaColumn<string>('entitystatus'),
        estgrossprofit: new SchemaColumn<string>('estgrossprofit'),
        estgrossprofitpct: new SchemaColumn<string>('estgrossprofitpct'),
        exchangerate: new SchemaColumn<string>('exchangerate'),
        excludecommission: new SchemaColumn<boolean>('excludecommission'),
        excludefromraterequest: new SchemaColumn<boolean>('excludefromraterequest'),
        expectedclosedate: new SchemaColumn<string>('expectedclosedate'),
        expectedreceiptdate: new SchemaColumn<string>('expectedreceiptdate'),
        expensedate: new SchemaColumn<string>('expensedate'),
        expreports: new SchemaColumn<string>('expreports'),
        externalid: new SchemaColumn<string>('externalid'),
        externalidstring: new SchemaColumn<string>('externalidstring'),
        finchrg: new SchemaColumn<boolean>('finchrg'),
        firmed: new SchemaColumn<boolean>('firmed'),
        forecasttype: new SchemaColumn<string>('forecasttype'),
        formuladate: new SchemaColumn<string>('formuladate'),
        formulanumeric: new SchemaColumn<number>('formulanumeric'),
        formulatext: new SchemaColumn<string>('formulatext'),
        fulfillingtransaction: new SchemaColumn<string>('fulfillingtransaction'),
        fxaccount: new SchemaColumn<string>('fxaccount'),
        fxamount: new SchemaColumn<string>('fxamount'),
        fxcostestimate: new SchemaColumn<string>('fxcostestimate'),
        fxcostestimaterate: new SchemaColumn<string>('fxcostestimaterate'),
        fxestgrossprofit: new SchemaColumn<string>('fxestgrossprofit'),
        fxtrancostestimate: new SchemaColumn<string>('fxtrancostestimate'),
        fxvsoeallocation: new SchemaColumn<string>('fxvsoeallocation'),
        fxvsoeamount: new SchemaColumn<string>('fxvsoeamount'),
        fxvsoeprice: new SchemaColumn<string>('fxvsoeprice'),
        gcoavailabeltocharge: new SchemaColumn<boolean>('gcoavailabeltocharge'),
        gcoavailabletorefund: new SchemaColumn<string>('gcoavailabletorefund'),
        gcoavsstreetmatch: new SchemaColumn<string>('gcoavsstreetmatch'),
        gcoavszipmatch: new SchemaColumn<string>('gcoavszipmatch'),
        gcobuyeraccountage: new SchemaColumn<number>('gcobuyeraccountage'),
        gcobuyerip: new SchemaColumn<string>('gcobuyerip'),
        gcochargeamount: new SchemaColumn<string>('gcochargeamount'),
        gcochargebackamount: new SchemaColumn<string>('gcochargebackamount'),
        gcoconfirmedchargedtotal: new SchemaColumn<string>('gcoconfirmedchargedtotal'),
        gcoconfirmedrefundedtotal: new SchemaColumn<string>('gcoconfirmedrefundedtotal'),
        gcocreditcardnumber: new SchemaColumn<string>('gcocreditcardnumber'),
        gcocscmatch: new SchemaColumn<string>('gcocscmatch'),
        gcofinancialstate: new SchemaColumn<string>('gcofinancialstate'),
        gcofulfillmentstate: new SchemaColumn<string>('gcofulfillmentstate'),
        gcoorderid: new SchemaColumn<string>('gcoorderid'),
        gcoordertotal: new SchemaColumn<string>('gcoordertotal'),
        gcopromotionamount: new SchemaColumn<string>('gcopromotionamount'),
        gcopromotionname: new SchemaColumn<string>('gcopromotionname'),
        gcorefundamount: new SchemaColumn<string>('gcorefundamount'),
        gcoshippingtotal: new SchemaColumn<string>('gcoshippingtotal'),
        gcostatechangeddetail: new SchemaColumn<string>('gcostatechangeddetail'),
        giftcertificate: new SchemaColumn<string>('giftcertificate'),
        grossamount: new SchemaColumn<string>('grossamount'),
        includeinforecast: new SchemaColumn<boolean>('includeinforecast'),
        incoterm: new SchemaColumn<string>('incoterm'),
        intercostatus: new SchemaColumn<string>('intercostatus'),
        intercotransaction: new SchemaColumn<string>('intercotransaction'),
        internalid: new SchemaColumn<string>('internalid'),
        internalidnumber: new SchemaColumn<number>('internalidnumber'),
        inventorylocation: new SchemaColumn<string>('inventorylocation'),
        inventorysubsidiary: new SchemaColumn<string>('inventorysubsidiary'),
        invsoebundle: new SchemaColumn<boolean>('invsoebundle'),
        isallocation: new SchemaColumn<boolean>('isallocation'),
        isbackflush: new SchemaColumn<boolean>('isbackflush'),
        iscustomapproval: new SchemaColumn<boolean>('iscustomapproval'),
        isgcochargeback: new SchemaColumn<boolean>('isgcochargeback'),
        isgcochargeconfirmed: new SchemaColumn<boolean>('isgcochargeconfirmed'),
        isgcopaymentguaranteed: new SchemaColumn<boolean>('isgcopaymentguaranteed'),
        isgcorefundconfirmed: new SchemaColumn<boolean>('isgcorefundconfirmed'),
        isinsidedelivery: new SchemaColumn<boolean>('isinsidedelivery'),
        isinsidepickup: new SchemaColumn<boolean>('isinsidepickup'),
        isintercompanyadjustment: new SchemaColumn<boolean>('isintercompanyadjustment'),
        isintransitpayment: new SchemaColumn<boolean>('isintransitpayment'),
        ispaypalmeth: new SchemaColumn<boolean>('ispaypalmeth'),
        isreversal: new SchemaColumn<boolean>('isreversal'),
        isrevrectransaction: new SchemaColumn<boolean>('isrevrectransaction'),
        isscrap: new SchemaColumn<boolean>('isscrap'),
        isshipaddress: new SchemaColumn<boolean>('isshipaddress'),
        istransferpricecosting: new SchemaColumn<boolean>('istransferpricecosting'),
        isvsoealloc: new SchemaColumn<boolean>('isvsoealloc'),
        iswip: new SchemaColumn<boolean>('iswip'),
        item: new SchemaColumn<string>('item'),
        itemfulfillmentchoice: new SchemaColumn<string>('itemfulfillmentchoice'),
        itemrevision: new SchemaColumn<string>('itemrevision'),
        itemsubof: new SchemaColumn<string>('itemsubof'),
        lastmodifieddate: new SchemaColumn<string>('lastmodifieddate'),
        leadsource: new SchemaColumn<string>('leadsource'),
        line: new SchemaColumn<number>('line'),
        lineuniquekey: new SchemaColumn<number>('lineuniquekey'),
        location: new SchemaColumn<string>('location'),
        mainline: new SchemaColumn<boolean>('mainline'),
        mainname: new SchemaColumn<string>('mainname'),
        matchbilltoreceipt: new SchemaColumn<boolean>('matchbilltoreceipt'),
        memo: new SchemaColumn<string>('memo'),
        memomain: new SchemaColumn<string>('memomain'),
        memorized: new SchemaColumn<boolean>('memorized'),
        merchantaccount: new SchemaColumn<string>('merchantaccount'),
        message: new SchemaColumn<string>('message'),
        multisubsidiary: new SchemaColumn<boolean>('multisubsidiary'),
        netamount: new SchemaColumn<string>('netamount'),
        nextapprover: new SchemaColumn<string>('nextapprover'),
        nextbilldate: new SchemaColumn<string>('nextbilldate'),
        nonreimbursable: new SchemaColumn<boolean>('nonreimbursable'),
        number: new SchemaColumn<number>('number'),
        opportunity: new SchemaColumn<string>('opportunity'),
        otherrefnum: new SchemaColumn<string>('otherrefnum'),
        packagecount: new SchemaColumn<number>('packagecount'),
        paidtransaction: new SchemaColumn<string>('paidtransaction'),
        partner: new SchemaColumn<string>('partner'),
        partnercontribution: new SchemaColumn<number>('partnercontribution'),
        partnerrole: new SchemaColumn<string>('partnerrole'),
        partnerteammember: new SchemaColumn<string>('partnerteammember'),
        payingtransaction: new SchemaColumn<string>('payingtransaction'),
        paymenteventdate: new SchemaColumn<string>('paymenteventdate'),
        paymenteventholdreason: new SchemaColumn<string>('paymenteventholdreason'),
        paymenteventpurchasecardused: new SchemaColumn<boolean>('paymenteventpurchasecardused'),
        paymenteventpurchasedatasent: new SchemaColumn<boolean>('paymenteventpurchasedatasent'),
        paymenteventresult: new SchemaColumn<string>('paymenteventresult'),
        paymenteventtype: new SchemaColumn<string>('paymenteventtype'),
        paymenthold: new SchemaColumn<boolean>('paymenthold'),
        paymentmethod: new SchemaColumn<string>('paymentmethod'),
        paymentoption: new SchemaColumn<string>('paymentoption'),
        paypalpending: new SchemaColumn<boolean>('paypalpending'),
        paypalstatus: new SchemaColumn<string>('paypalstatus'),
        paypaltranid: new SchemaColumn<string>('paypaltranid'),
        pnrefnum: new SchemaColumn<string>('pnrefnum'),
        poastext: new SchemaColumn<string>('poastext'),
        posting: new SchemaColumn<boolean>('posting'),
        postingperiod: new SchemaColumn<string>('postingperiod'),
        pricelevel: new SchemaColumn<string>('pricelevel'),
        printedpickingticket: new SchemaColumn<boolean>('printedpickingticket'),
        probability: new SchemaColumn<number>('probability'),
        projectedamount: new SchemaColumn<string>('projectedamount'),
        projecttask: new SchemaColumn<string>('projecttask'),
        promocode: new SchemaColumn<string>('promocode'),
        purchaseorder: new SchemaColumn<string>('purchaseorder'),
        quantity: new SchemaColumn<number>('quantity'),
        quantitybilled: new SchemaColumn<number>('quantitybilled'),
        quantitycommitted: new SchemaColumn<number>('quantitycommitted'),
        quantitypacked: new SchemaColumn<number>('quantitypacked'),
        quantitypicked: new SchemaColumn<number>('quantitypicked'),
        quantityrevcommitted: new SchemaColumn<number>('quantityrevcommitted'),
        quantityshiprecv: new SchemaColumn<number>('quantityshiprecv'),
        recognizedrevenue: new SchemaColumn<string>('recognizedrevenue'),
        recordtype: new SchemaColumn<string>('recordtype'),
        revcommitstatus: new SchemaColumn<string>('revcommitstatus'),
        revcommittingstatus: new SchemaColumn<boolean>('revcommittingstatus'),
        revcommittingtransaction: new SchemaColumn<string>('revcommittingtransaction'),
        revenuestatus: new SchemaColumn<string>('revenuestatus'),
        reversaldate: new SchemaColumn<string>('reversaldate'),
        reversalnumber: new SchemaColumn<string>('reversalnumber'),
        revrecenddate: new SchemaColumn<string>('revrecenddate'),
        revreconrevcommitment: new SchemaColumn<boolean>('revreconrevcommitment'),
        revrecstartdate: new SchemaColumn<string>('revrecstartdate'),
        revrecterminmonths: new SchemaColumn<number>('revrecterminmonths'),
        saleseffectivedate: new SchemaColumn<string>('saleseffectivedate'),
        salesorder: new SchemaColumn<string>('salesorder'),
        salesrep: new SchemaColumn<string>('salesrep'),
        salesteammember: new SchemaColumn<string>('salesteammember'),
        salesteamrole: new SchemaColumn<string>('salesteamrole'),
        schedulingmethod: new SchemaColumn<string>('schedulingmethod'),
        serialnumber: new SchemaColumn<string>('serialnumber'),
        serialnumbercost: new SchemaColumn<string>('serialnumbercost'),
        serialnumbercostadjustment: new SchemaColumn<string>('serialnumbercostadjustment'),
        serialnumberquantity: new SchemaColumn<number>('serialnumberquantity'),
        shipcarrier: new SchemaColumn<string>('shipcarrier'),
        shipcomplete: new SchemaColumn<boolean>('shipcomplete'),
        shipcounty: new SchemaColumn<string>('shipcounty'),
        shipdate: new SchemaColumn<string>('shipdate'),
        shipgroup: new SchemaColumn<number>('shipgroup'),
        shipmethod: new SchemaColumn<string>('shipmethod'),
        shipping: new SchemaColumn<boolean>('shipping'),
        shiprecvstatus: new SchemaColumn<boolean>('shiprecvstatus'),
        shiprecvstatusline: new SchemaColumn<boolean>('shiprecvstatusline'),
        shipto: new SchemaColumn<string>('shipto'),
        source: new SchemaColumn<string>('source'),
        startdate: new SchemaColumn<string>('startdate'),
        status: new SchemaColumn<string>('status'),
        subsidiary: new SchemaColumn<string>('subsidiary'),
        taxitem: new SchemaColumn<string>('taxitem'),
        taxline: new SchemaColumn<boolean>('taxline'),
        taxperiod: new SchemaColumn<string>('taxperiod'),
        taxpointdate: new SchemaColumn<string>('taxpointdate'),
        taxrate: new SchemaColumn<string>('taxrate'),
        terms: new SchemaColumn<string>('terms'),
        termsofsale: new SchemaColumn<string>('termsofsale'),
        title: new SchemaColumn<string>('title'),
        tobeemailed: new SchemaColumn<boolean>('tobeemailed'),
        tobeprinted: new SchemaColumn<boolean>('tobeprinted'),
        tosubsidiary: new SchemaColumn<string>('tosubsidiary'),
        totalamount: new SchemaColumn<string>('totalamount'),
        trackingnumbers: new SchemaColumn<string>('trackingnumbers'),
        trancostestimate: new SchemaColumn<string>('trancostestimate'),
        trandate: new SchemaColumn<string>('trandate'),
        tranestgrossprofit: new SchemaColumn<string>('tranestgrossprofit'),
        tranestgrossprofitpct: new SchemaColumn<string>('tranestgrossprofitpct'),
        tranfxestgrossprofit: new SchemaColumn<string>('tranfxestgrossprofit'),
        tranid: new SchemaColumn<string>('tranid'),
        tranisvsoebundle: new SchemaColumn<boolean>('tranisvsoebundle'),
        transactiondiscount: new SchemaColumn<boolean>('transactiondiscount'),
        transactionlinetype: new SchemaColumn<string>('transactionlinetype'),
        transactionnumber: new SchemaColumn<string>('transactionnumber'),
        transferlocation: new SchemaColumn<string>('transferlocation'),
        transferorderquantitycommitted: new SchemaColumn<number>('transferorderquantitycommitted'),
        transferorderquantitypacked: new SchemaColumn<number>('transferorderquantitypacked'),
        transferorderquantitypicked: new SchemaColumn<number>('transferorderquantitypicked'),
        transferorderquantityreceived: new SchemaColumn<number>('transferorderquantityreceived'),
        transferorderquantityshipped: new SchemaColumn<number>('transferorderquantityshipped'),
        type: new SchemaColumn<string>('type'),
        unit: new SchemaColumn<string>('unit'),
        unitcostoverride: new SchemaColumn<string>('unitcostoverride'),
        vendtype: new SchemaColumn<string>('vendtype'),
        visibletocustomer: new SchemaColumn<boolean>('visibletocustomer'),
        voided: new SchemaColumn<boolean>('voided'),
        vsoeallocation: new SchemaColumn<string>('vsoeallocation'),
        vsoeamount: new SchemaColumn<string>('vsoeamount'),
        vsoedeferral: new SchemaColumn<string>('vsoedeferral'),
        vsoedelivered: new SchemaColumn<boolean>('vsoedelivered'),
        vsoepermitdiscount: new SchemaColumn<string>('vsoepermitdiscount'),
        vsoeprice: new SchemaColumn<string>('vsoeprice'),
        website: new SchemaColumn<string>('website')
    };

    public columns = {
        account: new SchemaColumn<string>('account'),
        accounttype: new SchemaColumn<string>('accounttype'),
        acctcorpcardexp: new SchemaColumn<string>('acctcorpcardexp'),
        actualshipdate: new SchemaColumn<string>('actualshipdate'),
        altsalesamount: new SchemaColumn<string>('altsalesamount'),
        altsalesnetamount: new SchemaColumn<string>('altsalesnetamount'),
        amount: new SchemaColumn<string>('amount'),
        amountpaid: new SchemaColumn<string>('amountpaid'),
        amountremaining: new SchemaColumn<string>('amountremaining'),
        amountunbilled: new SchemaColumn<string>('amountunbilled'),
        anylineitem: new SchemaColumn<string>('anylineitem'),
        appliedtoforeignamount: new SchemaColumn<string>('appliedtoforeignamount'),
        appliedtoisfxvariance: new SchemaColumn<boolean>('appliedtoisfxvariance'),
        appliedtolinkamount: new SchemaColumn<string>('appliedtolinkamount'),
        appliedtolinktype: new SchemaColumn<string>('appliedtolinktype'),
        appliedtotransaction: new SchemaColumn<string>('appliedtotransaction'),
        applyingforeignamount: new SchemaColumn<string>('applyingforeignamount'),
        applyingisfxvariance: new SchemaColumn<boolean>('applyingisfxvariance'),
        applyinglinkamount: new SchemaColumn<string>('applyinglinkamount'),
        applyinglinktype: new SchemaColumn<string>('applyinglinktype'),
        applyingtransaction: new SchemaColumn<string>('applyingtransaction'),
        approvalstatus: new SchemaColumn<string>('approvalstatus'),
        authcode: new SchemaColumn<string>('authcode'),
        autocalculatelag: new SchemaColumn<boolean>('autocalculatelag'),
        avsstreetmatch: new SchemaColumn<string>('avsstreetmatch'),
        avszipmatch: new SchemaColumn<string>('avszipmatch'),
        billable: new SchemaColumn<boolean>('billable'),
        billcounty: new SchemaColumn<string>('billcounty'),
        billeddate: new SchemaColumn<string>('billeddate'),
        billingschedule: new SchemaColumn<string>('billingschedule'),
        billingstatus: new SchemaColumn<boolean>('billingstatus'),
        billingtransaction: new SchemaColumn<string>('billingtransaction'),
        billvariancestatus: new SchemaColumn<string>('billvariancestatus'),
        binnumber: new SchemaColumn<string>('binnumber'),
        binnumberquantity: new SchemaColumn<number>('binnumberquantity'),
        bookspecifictransaction: new SchemaColumn<boolean>('bookspecifictransaction'),
        buildentireassembly: new SchemaColumn<boolean>('buildentireassembly'),
        buildvariance: new SchemaColumn<number>('buildvariance'),
        built: new SchemaColumn<number>('built'),
        canhavestackablepromotions: new SchemaColumn<boolean>('canhavestackablepromotions'),
        catchupperiod: new SchemaColumn<string>('catchupperiod'),
        cccustomercode: new SchemaColumn<string>('cccustomercode'),
        ccexpiredate: new SchemaColumn<string>('ccexpiredate'),
        ccexpdate: new SchemaColumn<string>('ccexpdate'),
        ccholdername: new SchemaColumn<string>('ccholdername'),
        ccname: new SchemaColumn<string>('ccname'),
        ccnumber: new SchemaColumn<string>('ccnumber'),
        chargetype: new SchemaColumn<string>('chargetype'),
        class: new SchemaColumn<string>('class'),
        cleared: new SchemaColumn<boolean>('cleared'),
        closed: new SchemaColumn<boolean>('closed'),
        closedate: new SchemaColumn<string>('closedate'),
        cogs: new SchemaColumn<boolean>('cogs'),
        commissioneffectivedate: new SchemaColumn<string>('commissioneffectivedate'),
        commit: new SchemaColumn<string>('commit'),
        confirmationnumber: new SchemaColumn<string>('confirmationnumber'),
        contribution: new SchemaColumn<number>('contribution'),
        costcomponentamount: new SchemaColumn<string>('costcomponentamount'),
        costcomponentcategory: new SchemaColumn<string>('costcomponentcategory'),
        costcomponentitem: new SchemaColumn<string>('costcomponentitem'),
        costcomponentquantity: new SchemaColumn<number>('costcomponentquantity'),
        costcomponentstandardcost: new SchemaColumn<number>('costcomponentstandardcost'),
        costestimate: new SchemaColumn<string>('costestimate'),
        costestimaterate: new SchemaColumn<string>('costestimaterate'),
        costestimatetype: new SchemaColumn<string>('costestimatetype'),
        createdby: new SchemaColumn<string>('createdby'),
        createdfrom: new SchemaColumn<string>('createdfrom'),
        creditamount: new SchemaColumn<string>('creditamount'),
        cscmatch: new SchemaColumn<string>('cscmatch'),
        currency: new SchemaColumn<string>('currency'),
        customersubof: new SchemaColumn<string>('customersubof'),
        customform: new SchemaColumn<string>('customform'),
        customgl: new SchemaColumn<boolean>('customgl'),
        custtype: new SchemaColumn<string>('custtype'),
        datecreated: new SchemaColumn<string>('datecreated'),
        daysopen: new SchemaColumn<number>('daysopen'),
        daysoverdue: new SchemaColumn<number>('daysoverdue'),
        debitamount: new SchemaColumn<string>('debitamount'),
        deferredrevenue: new SchemaColumn<string>('deferredrevenue'),
        deferrevrec: new SchemaColumn<boolean>('deferrevrec'),
        department: new SchemaColumn<string>('department'),
        depositdate: new SchemaColumn<string>('depositdate'),
        deposittransaction: new SchemaColumn<string>('deposittransaction'),
        draccount: new SchemaColumn<string>('draccount'),
        duedate: new SchemaColumn<string>('duedate'),
        email: new SchemaColumn<string>('email'),
        employee: new SchemaColumn<string>('employee'),
        enddate: new SchemaColumn<string>('enddate'),
        entity: new SchemaColumn<string>('entity'),
        entitystatus: new SchemaColumn<string>('entitystatus'),
        estgrossprofit: new SchemaColumn<string>('estgrossprofit'),
        estgrossprofitpct: new SchemaColumn<string>('estgrossprofitpct'),
        exchangerate: new SchemaColumn<string>('exchangerate'),
        excludecommission: new SchemaColumn<boolean>('excludecommission'),
        excludefromraterequest: new SchemaColumn<boolean>('excludefromraterequest'),
        expectedclosedate: new SchemaColumn<string>('expectedclosedate'),
        expectedreceiptdate: new SchemaColumn<string>('expectedreceiptdate'),
        expensedate: new SchemaColumn<string>('expensedate'),
        expreports: new SchemaColumn<string>('expreports'),
        externalid: new SchemaColumn<string>('externalid'),
        externalidstring: new SchemaColumn<string>('externalidstring'),
        finchrg: new SchemaColumn<boolean>('finchrg'),
        firmed: new SchemaColumn<boolean>('firmed'),
        forecasttype: new SchemaColumn<string>('forecasttype'),
        formuladate: new SchemaColumn<string>('formuladate'),
        formulanumeric: new SchemaColumn<number>('formulanumeric'),
        formulatext: new SchemaColumn<string>('formulatext'),
        fulfillingtransaction: new SchemaColumn<string>('fulfillingtransaction'),
        fxaccount: new SchemaColumn<string>('fxaccount'),
        fxamount: new SchemaColumn<string>('fxamount'),
        fxcostestimate: new SchemaColumn<string>('fxcostestimate'),
        fxcostestimaterate: new SchemaColumn<string>('fxcostestimaterate'),
        fxestgrossprofit: new SchemaColumn<string>('fxestgrossprofit'),
        fxtrancostestimate: new SchemaColumn<string>('fxtrancostestimate'),
        fxvsoeallocation: new SchemaColumn<string>('fxvsoeallocation'),
        fxvsoeamount: new SchemaColumn<string>('fxvsoeamount'),
        fxvsoeprice: new SchemaColumn<string>('fxvsoeprice'),
        gcoavailabeltocharge: new SchemaColumn<boolean>('gcoavailabeltocharge'),
        gcoavailabletorefund: new SchemaColumn<string>('gcoavailabletorefund'),
        gcoavsstreetmatch: new SchemaColumn<string>('gcoavsstreetmatch'),
        gcoavszipmatch: new SchemaColumn<string>('gcoavszipmatch'),
        gcobuyeraccountage: new SchemaColumn<number>('gcobuyeraccountage'),
        gcobuyerip: new SchemaColumn<string>('gcobuyerip'),
        gcochargeamount: new SchemaColumn<string>('gcochargeamount'),
        gcochargebackamount: new SchemaColumn<string>('gcochargebackamount'),
        gcoconfirmedchargedtotal: new SchemaColumn<string>('gcoconfirmedchargedtotal'),
        gcoconfirmedrefundedtotal: new SchemaColumn<string>('gcoconfirmedrefundedtotal'),
        gcocreditcardnumber: new SchemaColumn<string>('gcocreditcardnumber'),
        gcocscmatch: new SchemaColumn<string>('gcocscmatch'),
        gcofinancialstate: new SchemaColumn<string>('gcofinancialstate'),
        gcofulfillmentstate: new SchemaColumn<string>('gcofulfillmentstate'),
        gcoorderid: new SchemaColumn<string>('gcoorderid'),
        gcoordertotal: new SchemaColumn<string>('gcoordertotal'),
        gcopromotionamount: new SchemaColumn<string>('gcopromotionamount'),
        gcopromotionname: new SchemaColumn<string>('gcopromotionname'),
        gcorefundamount: new SchemaColumn<string>('gcorefundamount'),
        gcoshippingtotal: new SchemaColumn<string>('gcoshippingtotal'),
        gcostatechangeddetail: new SchemaColumn<string>('gcostatechangeddetail'),
        giftcertificate: new SchemaColumn<string>('giftcertificate'),
        grossamount: new SchemaColumn<string>('grossamount'),
        includeinforecast: new SchemaColumn<boolean>('includeinforecast'),
        incoterm: new SchemaColumn<string>('incoterm'),
        intercostatus: new SchemaColumn<string>('intercostatus'),
        intercotransaction: new SchemaColumn<string>('intercotransaction'),
        internalid: new SchemaColumn<string>('internalid'),
        internalidnumber: new SchemaColumn<number>('internalidnumber'),
        inventorylocation: new SchemaColumn<string>('inventorylocation'),
        inventorysubsidiary: new SchemaColumn<string>('inventorysubsidiary'),
        invsoebundle: new SchemaColumn<boolean>('invsoebundle'),
        isallocation: new SchemaColumn<boolean>('isallocation'),
        isbackflush: new SchemaColumn<boolean>('isbackflush'),
        iscustomapproval: new SchemaColumn<boolean>('iscustomapproval'),
        isgcochargeback: new SchemaColumn<boolean>('isgcochargeback'),
        isgcochargeconfirmed: new SchemaColumn<boolean>('isgcochargeconfirmed'),
        isgcopaymentguaranteed: new SchemaColumn<boolean>('isgcopaymentguaranteed'),
        isgcorefundconfirmed: new SchemaColumn<boolean>('isgcorefundconfirmed'),
        isinsidedelivery: new SchemaColumn<boolean>('isinsidedelivery'),
        isinsidepickup: new SchemaColumn<boolean>('isinsidepickup'),
        isintercompanyadjustment: new SchemaColumn<boolean>('isintercompanyadjustment'),
        isintransitpayment: new SchemaColumn<boolean>('isintransitpayment'),
        ispaypalmeth: new SchemaColumn<boolean>('ispaypalmeth'),
        isreversal: new SchemaColumn<boolean>('isreversal'),
        isrevrectransaction: new SchemaColumn<boolean>('isrevrectransaction'),
        isscrap: new SchemaColumn<boolean>('isscrap'),
        isshipaddress: new SchemaColumn<boolean>('isshipaddress'),
        istransferpricecosting: new SchemaColumn<boolean>('istransferpricecosting'),
        isvsoealloc: new SchemaColumn<boolean>('isvsoealloc'),
        iswip: new SchemaColumn<boolean>('iswip'),
        item: new SchemaColumn<string>('item'),
        itemfulfillmentchoice: new SchemaColumn<string>('itemfulfillmentchoice'),
        itemrevision: new SchemaColumn<string>('itemrevision'),
        itemsubof: new SchemaColumn<string>('itemsubof'),
        lastmodifieddate: new SchemaColumn<string>('lastmodifieddate'),
        leadsource: new SchemaColumn<string>('leadsource'),
        line: new SchemaColumn<number>('line'),
        lineuniquekey: new SchemaColumn<number>('lineuniquekey'),
        location: new SchemaColumn<string>('location'),
        mainline: new SchemaColumn<boolean>('mainline'),
        mainname: new SchemaColumn<string>('mainname'),
        matchbilltoreceipt: new SchemaColumn<boolean>('matchbilltoreceipt'),
        memo: new SchemaColumn<string>('memo'),
        memomain: new SchemaColumn<string>('memomain'),
        memorized: new SchemaColumn<boolean>('memorized'),
        merchantaccount: new SchemaColumn<string>('merchantaccount'),
        message: new SchemaColumn<string>('message'),
        multisubsidiary: new SchemaColumn<boolean>('multisubsidiary'),
        netamount: new SchemaColumn<string>('netamount'),
        nextapprover: new SchemaColumn<string>('nextapprover'),
        nextbilldate: new SchemaColumn<string>('nextbilldate'),
        nonreimbursable: new SchemaColumn<boolean>('nonreimbursable'),
        number: new SchemaColumn<number>('number'),
        opportunity: new SchemaColumn<string>('opportunity'),
        otherrefnum: new SchemaColumn<string>('otherrefnum'),
        packagecount: new SchemaColumn<number>('packagecount'),
        paidtransaction: new SchemaColumn<string>('paidtransaction'),
        partner: new SchemaColumn<string>('partner'),
        partnercontribution: new SchemaColumn<number>('partnercontribution'),
        partnerrole: new SchemaColumn<string>('partnerrole'),
        partnerteammember: new SchemaColumn<string>('partnerteammember'),
        payingtransaction: new SchemaColumn<string>('payingtransaction'),
        paymenteventdate: new SchemaColumn<string>('paymenteventdate'),
        paymenteventholdreason: new SchemaColumn<string>('paymenteventholdreason'),
        paymenteventpurchasecardused: new SchemaColumn<boolean>('paymenteventpurchasecardused'),
        paymenteventpurchasedatasent: new SchemaColumn<boolean>('paymenteventpurchasedatasent'),
        paymenteventresult: new SchemaColumn<string>('paymenteventresult'),
        paymenteventtype: new SchemaColumn<string>('paymenteventtype'),
        paymenthold: new SchemaColumn<boolean>('paymenthold'),
        paymentmethod: new SchemaColumn<string>('paymentmethod'),
        paymentoption: new SchemaColumn<string>('paymentoption'),
        paypalpending: new SchemaColumn<boolean>('paypalpending'),
        paypalstatus: new SchemaColumn<string>('paypalstatus'),
        paypaltranid: new SchemaColumn<string>('paypaltranid'),
        pnrefnum: new SchemaColumn<string>('pnrefnum'),
        poastext: new SchemaColumn<string>('poastext'),
        posting: new SchemaColumn<boolean>('posting'),
        postingperiod: new SchemaColumn<string>('postingperiod'),
        pricelevel: new SchemaColumn<string>('pricelevel'),
        printedpickingticket: new SchemaColumn<boolean>('printedpickingticket'),
        probability: new SchemaColumn<number>('probability'),
        projectedamount: new SchemaColumn<string>('projectedamount'),
        projecttask: new SchemaColumn<string>('projecttask'),
        promocode: new SchemaColumn<string>('promocode'),
        purchaseorder: new SchemaColumn<string>('purchaseorder'),
        quantity: new SchemaColumn<number>('quantity'),
        quantitybilled: new SchemaColumn<number>('quantitybilled'),
        quantitycommitted: new SchemaColumn<number>('quantitycommitted'),
        quantitypacked: new SchemaColumn<number>('quantitypacked'),
        quantitypicked: new SchemaColumn<number>('quantitypicked'),
        quantityrevcommitted: new SchemaColumn<number>('quantityrevcommitted'),
        quantityshiprecv: new SchemaColumn<number>('quantityshiprecv'),
        recognizedrevenue: new SchemaColumn<string>('recognizedrevenue'),
        recordtype: new SchemaColumn<string>('recordtype'),
        revcommitstatus: new SchemaColumn<string>('revcommitstatus'),
        revcommittingstatus: new SchemaColumn<boolean>('revcommittingstatus'),
        revcommittingtransaction: new SchemaColumn<string>('revcommittingtransaction'),
        revenuestatus: new SchemaColumn<string>('revenuestatus'),
        reversaldate: new SchemaColumn<string>('reversaldate'),
        reversalnumber: new SchemaColumn<string>('reversalnumber'),
        revrecenddate: new SchemaColumn<string>('revrecenddate'),
        revreconrevcommitment: new SchemaColumn<boolean>('revreconrevcommitment'),
        revrecstartdate: new SchemaColumn<string>('revrecstartdate'),
        revrecterminmonths: new SchemaColumn<number>('revrecterminmonths'),
        saleseffectivedate: new SchemaColumn<string>('saleseffectivedate'),
        salesorder: new SchemaColumn<string>('salesorder'),
        salesrep: new SchemaColumn<string>('salesrep'),
        salesteammember: new SchemaColumn<string>('salesteammember'),
        salesteamrole: new SchemaColumn<string>('salesteamrole'),
        schedulingmethod: new SchemaColumn<string>('schedulingmethod'),
        serialnumber: new SchemaColumn<string>('serialnumber'),
        serialnumbercost: new SchemaColumn<string>('serialnumbercost'),
        serialnumbercostadjustment: new SchemaColumn<string>('serialnumbercostadjustment'),
        serialnumberquantity: new SchemaColumn<number>('serialnumberquantity'),
        shipcarrier: new SchemaColumn<string>('shipcarrier'),
        shipcomplete: new SchemaColumn<boolean>('shipcomplete'),
        shipcounty: new SchemaColumn<string>('shipcounty'),
        shipdate: new SchemaColumn<string>('shipdate'),
        shipgroup: new SchemaColumn<number>('shipgroup'),
        shipmethod: new SchemaColumn<string>('shipmethod'),
        shipping: new SchemaColumn<boolean>('shipping'),
        shiprecvstatus: new SchemaColumn<boolean>('shiprecvstatus'),
        shiprecvstatusline: new SchemaColumn<boolean>('shiprecvstatusline'),
        shipto: new SchemaColumn<string>('shipto'),
        source: new SchemaColumn<string>('source'),
        startdate: new SchemaColumn<string>('startdate'),
        status: new SchemaColumn<string>('status'),
        subsidiary: new SchemaColumn<string>('subsidiary'),
        taxitem: new SchemaColumn<string>('taxitem'),
        taxline: new SchemaColumn<boolean>('taxline'),
        taxperiod: new SchemaColumn<string>('taxperiod'),
        taxpointdate: new SchemaColumn<string>('taxpointdate'),
        taxrate: new SchemaColumn<string>('taxrate'),
        terms: new SchemaColumn<string>('terms'),
        termsofsale: new SchemaColumn<string>('termsofsale'),
        title: new SchemaColumn<string>('title'),
        tobeemailed: new SchemaColumn<boolean>('tobeemailed'),
        tobeprinted: new SchemaColumn<boolean>('tobeprinted'),
        tosubsidiary: new SchemaColumn<string>('tosubsidiary'),
        total: new SchemaColumn<string>('total'),
        totalamount: new SchemaColumn<string>('totalamount'),
        trackingnumbers: new SchemaColumn<string>('trackingnumbers'),
        trancostestimate: new SchemaColumn<string>('trancostestimate'),
        trandate: new SchemaColumn<string>('trandate'),
        tranestgrossprofit: new SchemaColumn<string>('tranestgrossprofit'),
        tranestgrossprofitpct: new SchemaColumn<string>('tranestgrossprofitpct'),
        tranfxestgrossprofit: new SchemaColumn<string>('tranfxestgrossprofit'),
        tranid: new SchemaColumn<string>('tranid'),
        tranisvsoebundle: new SchemaColumn<boolean>('tranisvsoebundle'),
        transactiondiscount: new SchemaColumn<boolean>('transactiondiscount'),
        transactionlinetype: new SchemaColumn<string>('transactionlinetype'),
        transactionnumber: new SchemaColumn<string>('transactionnumber'),
        transferlocation: new SchemaColumn<string>('transferlocation'),
        transferorderquantitycommitted: new SchemaColumn<number>('transferorderquantitycommitted'),
        transferorderquantitypacked: new SchemaColumn<number>('transferorderquantitypacked'),
        transferorderquantitypicked: new SchemaColumn<number>('transferorderquantitypicked'),
        transferorderquantityreceived: new SchemaColumn<number>('transferorderquantityreceived'),
        transferorderquantityshipped: new SchemaColumn<number>('transferorderquantityshipped'),
        type: new SchemaColumn<string>('type'),
        unit: new SchemaColumn<string>('unit'),
        unitcostoverride: new SchemaColumn<string>('unitcostoverride'),
        vendtype: new SchemaColumn<string>('vendtype'),
        visibletocustomer: new SchemaColumn<boolean>('visibletocustomer'),
        voided: new SchemaColumn<boolean>('voided'),
        vsoeallocation: new SchemaColumn<string>('vsoeallocation'),
        vsoeamount: new SchemaColumn<string>('vsoeamount'),
        vsoedeferral: new SchemaColumn<string>('vsoedeferral'),
        vsoedelivered: new SchemaColumn<boolean>('vsoedelivered'),
        vsoepermitdiscount: new SchemaColumn<string>('vsoepermitdiscount'),
        vsoeprice: new SchemaColumn<string>('vsoeprice'),
        website: new SchemaColumn<string>('website')
    };

    public sublists = {
        accountingbookdetail: {
            sublistId: 'accountingbookdetail',
            fields: {
                accountingbook: new SchemaSublistField<string>(
                    'accountingbook',
                    'accountingbookdetail'
                ),
                exchangerate: new SchemaSublistField<string>(
                    'exchangerate',
                    'accountingbookdetail'
                ),
                revreconrevcommitment: new SchemaSublistField<boolean>(
                    'revreconrevcommitment',
                    'accountingbookdetail'
                ),
                tranisvsoebundle: new SchemaSublistField<boolean>(
                    'tranisvsoebundle',
                    'accountingbookdetail'
                )
            }
        },
        iladdrbook: {
            sublistId: 'iladdrbook',
            fields: {
                sublistname: new SchemaSublistField<string>('iladdrbook', 'iladdrbook'),
                internalid: new SchemaSublistField<string>('iladdrinternalid', 'iladdrbook'),
                shipaddr: new SchemaSublistField<string>('iladdrshipaddr', 'iladdrbook'),
                shipcountry: new SchemaSublistField<string>('iladdrshipcountry', 'iladdrbook'),
                shipstate: new SchemaSublistField<string>('iladdrshipstate', 'iladdrbook'),
                shipcity: new SchemaSublistField<string>('iladdrshipcity', 'iladdrbook'),
                shipzip: new SchemaSublistField<string>('iladdrshipzip', 'iladdrbook'),
                shipaddr1: new SchemaSublistField<string>('iladdrshipaddr1', 'iladdrbook'),
                shipaddr2: new SchemaSublistField<string>('iladdrshipaddr2', 'iladdrbook'),
                shipattention: new SchemaSublistField<string>('iladdrshipattention', 'iladdrbook'),
                shipaddressee: new SchemaSublistField<string>('iladdrshipaddressee', 'iladdrbook'),
                shipphone: new SchemaSublistField<string>('iladdrshipphone', 'iladdrbook')
            }
        },
        item: {
            sublistId: 'item',
            fields: {
                altsalesamt: new SchemaSublistField<string>('altsalesamt', 'item'),
                discline: new SchemaSublistField<string>('discline', 'item'),
                fulfillable: new SchemaSublistField<string>('fulfillable', 'item'),
                freegiftpromotion: new SchemaSublistField<string>('freegiftpromotion', 'item'),
                location: new SchemaSublistField<string>('location', 'item'),
                itemdisplay: new SchemaSublistField<string>('item_display', 'item'),
                taxcodedisplay: new SchemaSublistField<string>('taxcode_display', 'item'),
                tax1amt: new SchemaSublistField<string>('tax1amt', 'item'),
                amortizationperiod: new SchemaSublistField<string>('amortizationperiod', 'item'),
                amortizationtype: new SchemaSublistField<string>('amortizationtype', 'item'),
                amount: new SchemaSublistField<string>('amount', 'item'),
                billvariancestatus: new SchemaSublistField<string>('billvariancestatus', 'item'),
                catchupperiod: new SchemaSublistField<string>('catchupperiod', 'item'),
                chargerule: new SchemaSublistField<string>('chargerule', 'item'),
                chargetype: new SchemaSublistField<string>('chargetype', 'item'),
                commitinventory: new SchemaSublistField<string>('commitinventory', 'item'),
                costestimate: new SchemaSublistField<string>('costestimate', 'item'),
                costestimaterate: new SchemaSublistField<string>('costestimaterate', 'item'),
                costestimatetype: new SchemaSublistField<string>('costestimatetype', 'item'),
                createdpo: new SchemaSublistField<string>('createdpo', 'item'),
                createpo: new SchemaSublistField<string>('createpo', 'item'),
                createwo: new SchemaSublistField<boolean>('createwo', 'item'),
                daysbeforeexpiration: new SchemaSublistField<string>(
                    'daysbeforeexpiration',
                    'item'
                ),
                deferrevrec: new SchemaSublistField<boolean>('deferrevrec', 'item'),
                description: new SchemaSublistField<string>('description', 'item'),
                excludefromraterequest: new SchemaSublistField<boolean>(
                    'excludefromraterequest',
                    'item'
                ),
                expectedshipdate: new SchemaSublistField<string>('expectedshipdate', 'item'),
                fromjob: new SchemaSublistField<boolean>('fromjob', 'item'),
                giftcertfrom: new SchemaSublistField<string>('giftcertfrom', 'item'),
                giftcertmessage: new SchemaSublistField<string>('giftcertmessage', 'item'),
                giftcertrecipientemail: new SchemaSublistField<string>(
                    'giftcertrecipientemail',
                    'item'
                ),
                giftcertrecipientname: new SchemaSublistField<string>(
                    'giftcertrecipientname',
                    'item'
                ),
                id: new SchemaSublistField<string>('id', 'item'),
                inventorydetail: new SchemaSublistField<string>('inventorydetail', 'item'),
                inventorylocation: new SchemaSublistField<string>('inventorylocation', 'item'),
                inventorysubsidiary: new SchemaSublistField<string>('inventorysubsidiary', 'item'),
                isclosed: new SchemaSublistField<boolean>('isclosed', 'item'),
                isestimate: new SchemaSublistField<boolean>('isestimate', 'item'),
                istaxable: new SchemaSublistField<boolean>('istaxable', 'item'),
                isvsoebundle: new SchemaSublistField<string>('isvsoebundle', 'item'),
                item: new SchemaSublistField<string>('item', 'item'),
                itemfulfillmentchoice: new SchemaSublistField<string>(
                    'itemfulfillmentchoice',
                    'item'
                ),
                itemsubtype: new SchemaSublistField<string>('itemsubtype', 'item'),
                itemtype: new SchemaSublistField<string>('itemtype', 'item'),
                licensecode: new SchemaSublistField<string>('licensecode', 'item'),
                line: new SchemaSublistField<string>('line', 'item'),
                linenumber: new SchemaSublistField<number>('linenumber', 'item'),
                lineuniquekey: new SchemaSublistField<string>('lineuniquekey', 'item'),
                locationautoassigned: new SchemaSublistField<boolean>(
                    'locationautoassigned',
                    'item'
                ),
                matrixtype: new SchemaSublistField<string>('matrixtype', 'item'),
                noautoassignlocation: new SchemaSublistField<boolean>(
                    'noautoassignlocation',
                    'item'
                ),
                options: new SchemaSublistField<string>('options', 'item'),
                orderpriority: new SchemaSublistField<number>('orderpriority', 'item'),
                porate: new SchemaSublistField<string>('porate', 'item'),
                povendor: new SchemaSublistField<string>('povendor', 'item'),
                price: new SchemaSublistField<string>('price', 'item'),
                printitems: new SchemaSublistField<string>('printitems', 'item'),
                quantity: new SchemaSublistField<number>('quantity', 'item'),
                quantityavailable: new SchemaSublistField<number>('quantityavailable', 'item'),
                quantitybackordered: new SchemaSublistField<number>('quantitybackordered', 'item'),
                quantitybilled: new SchemaSublistField<number>('quantitybilled', 'item'),
                quantitycommitted: new SchemaSublistField<number>('quantitycommitted', 'item'),
                quantityfulfilled: new SchemaSublistField<number>('quantityfulfilled', 'item'),
                quantityrevcommitted: new SchemaSublistField<number>(
                    'quantityrevcommitted',
                    'item'
                ),
                rate: new SchemaSublistField<string>('rate', 'item'),
                rateschedule: new SchemaSublistField<string>('rateschedule', 'item'),
                revrecenddate: new SchemaSublistField<string>('revrecenddate', 'item'),
                revrecschedule: new SchemaSublistField<string>('revrecschedule', 'item'),
                revrecstartdate: new SchemaSublistField<string>('revrecstartdate', 'item'),
                shipaddress: new SchemaSublistField<string>('shipaddress', 'item'),
                shipcarrier: new SchemaSublistField<string>('shipcarrier', 'item'),
                shipmethod: new SchemaSublistField<string>('shipmethod', 'item'),
                subscription: new SchemaSublistField<string>('subscription', 'item'),
                taxcode: new SchemaSublistField<string>('taxcode', 'item'),
                taxrate1: new SchemaSublistField<string>('taxrate1', 'item'),
                units: new SchemaSublistField<string>('units', 'item'),
                vsoeallocation: new SchemaSublistField<string>('vsoeallocation', 'item'),
                vsoeamount: new SchemaSublistField<string>('vsoeamount', 'item'),
                vsoedeferral: new SchemaSublistField<string>('vsoedeferral', 'item'),
                vsoedelivered: new SchemaSublistField<boolean>('vsoedelivered', 'item'),
                vsoeisestimate: new SchemaSublistField<boolean>('vsoeisestimate', 'item'),
                vsoepermitdiscount: new SchemaSublistField<string>('vsoepermitdiscount', 'item'),
                vsoeprice: new SchemaSublistField<string>('vsoeprice', 'item'),
                vsoesopgroup: new SchemaSublistField<string>('vsoesopgroup', 'item')
            }
        },
        partners: {
            sublistId: 'partners',
            fields: {
                contribution: new SchemaSublistField<string>('contribution', 'partners'),
                id: new SchemaSublistField<string>('id', 'partners'),
                isprimary: new SchemaSublistField<boolean>('isprimary', 'partners'),
                partner: new SchemaSublistField<string>('partner', 'partners'),
                partnerrole: new SchemaSublistField<string>('partnerrole', 'partners'),
                transaction: new SchemaSublistField<string>('transaction', 'partners')
            }
        },
        promotions: {
            sublistId: 'promotions',
            fields: {
                sublistname: new SchemaSublistField<string>('promotions', 'promotions'),
                promotionisvalid: new SchemaSublistField<string>('promotionisvalid', 'promotions'),
                applicabilitystatus: new SchemaSublistField<string>(
                    'applicabilitystatus',
                    'promotions'
                ),
                couponcode_display: new SchemaSublistField<string>(
                    'couponcode_display',
                    'promotions'
                ),
                cannotbecombined: new SchemaSublistField<string>('cannotbecombined', 'promotions'),
                couponcode: new SchemaSublistField<string>('couponcode', 'promotions'),
                discount: new SchemaSublistField<string>('discount', 'promotions'),
                discountrate: new SchemaSublistField<string>('discountrate', 'promotions'),
                muccpromocodeinstance: new SchemaSublistField<string>(
                    'muccpromocodeinstance',
                    'promotions'
                ),
                promocode: new SchemaSublistField<string>('promocode', 'promotions'),
                purchasediscount: new SchemaSublistField<string>('purchasediscount', 'promotions'),
                shippingdiscount: new SchemaSublistField<string>('shippingdiscount', 'promotions')
            }
        },
        salesteam: {
            sublistId: 'salesteam',
            fields: {
                contribution: new SchemaSublistField<string>('contribution', 'salesteam'),
                employee: new SchemaSublistField<string>('employee', 'salesteam'),
                id: new SchemaSublistField<string>('id', 'salesteam'),
                isprimary: new SchemaSublistField<boolean>('isprimary', 'salesteam'),
                issalesrep: new SchemaSublistField<string>('issalesrep', 'salesteam'),
                salesrole: new SchemaSublistField<string>('salesrole', 'salesteam'),
                transaction: new SchemaSublistField<string>('transaction', 'salesteam')
            }
        },
        shipgroup: {
            sublistId: 'shipgroup',
            fields: {
                sublistname: new SchemaSublistField<string>('shipgroup', 'shipgroup'),
                destinationaddress: new SchemaSublistField<string>(
                    'destinationaddress',
                    'shipgroup'
                ),
                handlingrate: new SchemaSublistField<string>('handlingrate', 'shipgroup'),
                id: new SchemaSublistField<number>('id', 'shipgroup'),
                shippingcarrier: new SchemaSublistField<string>('shippingcarrier', 'shipgroup'),
                shippingmethod: new SchemaSublistField<string>('shippingmethod', 'shipgroup'),
                shippingmethodref: new SchemaSublistField<string>('shippingmethodref', 'shipgroup'),
                shippingrate: new SchemaSublistField<string>('shippingrate', 'shipgroup'),
                sourceaddress: new SchemaSublistField<string>('sourceaddress', 'shipgroup'),
                weight: new SchemaSublistField<number>('weight', 'shipgroup')
            }
        },
        taxdetails: {
            sublistId: 'taxdetails',
            fields: {
                calcdetail: new SchemaSublistField<string>('calcdetail', 'taxdetails'),
                grossamount: new SchemaSublistField<string>('grossamount', 'taxdetails'),
                linename: new SchemaSublistField<string>('linename', 'taxdetails'),
                linetype: new SchemaSublistField<string>('linetype', 'taxdetails'),
                netamount: new SchemaSublistField<string>('netamount', 'taxdetails'),
                taxamount: new SchemaSublistField<string>('taxamount', 'taxdetails'),
                taxbasis: new SchemaSublistField<string>('taxbasis', 'taxdetails'),
                taxcode: new SchemaSublistField<string>('taxcode', 'taxdetails'),
                taxdetailsreference: new SchemaSublistField<string>(
                    'taxdetailsreference',
                    'taxdetails'
                ),
                taxrate: new SchemaSublistField<string>('taxrate', 'taxdetails'),
                transaction: new SchemaSublistField<string>('transaction', 'taxdetails')
            }
        }
    };

    private locationSchema = LocationSchema.getInstance();
    private itemSchema = ItemSchema.getInstance();

    public joins = {
        location: new SchemaJoin('location', this.locationSchema),
        item: new SchemaJoin('item', this.itemSchema)
    };

    public initializeDefaults = {};

    public transformDefaults = {};
}