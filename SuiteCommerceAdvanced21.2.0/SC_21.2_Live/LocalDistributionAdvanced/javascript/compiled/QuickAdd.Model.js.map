{"version":3,"sources":["QuickAdd.Model.ts"],"names":[],"mappings":"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","file":"QuickAdd.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"QuickAdd.Model\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nimport TransactionLineModel = require('../../../Commons/Transaction/JavaScript/Transaction.Line.Model');\n\n// @class QuickAdd.Model @extends Transaction.Line.Model\nconst QuickAddModel: any = TransactionLineModel.extend({\n    // @method initialize\n    // @return {Void}\n    initialize: function() {\n        TransactionLineModel.prototype.initialize.apply(this, arguments);\n\n        // @property {QuickAdd.Model.Initialization.Options} options\n        this.options = {};\n    },\n\n    // @method setOptions\n    // @param {QuickAdd.Model.Initialization.Options} options\n    // @return {QuickAdd.Model} Returns itself\n    setOptions: function(options) {\n        this.options = options || this.options;\n        return this;\n    },\n\n    // @method clone Override default clone method to pass the set options to the cloned model\n    // @return {QuickAdd.Model}\n    clone: function() {\n        const result = new QuickAddModel(this.toJSON());\n        result.setOptions(this.options);\n        return result;\n    },\n\n    // @property {Object} validation Specify the validation rules for the quantity and quickaddSearch attributes\n    validation: {\n        quickaddSearch: {\n            fn: function(val) {\n                const product = this.get('selectedProduct');\n                const item = product && product.get('item');\n\n                if (!(product && (product.getSku() === val || item.get('_name') === val))) {\n                    return Utils.translate('Begin typing SKU to select an item');\n                }\n                if (item && item.get('options') && item.get('options').length > 0) {\n                    const options = item.get('options');\n                    let index = 0;\n                    let mandatoryField = '';\n                    while (index < options.models.length && !mandatoryField) {\n                        const modelOption = options.models[index];\n                        index++;\n                        mandatoryField =\n                            modelOption &&\n                            (modelOption.get('isMandatory') &&\n                                !modelOption.get('isMatrixDimension')) &&\n                            modelOption.get('label');\n                    }\n                    if (mandatoryField) {\n                        return Utils.translate(\n                            `This item can not be added to the cart because $(0)\n                         is a mandatory field that has no value selected.`,\n                            mandatoryField\n                        );\n                    }\n                }\n            }\n        },\n        quantity: {\n            fn: function(val) {\n                if (!val) {\n                    return Utils.translate('Enter quantity');\n                }\n\n                const product = this.get('selectedProduct');\n                const selectedItem = product && product.getItem();\n\n                if (selectedItem) {\n                    const already_set_quantity = _.isFunction(this.options.getItemQuantitySet)\n                        ? this.options.getItemQuantitySet(selectedItem.id)\n                        : 0;\n\n                    if (\n                        already_set_quantity + this.get('quantity') <\n                        selectedItem.get('_minimumQuantity', true)\n                    ) {\n                        return Utils.translate(\n                            'The minimum quantity for this item is $(0).',\n                            selectedItem.get('_minimumQuantity', true)\n                        );\n                    }\n                    if (\n                        this.options.validateMaxQty &&\n                        !!selectedItem.get('_maximumQuantity') &&\n                        already_set_quantity + this.get('quantity') >\n                            selectedItem.get('_maximumQuantity', true)\n                    ) {\n                        return Utils.translate(\n                            'The maximum quantity for this item is $(0).',\n                            selectedItem.get('_maximumQuantity', true)\n                        );\n                    }\n                }\n            }\n        }\n    }\n});\nexport = QuickAddModel;\n\n// @class QuickAdd.Model.Initialization.Options\n// @property {Function<Number,Number>} getItemQuantitySet Function that given an item id returns how many item already are present in the cart-like.\n// This work to decouple this component of any other concrete implementation.\n// IMPORTANT: If the passed in item id is not in the cart-like this function must return 0 (the number zero).\n"]}