{"version":3,"sources":["ProductViews.Option.View.ts"],"names":[],"mappings":"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","file":"ProductViews.Option.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductViews.Option.View\"/>\n\nimport * as _ from 'underscore';\nimport '../../Utilities/JavaScript/bootstrap-datepicker';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class ProductViews.Option.View.initialize\n// @property {Transaction.Line.Model} line\n// @property {String} templateName As this view can be used\n// to show options in all state (selected or to be selected) it is required to specify\n// what template should be used from the list of templates in configuration.\n// If not value is given 'selector' is used, note that this value\n// is used to select option (in the PDP for instance)\n// @property {Backbone.Model<Transaction.Line.Option.Model>} model\n\n// @class ProductViews.Option.View @extends BackboneView\nconst ProductViewsOptionView: any = BackboneView.extend({\n    // @method initialize Set the option template and values availability\n    // @param {ProductViews.Option.View.initialize} options\n    // @return {Void}\n    initialize: function() {\n        this.config = _.findWhere(Configuration.get('ItemOptions.optionsConfiguration', []), {\n            cartOptionId: this.model.get('cartOptionId')\n        }) || { templates: {} };\n        this.config.templates = this.config.templates || {};\n\n        const item_options_default_templates = Configuration.get(\n            'ItemOptions.defaultTemplates',\n            {}\n        );\n\n        if (item_options_default_templates && item_options_default_templates.selectorByType) {\n            // Sets templates for this option\n            if (!this.config.templates.selector) {\n                const option_selector_template =\n                    item_options_default_templates.selectorByType[this.model.get('type')];\n                const default_option_selector_template =\n                    item_options_default_templates.selectorByType.default;\n\n                this.config.templates.selector =\n                    option_selector_template || default_option_selector_template;\n            }\n\n            if (!this.config.templates.selected) {\n                const option_selected_template =\n                    item_options_default_templates.selectedByType[this.model.get('type')];\n                const default_option_selected_template =\n                    item_options_default_templates.selectedByType.default;\n\n                this.config.templates.selected =\n                    option_selected_template || default_option_selected_template;\n            }\n\n            if (!this.config.templates.facetCell) {\n                const option_facetcell_template =\n                    item_options_default_templates.facetCellByType[this.model.get('type')];\n                const default_option_facetcell_template =\n                    item_options_default_templates.facetCellByType.default;\n\n                this.config.templates.facetCell =\n                    option_facetcell_template || default_option_facetcell_template;\n            }\n        }\n\n        this.options.templateName = this.options.templateName || 'selector';\n        this.template = this.config.templates[this.options.templateName];\n    },\n\n    // @method getContext\n    // @returns {ProductViews.Option.View.Context}\n    getContext: function() {\n        const self = this;\n        const selected_value = this.model.get('value') || {};\n        const values = _.map(this.model.get('values'), function(value: any) {\n            let color = '';\n            let is_color_tile = true;\n            let image = {};\n\n            if (self.model.get('colors')) {\n                color =\n                    self.model.get('colors')[value.label] || self.model.get('colors').defaultColor;\n\n                if (_.isObject(color)) {\n                    image = color;\n                    color = '';\n                    is_color_tile = false;\n                }\n            }\n\n            // @class ProductViews.Option.View.Value\n            return {\n                // @property {String} internalId\n                internalId: value.internalid,\n                // @property {Boolean} isAvailable\n                isAvailable: value.isAvailable,\n                // @property {String} url\n                url: value.url,\n                // @property {String} label\n                label: value.label,\n                // @property {Boolean} isActive\n                isActive: value.internalid === selected_value.internalid,\n                // @property {String} color\n                color: color,\n                // @property {Boolean} isColorTile Indicate if a simple colored box should be shown or an image object is aimed\n                isColorTile: is_color_tile,\n                // @property {Color.Configuration>|String} image\n                image: image,\n                // @property {Boolean} isLightColor\n                isLightColor: _.contains(Configuration.get('layout.lightColors', []), value.label)\n            };\n            // @class ProductViews.Option.View\n        });\n\n        // @class ProductViews.Option.View.Context\n        return {\n            // @property {Transaction.Line.Option.Model} model\n            model: this.model,\n            // @property {Array<ItemOptions.Option.View.Value>} values\n            values: values,\n            // @property {Boolean} showSelectedValue\n            showSelectedValue: !!selected_value,\n            // @propery {Boolean} showRequiredLabel\n            showRequiredLabel: this.options.show_required_label && this.model.get('isMandatory'),\n            // @property {String} itemOptionId\n            itemOptionId: this.model.get('itemOptionId'),\n            // @property {String} cartOptionId\n            cartOptionId: this.model.get('cartOptionId'),\n            // @property {String} label\n            label: this.model.get('label'),\n            // @property {ItemViews.Option.View.Option} selectedValue\n            selectedValue: selected_value,\n            // @property {Boolean} isTextArea\n            isTextArea: this.model.get('type') === 'textarea',\n            // @property {Boolean} isEmail\n            isEmail: this.model.get('type') === 'email',\n            // @property {Boolean} isText\n            isText: this.model.get('type') === 'text',\n            // @property {Boolean} isCheckbox\n            isCheckbox: this.model.get('type') === 'checkbox',\n            // @property {Boolean} idDate\n            isDate: this.model.get('type') === 'date',\n            // @property {Boolean} isSelect\n            isSelect: this.model.get('type') === 'select',\n            // @property {String} showLabel\n            showLabel: !this.options.hideLabel,\n            // @property {Boolean} showSmall\n            showSmall: !!this.options.showSmall\n        };\n        // @class ProductViews.Option.View\n    }\n});\n\nexport = ProductViewsOptionView;\n"]}