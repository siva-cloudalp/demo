{"version":3,"sources":["EventEmitter.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAiBF;QAII;YACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAC5B,CAAC;QAEO,+CAAiB,GAAzB,UAA0B,SAAS;YAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QAEO,mDAAqB,GAA7B,UAA8B,SAAS;YACnC,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC;QAEM,gCAAE,GAAT,UAA8C,SAAY,EAAE,QAAc;YACtE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,KAAK,QAAQ,EAArB,CAAqB,CAAC,EAAE;gBAC/E,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBAC5D,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5C;QACL,CAAC;QAEM,kCAAI,GAAX,UAAgD,SAAY,EAAE,QAAc;YACxE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,KAAK,QAAQ,EAArB,CAAqB,CAAC,EAAE;gBACnF,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBACpE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAChD;QACL,CAAC;QAEM,iCAAG,GAAV,UAA+C,SAAY,EAAE,QAAc;YACvE,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC1D,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC9C;aACJ;QACL,CAAC;QAEM,kCAAI,GAAX,UAAgD,SAAY;YAAE,cAAyB;iBAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;gBAAzB,6BAAyB;;YACnF,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,UAAC,QAAa,IAAK,OAAA,QAAQ,eAAI,IAAI,GAAhB,CAAiB,CAAC,CAAC;YAE/E,IAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;YAC5D,OAAO,aAAa,IAAI,aAAa,CAAC,MAAM,EAAE;gBAC1C,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;gBACrC,QAAQ,eAAI,IAAI,EAAE;aACrB;QACL,CAAC;QACL,0BAAC;IAAD,CAjDA,AAiDC,IAAA;IAjDY,kDAAmB","file":"EventEmitter.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"EventEmitter\"/>\n// @Typescript-partial\n\nimport * as _ from 'underscore';\n\ntype FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\nexport interface EventEmitter<T extends FunctionProperties<T>> {\n    on<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]);\n    once<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]);\n    emit<E extends FunctionPropertyNames<T>>(eventName: E, ...args: Parameters<T[E]>): void;\n    off<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]): void;\n}\n\nexport class DefaultEventEmitter<T extends FunctionProperties<T>> implements EventEmitter<T> {\n    private readonly listeners: any;\n    private readonly onceListeners: any;\n\n    public constructor() {\n        this.listeners = {};\n        this.onceListeners = {};\n    }\n\n    private getEventListeners(eventName) {\n        return this.listeners[eventName];\n    }\n\n    private getEventOnceListeners(eventName): any[] {\n        return this.onceListeners[eventName];\n    }\n\n    public on<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]): void {\n        if (!_.find(this.getEventListeners(eventName), listener => listener === callback)) {\n            this.listeners[eventName] = this.listeners[eventName] || [];\n            this.listeners[eventName].push(callback);\n        }\n    }\n\n    public once<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]): void {\n        if (!_.find(this.getEventOnceListeners(eventName), listener => listener === callback)) {\n            this.onceListeners[eventName] = this.onceListeners[eventName] || [];\n            this.onceListeners[eventName].push(callback);\n        }\n    }\n\n    public off<E extends FunctionPropertyNames<T>>(eventName: E, callback: T[E]): void {\n        if (this.listeners[eventName]) {\n            const index = this.listeners[eventName].indexOf(callback);\n            if (index >= 0) {\n                this.listeners[eventName].splice(index, 1);\n            }\n        }\n    }\n\n    public emit<E extends FunctionPropertyNames<T>>(eventName: E, ...args: Parameters<T[E]>): void {\n        _.map(this.getEventListeners(eventName), (listener: any) => listener(...args));\n\n        const onceListeners = this.getEventOnceListeners(eventName);\n        while (onceListeners && onceListeners.length) {\n            const listener = onceListeners.pop();\n            listener(...args);\n        }\n    }\n}\n"]}