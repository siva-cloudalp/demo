{"version":3,"sources":["PaymentInstrumentACH.Edit.Form.View.ts"],"names":[],"mappings":"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","file":"PaymentInstrumentACH.Edit.Form.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"PaymentInstrumentACH.Edit.Form.View\"/>\n\nimport * as _ from 'underscore';\nimport * as paymentinstrument_ach_edit_form_tpl from 'paymentinstrument_ach_edit_form.tpl';\nimport {\n    FormView,\n    FormFieldsError,\n    FormFieldValue\n} from '../../../Commons/Core/JavaScript/FormView';\nimport { Loggers } from '../../../Commons/Loggers/JavaScript/Loggers';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { EventsHash } from '../../../Commons/Core/JavaScript/View';\nimport { PaymentInstrumentACHModel } from './PaymentInstrumentACH.Model';\nimport { PaymentInstrumentACH } from '../../../ServiceContract/SC/PaymentInstrumentACH/PaymentInstrumentACH';\n\nimport { Configuration } from '../../../Commons/Utilities/JavaScript/Configuration';\nimport { ProfileModel } from '../../../Commons/Profile/JavaScript/Profile.Model';\n\nimport { Errors } from '../../../Commons/Core/JavaScript/Error';\nimport { PaymentInstrumentACHCollection } from './PaymentInstrumentACH.Collection';\n\nimport GlobalViewsConfirmationView = require('../../../Commons/GlobalViews/JavaScript/GlobalViews.Confirmation.View');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\ninterface PaymentInstrumentACHEditFormViewOptions {\n    model: PaymentInstrumentACHModel;\n    collection: PaymentInstrumentACHCollection;\n    inModal: boolean;\n    isSection: boolean;\n    noRedirect: boolean;\n    showFooter: boolean;\n}\n\ninterface PaymentInstrumentACHEditViewContext {\n    paymentMethods: object | string;\n    paymentMethodValue: string;\n    paymentMethodSaved: string;\n    isModal: boolean;\n    showFooter: boolean;\n    isNew: boolean;\n    isSection: boolean;\n    isModalOrCollectionLength: boolean;\n    accountTypes: object[];\n    accountType: string | object;\n    accountTypeSaved: string;\n    account: string;\n    routingNumber: string;\n    bankName: string;\n    ownerName: string;\n    limit: string;\n}\n\nexport class PaymentInstrumentACHEditFormView extends FormView<\n    PaymentInstrumentACHModel,\n    PaymentInstrumentACHEditViewContext\n> {\n    protected template = paymentinstrument_ach_edit_form_tpl;\n\n    public options: PaymentInstrumentACHEditFormViewOptions;\n\n    private user: ProfileModel;\n\n    public constructor(options: PaymentInstrumentACHEditFormViewOptions) {\n        super(new PaymentInstrumentACHModel());\n        this.options = options;\n        this.user = ProfileModel.getInstance();\n        this.formModel = this.options.model;\n    }\n\n    protected getEvents(): EventsHash | null {\n        return {\n            'submit form': 'customSaveForm',\n            'blur [name=\"paymentmethod\"]': 'onFormFieldChange',\n            'blur [name=\"account\"]': 'onFormFieldChange',\n            'blur [name=\"accounttype\"]': 'onFormFieldChange',\n            'blur [name=\"routingnumber\"]': 'onFormFieldChange',\n            'blur [name=\"bankname\"]': 'onFormFieldChange',\n            'blur [name=\"ownername\"]': 'onFormFieldChange',\n            'blur [name=\"limit\"]': 'onFormFieldChange',\n            'change form [name=\"account\"]': 'setPaymethodKey'\n        };\n    }\n\n    protected getFormValues(\n        $savingForm: JQuery<HTMLElement>\n    ): Partial<PaymentInstrumentACH> | FormFieldsError<PaymentInstrumentACH> {\n        const formValues = $savingForm.serializeObject();\n        let account = '';\n        let routingNumber = '';\n        let bankName = '';\n        let ownerName = '';\n        let limit = '';\n        let paymentMethod = null;\n        let accountType = '';\n\n        let validFields: Partial<PaymentInstrumentACH>;\n\n        const errorsResult: FormFieldsError<PaymentInstrumentACH> = {\n            errorCode: Errors.FormValidation,\n            errors: {}\n        };\n\n        if ('limit' in formValues && typeof formValues.limit === 'string' && formValues.limit) {\n            limit = formValues.limit;\n        } else {\n            errorsResult.errors.limit = Utils.translate('Limit is required');\n        }\n\n        if (this.formModel.isNew()) {\n            if (\n                'account' in formValues &&\n                typeof formValues.account === 'string' &&\n                formValues.account\n            ) {\n                account = formValues.account;\n            } else {\n                errorsResult.errors.account = Utils.translate('Account is required');\n            }\n\n            if (\n                'routingnumber' in formValues &&\n                typeof formValues.routingnumber === 'string' &&\n                formValues.routingnumber\n            ) {\n                routingNumber = formValues.routingnumber;\n            } else {\n                errorsResult.errors.routingnumber = Utils.translate('Routing Number is required');\n            }\n\n            if (\n                'bankname' in formValues &&\n                typeof formValues.bankname === 'string' &&\n                formValues.bankname\n            ) {\n                bankName = formValues.bankname;\n            } else {\n                errorsResult.errors.bankname = Utils.translate('Bank Name is required');\n            }\n\n            if (\n                'ownername' in formValues &&\n                typeof formValues.ownername === 'string' &&\n                formValues.ownername\n            ) {\n                ownerName = formValues.ownername;\n            } else {\n                errorsResult.errors.ownername = Utils.translate('Owner Name is required');\n            }\n            if (\n                'accounttype' in formValues &&\n                typeof formValues.accounttype === 'string' &&\n                formValues.accounttype !== '0' &&\n                formValues.accounttype\n            ) {\n                accountType = formValues.accounttype;\n            } else {\n                errorsResult.errors.accounttype = Utils.translate('Account Type is required');\n            }\n\n            if (\n                'paymentmethod' in formValues &&\n                typeof formValues.paymentmethod === 'string' &&\n                formValues.paymentmethod !== '0' &&\n                formValues.paymentmethod\n            ) {\n                paymentMethod = formValues.paymentmethod;\n            } else {\n                errorsResult.errors.paymentmethod = Utils.translate('Payment method is required');\n            }\n\n            if (\n                account &&\n                accountType &&\n                paymentMethod &&\n                routingNumber &&\n                bankName &&\n                ownerName &&\n                limit\n            ) {\n                validFields = {\n                    account: account,\n                    accounttype: accountType,\n                    paymentmethod: paymentMethod,\n                    routingnumber: routingNumber,\n                    bankname: bankName,\n                    ownername: ownerName,\n                    limit: limit\n                };\n            }\n        } else if (limit) {\n            validFields = {\n                limit: limit\n            };\n        }\n\n        return validFields || errorsResult;\n    }\n\n    protected getFormFieldValue(\n        changedInput: JQuery<HTMLElement>\n    ): FormFieldValue<PaymentInstrumentACH> {\n        const newVal = changedInput.val();\n        const fieldName = changedInput.attr('name');\n\n        if (fieldName === 'account' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'routingnumber' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'bankname' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'ownername' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'limit' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'accounttype' && typeof newVal === 'string' && newVal !== '0') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        if (fieldName === 'paymentmethod' && newVal !== '0') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n\n        return {\n            name: fieldName || '',\n            error: Utils.translate(`Please provide a valid ${fieldName}`)\n        };\n    }\n\n    public persistForm(): false | JQuery.jqXHR<PaymentInstrumentACH> {\n        return this.customSaveForm(\n            jQuery.Event('click', {\n                target: this.$el.find('form').get(0)\n            })\n        );\n    }\n\n    private customSaveForm(e): false | JQuery.jqXHR<PaymentInstrumentACH> {\n        const loggers = Loggers.getLogger();\n        const actionId = loggers.start('Save ACH');\n        const promise = super.saveForm(e);\n\n        if (promise) {\n            promise.then(\n                (): void => {\n                    loggers.end(actionId, {\n                        operationIds: this.formModel.getOperationIds(),\n                        status: 'success'\n                    });\n                    this.confirmConsent();\n                }\n            );\n        }\n        return promise;\n    }\n\n    private confirmConsent(): void {\n        const consentMessage = this.formModel.get('customerconsent');\n        const approveConsentView = new GlobalViewsConfirmationView({\n            callBack: (): void => {\n                this.formModel.set('consent', true);\n                const promise = this.formModel.save();\n                if (promise) {\n                    promise.then(\n                        (): void => {\n                            this.options.collection.fetch().then(\n                                (): void => {\n                                    if (!this.options.inModal && !this.options.noRedirect) {\n                                        Backbone.history.navigate('#ach', {\n                                            trigger: true\n                                        });\n                                    }\n                                }\n                            );\n                        }\n                    );\n                }\n            },\n            title: Utils.translate('Approve Consent'),\n            body: Utils.translate(consentMessage),\n            autohide: true\n        });\n        approveConsentView.once('destroy', () => {\n            if (!!this.formModel.get('consent') === false) {\n                this.options.collection.trigger('noconsent', this.options.collection);\n\n            }\n        });\n        return this.application.getLayout().showInModal(approveConsentView, {});\n    }\n\n    private paymenthodKeyACH(ach_number) {\n        const payment_methods_configuration = Configuration.get('paymentmethods');\n        let paymenthod_key;\n\n        // validate that the number and issuer\n        _.each(payment_methods_configuration, function(payment_method_configuration: any) {\n            if (\n                payment_method_configuration.regex &&\n                payment_method_configuration.regex.test(ach_number)\n            ) {\n                paymenthod_key = payment_method_configuration.key;\n            }\n        });\n\n        const paymentmethod: any =\n            paymenthod_key &&\n            _.findWhere(Configuration.get('siteSettings.paymentmethods'), { key: paymenthod_key });\n\n        return paymentmethod && paymentmethod.key;\n    }\n\n    private setPaymethodKey(e): void {\n        const ach_number = String(jQuery(e.target).val()).replace(/\\s/g, '');\n        const form = jQuery(e.target).closest('form');\n        const paymenthod_key = this.paymenthodKeyACH(ach_number);\n\n        form.find('[name=\"paymentmethod\"]').val(paymenthod_key || 0);\n    }\n\n    public getContext(): PaymentInstrumentACHEditViewContext {\n        const accountTypes = this.formModel.getAccountTypes();\n\n        const payment_methods_from_configuration = Configuration.get(\n            'siteSettings.paymentmethods',\n            []\n        );\n        const selected_payment_method: any = _.findWhere(payment_methods_from_configuration, {\n            internalid: this.formModel.get('paymentmethod')\n        });\n\n        const isNew = this.formModel.isNew();\n        const paymentMethods = _.map(\n            _.where(payment_methods_from_configuration, {\n                isautomatedclearinghouse: 'T'\n            }),\n            function(paymentmethod: any) {\n                return {\n                    hidden: !(\n                        isNew ||\n                        (selected_payment_method &&\n                            paymentmethod.key === selected_payment_method.key)\n                    ),\n                    icon: paymentmethod.imagesrc,\n                    internalid: paymentmethod.internalid,\n                    key: paymentmethod.key,\n                    name: paymentmethod.name,\n                    selected:\n                        selected_payment_method && paymentmethod.key === selected_payment_method.key\n                };\n            }\n        );\n\n        let typeSaved = null;\n        let accountTypeSaved = '';\n        let paymentMethodSaved = '';\n\n        if (!isNew) {\n            typeSaved = _.first(\n                _.where(this.formModel.getAccountTypes(), {\n                    name: this.formModel.getAccountType()\n                })\n            );\n\n            accountTypeSaved = typeSaved.name ? typeSaved.name : '';\n\n            paymentMethodSaved =\n                this.formModel.get('paymentmethod') && this.formModel.get('paymentmethod').name\n                    ? this.formModel.get('paymentmethod').name\n                    : '';\n        }\n        return {\n            account: this.formModel.get('mask'),\n            accountTypes: accountTypes,\n            accountType: this.formModel.get('accounttype'),\n            accountTypeSaved: accountTypeSaved,\n            routingNumber: this.formModel.get('routingnumber'),\n            bankName: this.formModel.get('bankname'),\n            ownerName: this.formModel.get('ownername'),\n            isModal: this.options.inModal,\n            isSection: this.options.isSection,\n            isModalOrCollectionLength:\n                this.options.inModal ||\n                !(this.options.collection && this.options.collection.length),\n            showFooter: this.options.showFooter,\n            limit: this.formModel.get('limit'),\n            paymentMethods: paymentMethods,\n            paymentMethodValue: selected_payment_method ? selected_payment_method.key : '',\n            paymentMethodSaved: paymentMethodSaved,\n            isNew: isNew\n        };\n    }\n}\n"]}