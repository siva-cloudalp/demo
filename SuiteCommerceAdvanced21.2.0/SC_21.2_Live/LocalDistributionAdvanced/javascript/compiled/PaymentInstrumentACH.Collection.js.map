{"version":3,"sources":["PaymentInstrumentACH.Collection.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;;;;;;;;;;;;;;IAgBF;QAAoD,kDAInD;QAQG,wCAAmB,MAAwC,EAAE,OAAe;YAAzD,uBAAA,EAAA,WAAwC;YAA3D,YACI,kBAAM,MAAM,EAAE,OAAO,CAAC,SAEzB;YAVM,SAAG,GAAG;gBACT,OAAA,KAAK,CAAC,cAAc,CAAC,0CAA0C,EAAE,KAAK,CAAC;YAAvE,CAAuE,CAAC;YAIrE,WAAK,GAAqC,sDAAyB,CAAC;YAIvE,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;QACzB,CAAC;QAEM,kEAAyB,GAAhC;YACI,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;gBAClE,IAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC;gBAChD,kBAAkB,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAE3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;aACpC;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;QAEM,6CAAI,GAAX,UACI,MAA2B,EAC3B,KAAW,EACX,OAA6B;YAHjC,iBAcC;YATG,OAAO,iBAAM,IAAI,YAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC;gBAC7C,IAAI;oBACA,IAAI,CAAC,KAAI,CAAC,QAAQ,EAAE;wBAChB,KAAI,CAAC,QAAQ,GAAG,iBAAM,KAAK,YAAE,CAAC;qBACjC;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;iBAC9C;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,8CAAK,GAAZ,UACI,MAAmC,EACnC,OAA8B;YAE9B,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;gBAC5D,IAAI,CAAC,QAAQ,GAAG,iBAAM,KAAK,WAAE,CAAC;aACjC;YACD,OAAO,iBAAM,KAAK,YAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC;QAEM,+CAAM,GAAb;YACI,iBAAM,KAAK,YAAC;gBACR,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,uCAAkB,CAAC,WAAW,EAAE;aAC7C,CAAC,CAAC;QACP,CAAC;QACL,qCAAC;IAAD,CA5DA,AA4DC,CA5DmD,uBAAU,GA4D7D;IA5DY,wEAA8B","file":"PaymentInstrumentACH.Collection.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"PaymentInstrumentACH.Collection\"/>\n\nimport * as _ from 'underscore';\nimport { PaymentInstrumentACHModel } from './PaymentInstrumentACH.Model';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as Backbone from '../../../Commons/Core/JavaScript/backbone/BackboneExtras';\n\nimport { Collection } from '../../../Commons/Core/JavaScript/Collection';\nimport { AjaxRequestsKiller } from '../../../Commons/AjaxRequestsKiller/JavaScript/AjaxRequestsKiller';\nimport {\n    PaymentInstrumentACH,\n    CollectionEventsDefinitionACH\n} from '../../../ServiceContract/SC/PaymentInstrumentACH/PaymentInstrumentACH';\n\nexport class PaymentInstrumentACHCollection extends Collection<\n    PaymentInstrumentACHModel,\n    {},\n    CollectionEventsDefinitionACH<PaymentInstrumentACHCollection>\n> {\n    public url = (): string =>\n        Utils.getAbsoluteUrl('services/PaymentInstrumentACH.Service.ss', false);\n\n    public original: PaymentInstrumentACHCollection | null;\n\n    public model: typeof PaymentInstrumentACHModel = PaymentInstrumentACHModel;\n\n    public constructor(models: PaymentInstrumentACHModel[] = [], options?: never) {\n        super(models, options);\n        this.original = null;\n    }\n\n    public getCollectionForRendering() {\n        if (this && !!this.length && !_.findWhere(this.models, { id: '-1' })) {\n            const new_payment_method = this.first().clone();\n            new_payment_method.set('internalid', '-1');\n\n            this.models.push(new_payment_method);\n            this.length = this.models.length;\n        }\n        return this;\n    }\n\n    public sync(\n        method: Backbone.SyncMethod,\n        model: this,\n        options: Backbone.SyncOptions\n    ): JQuery.jqXHR<PaymentInstrumentACH> {\n        return super.sync(method, model, options).always(() => {\n            try {\n                if (!this.original) {\n                    this.original = super.clone();\n                }\n            } catch (e) {\n                console.error('Error cloning collection.');\n            }\n        });\n    }\n\n    public reset(\n        models: PaymentInstrumentACHModel[],\n        options?: Backbone.Silenceable\n    ): PaymentInstrumentACHModel[] {\n        if (!this.original && (_.isArray(models) && models.length > 0)) {\n            this.original = super.clone();\n        }\n        return super.reset(models, options);\n    }\n\n    public update(): void {\n        super.fetch({\n            reset: true,\n            killerId: AjaxRequestsKiller.getKillerId()\n        });\n    }\n}\n"]}