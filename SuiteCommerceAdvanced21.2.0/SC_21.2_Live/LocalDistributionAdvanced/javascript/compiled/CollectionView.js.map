{"version":3,"sources":["CollectionView.ts"],"names":[],"mappings":"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","file":"CollectionView.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"CollectionView\"/>\n// @Typescript-partial\nimport * as _ from 'underscore';\nimport { View } from './View';\nimport { jQuery } from './jquery/JQueryExtras';\n\nexport abstract class CollectionView<\n    TCollectionElement,\n    TContext extends object,\n    TEvent extends object = {}\n> extends View<TContext, TEvent> {\n    private cellViewInstances: View<object, object>[] = [];\n\n    private readonly cellsContainerId: string = 'backbone.collection.view.cells';\n\n    private readonly cellContainerId: string = 'backbone.collection.view.cell';\n\n    private readonly rowsContainerId: string = 'backbone.collection.view.rows';\n\n    private collection: TCollectionElement[];\n\n    protected template = null;\n\n    /**\n     * @deprecated\n     */\n    protected cellTemplate: unknown | null = null;\n\n    private readonly rowsCount = 12;\n\n    private calculateSpanSize(): number {\n        return this.rowsCount / this.getEffectiveCellViewsPerRow();\n    }\n\n    protected constructor(collection: TCollectionElement[]) {\n        super();\n        this.collection = collection;\n    }\n    protected abstract getCellViewInstance(\n        element: TCollectionElement,\n        index: number\n    ): View<object, object>;\n\n    protected getRowViewInstance(index: number): View<object, object> | null {\n        return null;\n    }\n\n    private createCellElement(): JQuery<HTMLElement> {\n        const data = this.placeholderData || {};\n        const tag_name = data.childTagName || 'div';\n        const element = jQuery(`<${tag_name}></${tag_name}>`);\n\n        if (data.childId) {\n            element.attr('id', data.childId);\n        }\n\n        if (data.childClass) {\n            element.addClass(data.childClass);\n        }\n\n        if (data.childDataAction) {\n            element.attr('data-action', data.childDataAction);\n        }\n\n        if (data.childDataType) {\n            element.attr('data-type', data.childDataType);\n        }\n\n        return element;\n    }\n\n    private createCell(\n        element: TCollectionElement,\n        index: number,\n        row: View<object, object> | null\n    ): JQuery<HTMLElement> {\n        const cellViewInstance = this.getCellViewInstance(element, index);\n        // const child_view_instance = new this.childView(options);\n        // Required only to destroy instances properly\n        this.cellViewInstances.push(cellViewInstance);\n        if (!cellViewInstance.attributes['data-root-component-id']) {\n            cellViewInstance.attributes['data-root-component-id'] =\n                this.attributes['data-root-component-id'] || '';\n        }\n\n        cellViewInstance.parentView = row || cellViewInstance.parentView || this;\n        cellViewInstance.hasParent = true;\n\n        cellViewInstance.setElement(this.createCellElement());\n\n        cellViewInstance.render();\n        /*\n        Casting to avoid making $el a public attribute on \"View\", re-arrangement of DOM\n        is required to be compatible with Backbone.CollectionView\n         */\n        const cellViewInstanceElements = (<any>cellViewInstance).$el.children();\n        /*\n\t\tThe cell will only be wraped by the element returned in 'this.createCellElement()'\n\t\tif the template have more than 1 root html tags\n\t\tie: <div>...</div><div class=\"other-div\">...</div>\n\t\t*/\n        if (cellViewInstanceElements.length === 1) {\n            cellViewInstance.setElement(cellViewInstanceElements[0]);\n        }\n        const cellViewInstance$el = (<any>cellViewInstance).$el;\n\n        if (typeof this.cellTemplate === 'function') {\n            let $cell = jQuery(\n                this.cellTemplate({\n                    ...cellViewInstance.getTemplateContext(),\n                    spanSize: this.calculateSpanSize()\n                })\n            );\n            const $placeholder = $cell.find(`[data-type=\"${this.cellContainerId}\"]`);\n\n            if ($placeholder.length) {\n                $placeholder.replaceWith(cellViewInstance$el);\n            } else {\n                $cell = jQuery('<div></div>');\n                $cell.append(cellViewInstance$el);\n            }\n\n            return $cell;\n        }\n        return cellViewInstance$el;\n    }\n\n    /**\n     * Override to change the number of cells to render per row\n     * Must be > 1 or 1 will be used instead.\n     * (Deprecated) -> The returned value will be overwritten by the value\n     * on 'data-viewsPerRow' html attribute on the placeholder the current\n     * view will be rendered\n     */\n    protected getCellViewsPerRow(): number {\n        return 3;\n    }\n\n    private getEffectiveCellViewsPerRow(): number {\n        let viewsPerRow;\n        /*\n         * This block is only to be backward compatible, there is not current usage\n         * in the app\n         */\n        if (this.placeholderData && this.placeholderData.viewsPerRow) {\n            viewsPerRow = parseInt(this.placeholderData.viewsPerRow, 10);\n        } else if (!viewsPerRow) {\n            viewsPerRow = this.getCellViewsPerRow();\n        }\n        if (viewsPerRow < 1) {\n            viewsPerRow = 1;\n        }\n        return viewsPerRow;\n    }\n\n    private appendCellsToRow(\n        cells: JQuery<HTMLElement>[],\n        $row: JQuery<HTMLElement>\n    ): JQuery<HTMLElement> {\n        const $cells = jQuery(\n            _.map(\n                cells,\n                (element: JQuery<HTMLElement>): HTMLElement => {\n                    return element.get(0);\n                }\n            )\n        );\n\n        const $placeholder = $row.find(`[data-type=\"${this.cellsContainerId}\"]`);\n        if ($placeholder.length) {\n            $placeholder.replaceWith($cells);\n        } else {\n            $row = jQuery('<div></div>');\n            $row.append($cells);\n        }\n\n        return $row;\n    }\n\n    public render(): this {\n        if (this.template) {\n            super.render();\n        }\n        const rows: JQuery<HTMLElement>[] = [];\n        let cellsInRow: JQuery<HTMLElement>[] = [];\n        this.destroyCellViewInstances();\n        let row = this.getRowViewInstance(0);\n        this.collection.forEach(\n            (element: TCollectionElement, index: number): void => {\n                const cell = this.createCell(element, index, row);\n\n                if (row) {\n                    cellsInRow.push(cell);\n\n                    if (\n                        this.getEffectiveCellViewsPerRow() === 1 ||\n                        (index + 1) % this.getEffectiveCellViewsPerRow() === 0 ||\n                        index + 1 === this.collection.length\n                    ) {\n                        row.render();\n\n                        const $row: JQuery = (<any>row).$el;\n                        const rowElements = $row.children();\n                        if (rowElements.length === 1) {\n                            row.setElement(rowElements[0]);\n                        }\n\n                        rows.push(this.appendCellsToRow(cellsInRow, (<any>row).$el));\n                        row.parentView = this;\n                        row.hasParent = true;\n                        row = this.getRowViewInstance(\n                            Math.floor(index / this.getEffectiveCellViewsPerRow()) + 1\n                        );\n                        cellsInRow = [];\n                    }\n                } else {\n                    rows.push(cell);\n                }\n            }\n        );\n\n        const $content = jQuery(\n            _.map(rows, function(element: JQuery<HTMLElement>): HTMLElement {\n                return element.get(0);\n            })\n        );\n\n        if (this.template) {\n            this.$(`[data-type=\"${this.rowsContainerId}\"]`).replaceWith($content);\n        } else {\n            this.$el.append($content);\n        }\n        return this;\n    }\n    private destroyCellViewInstances(): void {\n        this.cellViewInstances.forEach(child => child.destroy());\n        this.cellViewInstances = [];\n    }\n    public destroy(): void {\n        this.destroyCellViewInstances();\n        super.destroy();\n    }\n}\n"]}