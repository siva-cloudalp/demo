{"version":3,"sources":["PageTypeView.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;;;;;;;;;;;;;;IA+DF;QAGU,gCAAuB;QAe7B,sBAAmB,OAA4B;YAA/C,YACI,iBAAO,SAEV;YAfD,0FAA0F;YAC1E,wBAAkB,GAAG;gBACjC,IAAI,UAAU,GAAqB,EAAE,CAAC;gBACtC,IAAI,KAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE;oBAC5C,IAAA,QAAQ,GAAK,KAAI,CAAC,OAAO,SAAjB,CAAkB;oBAC1B,IAAA,GAAG,GAAK,QAAQ,IAAb,CAAc;oBACzB,IAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBACnC,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;iBAC1E;gBACD,OAAO,UAAU,CAAC;YACtB,CAAC,CAAC;YAIE,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;QAC3B,CAAC;QAEM,wCAAiB,GAAxB;YACI,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC;QACvC,CAAC;QAEM,kCAAW,GAAlB;YACI,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACvE,OAAO,WAAW,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACpE,CAAC;QACL,mBAAC;IAAD,CA/BA,AA+BC,CA5BS,WAAI,GA4Bb;IA/BqB,oCAAY","file":"PageTypeView.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"PageTypeView\"/>\n// @Typescript-full\n\nimport { View } from './View';\nimport { Application } from '../../ApplicationSkeleton/JavaScript/Application';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport * as jQuery from './jQuery';\n\nexport interface BreadCrumbPage {\n    href: string;\n    text?: string;\n}\n\nexport interface PageInfo {\n    addition_to_head: string;\n    fields: {\n        [key: string]: string;\n    };\n    type: number;\n    siteId: number;\n    template: string;\n    url: string;\n    urlPath: string;\n    header: string;\n    title: string;\n    name: string;\n    metaKeywords: string;\n    metaDescription: string;\n    additionToHeader: string;\n    pageTypeId: number;\n    pageTypeName: string;\n    page_header: string;\n    page_title: string;\n    meta_keywords: string;\n    meta_description: string;\n    site_id: number;\n}\n\ninterface RouterArguments {\n    [index: number]: string;\n    length: number;\n}\n\nexport interface CommonViewOptions {\n    application: Application;\n    container: Application;\n    routerArguments: RouterArguments;\n}\n\nexport interface PageTypeViewOptions extends CommonViewOptions {\n    pageInfo?: {\n        name: string;\n        url: string;\n        header: string;\n        title: string;\n        fields: {\n            [key: string]: string;\n        };\n    };\n}\n\nexport abstract class PageTypeView<\n    TContext extends object,\n    TEvents extends object = {}\n> extends View<TContext, TEvents> {\n    protected readonly options: PageTypeViewOptions;\n\n    // this method is needed by core to render proper breadcrumb, it should not be overwritten\n    public readonly getBreadcrumbPages = (): BreadCrumbPage[] => {\n        let breadCrumb: BreadCrumbPage[] = [];\n        if (this.options.pageInfo && this.options.pageInfo.url) {\n            const { pageInfo } = this.options;\n            const { url } = pageInfo;\n            const path = Utils.correctURL(url);\n            breadCrumb = [{ href: path, text: pageInfo.title || pageInfo.header }];\n        }\n        return breadCrumb;\n    };\n\n    public constructor(options: PageTypeViewOptions) {\n        super();\n        this.options = options;\n    }\n\n    public beforeShowContent<T>(): Promise<T> {\n        return jQuery.Deferred().resolve();\n    }\n\n    public showContent<T>(): Promise<T> {\n        const application = this.options.application || this.options.container;\n        return application && application.getLayout().showContent(this);\n    }\n}\n"]}