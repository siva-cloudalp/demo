{"version":3,"sources":["backbone/BackboneValidationExtras.ts"],"names":[],"mappings":"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","file":"BackboneValidationExtras.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"BackboneValidationExtras\"/>\nimport * as _ from 'underscore';\nimport * as Backbone from './backbone';\nimport './Backbone.Validation';\n\nconst newPatterns = {\n    // Same as email but is more restrictive and matches the same emails as the Netsuite backend UI\n    // Source: https://system.netsuite.com/javascript/NLUtil.jsp__NS_VER=2014.1.0&minver=154&locale=en_US.nlqs\n    //        (Search for NLValidationUtil_SIMPLE_EMAIL_PATTERN)\n    email: /^[-a-z0-9!#$%&'*+/=?^_`{|}~]+(?:\\.[-a-z0-9!#$%&'*+/=?^_`{|}~]+)*@(?:[a-z0-9]+(?:-+[a-z0-9]+)*\\.)+(?:xn--[a-z0-9]+|[a-z]{2,16})$/i,\n\n    netsuiteEmail: /^[-a-z0-9!#$%&'*+/=?^_`{|}~]+(?:\\.[-a-z0-9!#$%&'*+/=?^_`{|}~]+)*@(?:[a-z0-9]+(?:-+[a-z0-9]+)*\\.)+(?:xn--[a-z0-9]+|[a-z]{2,16})$/i,\n\n    // This validation is less restrictive than standard\n    // and matches with the used in Netsuite backend\n    netsuiteUrl: /^(https|http|ftp|file):\\/\\//,\n\n    netsuiteFloat: /^-{0,1}([0-9])+(\\.{1}[0-9]+)?$/,\n\n    netsuiteInteger: /^-{0,1}([0-9])+$/,\n    // Allow numbers bettwen 000.00 and 000100.00 ending with optional %\n    netsuitePercent: /^0*((([0-9]{1,2})(\\.[0-9]{1,2})?%?$)|(100(\\.0{1,2})?%?$))/,\n\n    // Allow any character 7 or more times\n    // (this is the validation that the netsuite backend form does on phone type fields)\n    netsuitePhone: /^.{7,}$/\n};\nconst selectors = {\n    controlGroup: { attr: 'data-validation', value: 'control-group' },\n    control: { attr: 'data-validation', value: 'control' },\n    error: { attr: 'data-validation-error', value: '' },\n    errorInline: { attr: 'data-validation-error', value: 'inline' },\n    errorBlock: { attr: 'data-validation-error', value: 'block' },\n\n    build: function(selectorName) {\n        const selector = selectors[selectorName];\n        return `[${selector.attr}=\"${selector.value}\"]`;\n    }\n};\nconst newCallbacks = {\n    valid: function(view, attr, selector) {\n        const $control = view.$el.find(`[${selector}=\"${attr}\"]`);\n        // if its valid we remove the error classnames\n        const $group = $control\n            .closest(selectors.build('controlGroup'))\n            .removeAttr(selectors.error.attr);\n        const $target =\n            $control.data('error-style') === 'inline'\n                ? $group.find(selectors.build('errorInline'))\n                : $group.find(selectors.build('errorBlock'));\n\n        view.helpMessages = view.helpMessages || {};\n\n        if (view.helpMessages[attr]) {\n            $target.text(view.helpMessages[attr]);\n        }\n\n        // we also need to remove all of the error messages\n        return $target.remove().end();\n    },\n\n    invalid: function(view, attr, error, selector) {\n        // removes back-end errors\n        view.hideError();\n\n        let $target;\n        const $control = view.$el.find(`[${selector}=\"${attr}\"]`);\n        const $group = $control\n            .closest(selectors.build('controlGroup'))\n            .attr(selectors.error.attr, selectors.error.value);\n\n        // This case happens when calling validation on attribute setting with { validate: true; }\n        if (!view.$savingForm) {\n            view.$savingForm = $control.closest('form');\n        }\n\n        if ($control.data('error-style') === 'inline') {\n            // if we don't have a place holder for the error\n            // we need to add it. $target will be the placeholder\n            if (!$group.find(selectors.build('errorInline')).length) {\n                $group\n                    .find(selectors.build('control'))\n                    .append(\n                        `<span ${selectors.errorInline.attr}=\"${\n                            selectors.errorInline.value\n                        }\"></span>`\n                    );\n            }\n\n            $target = $group.find(selectors.build('errorInline'));\n        } else {\n            // if we don't have a place holder for the error\n            // we need to add it. $target will be the placeholder\n            if (!$group.find(selectors.build('errorBlock')).length) {\n                $group\n                    .find(selectors.build('control'))\n                    .append(`<p ${selectors.errorBlock.attr}=\"${selectors.errorBlock.value}\"></p>`);\n            }\n\n            $target = $group.find(selectors.build('errorBlock'));\n        }\n\n        view.helpMessages = view.helpMessages || {};\n        view.helpMessages[attr] = $target.text();\n\n        return $target.text(error);\n    }\n};\n\ndeclare module './backbone' {\n    const Validation: {\n        patterns: typeof newPatterns;\n        callbacks: typeof newCallbacks;\n    };\n}\n\ninterface ValidationFunction {\n    (value: any, name: string, form: any): string | boolean;\n}\n\nexport interface ValidationObject {\n    fn?: string | ValidationFunction;\n    required?: boolean | ValidationFunction;\n    acceptance?: true | 'true';\n    min?: number;\n    max?: number;\n    range?: [number, number];\n    length?: number;\n    minLength?: number;\n    maxLength?: number;\n    rangeLength?: [number, number];\n    oneOf?: any[];\n    equalTo?: string;\n    pattern?: string | RegExp;\n    msg?: string;\n}\n\nexport interface ValidationConfig {\n    [name: string]: ValidationObject | ValidationObject[] | ValidationFunction;\n}\n_.extend(Backbone.Validation.patterns, newPatterns);\n_.extend(Backbone.Validation.callbacks, newCallbacks);\n"]}