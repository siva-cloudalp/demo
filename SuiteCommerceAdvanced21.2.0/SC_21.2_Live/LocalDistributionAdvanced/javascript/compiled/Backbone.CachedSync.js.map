{"version":3,"sources":["Backbone.CachedSync.ts"],"names":[],"mappings":"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","file":"Backbone.CachedSync.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Backbone.CachedSync\"/>\n/*\n#Backbone.CachedModel - cachedSync\nadds the functionality to Backbone to support backbone models&collections cached\nin memory - it will load from memory the second fetch() will return results from memory the next time a model is fetched.\nBackbone.CachedModel and Backbone.CachedCollection classes can be extended and they use the core method\nBackbone.cachedSync, instead the normal Backbone.sync.\n*/\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\n\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// @module Backbone @class Backbone\n\n// @property {Object<String,jQuery.Deferred>} localCache The cache is an object where keys are a request identifier and values are a the result of the request and some metadata. @static\nBackbone.localCache = {};\n// @property {Number} cacheSize We will cap the size of the cache by an arbitratry number, fell free to change it to meet your needs.\nBackbone.cacheSize = 100;\n\n// Removes the oldest requests once the limit is reached\nfunction evictRecords() {\n    const keys = _.keys(Backbone.localCache);\n    const cache_size = keys.length;\n    if (cache_size > Backbone.cacheSize) {\n        delete Backbone.localCache[keys[0]];\n    }\n}\n// @method cachedSync\n// This method is the base for implementing backbone model caching in memory. Adds a cache\n// layer to all read requests, but leaves all write actions unmodified. Can be used\n// interchangeably with Backbone.sync (has the same API), it will retun a jQuery promise once\n// it's done will call the apropiate function\n// @return {jQuery.Deferred} Generates a new deferred for every new sync, no matter if its\n// or not in the cache. This promise is / already-was resolved with the ajax call.\nBackbone.cachedSync = function(action, self, options) {\n    // Generates an uninque url that will be used as the request identifier\n    const url = normalizeUrl(_.result(this, 'url'), options.data);\n\n    if (action === 'read') {\n        const deferred = <any>jQuery.Deferred();\n\n        // jQuery.ajax maps error to fail and success to done\n        deferred.error = deferred.fail;\n        deferred.success = deferred.done;\n\n        // Now we make sure the success and error options are called\n        deferred.success(options.success);\n        deferred.error(options.error);\n\n        // We then delete them from the options that will be passed to the real call so they are not called twice, for the 1st request\n        delete options.success;\n        delete options.error;\n\n        if (options.cache !== false) {\n            // Force ajaxSetup cache to be true and not append a &_={timestamp} to the end of the URL\n            options.cache = true;\n        }\n\n        if (options.cache && Backbone.localCache[url]) {\n            deferred.resolveWith(this, [\n                Backbone.localCache[url],\n                'success',\n                {\n                    response: Backbone.localCache[url],\n                    status: 'success',\n                    statusCode: '200',\n                    readyState: 4,\n                    statusText: 'OK',\n                    responseText: false // So it will use response instead of responseText\n                }\n            ]);\n        } else {\n            const syncResult = Backbone.sync.apply(this, arguments);\n            syncResult.then(\n                // Success Callback\n                function(response, status, jqXhr) {\n                    Backbone.localCache[url] = response;\n                    // Sometimes parse modifies the responce object (that is passed by reference)\n                    response = jqXhr.responseText ? JSON.parse(jqXhr.responseText) : response;\n                    // now we resolve the defered one with results\n                    deferred.resolveWith(syncResult, [response, status, jqXhr]);\n                    // This make sure the cache is keept short\n                    evictRecords();\n                },\n                // Error Callback\n                function() {\n                    // if it fails we make sure the next time its requested, dont read from cache\n                    delete Backbone.localCache[url];\n                    deferred.rejectWith(syncResult, arguments);\n                },\n                // Progess Callback\n                function() {\n                    deferred.notifyWith(syncResult, arguments);\n                }\n            );\n        }\n\n        // Then we just return the defered\n        return deferred;\n        // Bottom line: we are piping a fake ajax deferred from the original one\n    }\n\n    const result = Backbone.sync.apply(this, arguments);\n    result.done(function(r) {\n        delete Backbone.localCache[url];\n    });\n    return result;\n};\n\n// @module BackboneExtras\n// @class Backbone.CachedModel @method addToCache @param data @param {Object} params\n// @class Backbone.CachedCollection @method addToCache @param data @param {Object} params\nfunction addToCache(data, params) {\n    /* jshint validthis:true*/\n    // Generates an unique url that will be used as the request identifier\n    const url = normalizeUrl(_.result(this, 'url'), params);\n\n    // This defered will be used as a fake Ajax Request we are gonna store in the cache\n    const deferred = jQuery.Deferred();\n\n    // We resolve the defered with the data you sent and some fake ajax info\n    deferred.resolveWith(this, [\n        data,\n        'success',\n        {\n            response: data,\n            status: 'success',\n            statusCode: '200',\n            readyState: 4,\n            statusText: 'OK',\n            responseText: false // So it will use response instead of responseText\n        }\n    ]);\n\n    // Stores this fake promice in the cache\n    Backbone.localCache[url] = data;\n}\n\n// @class Backbone.CachedModel @method isCached @param {Object} params @return {Boolean}\n// @class Backbone.CachedCollection @method isCached @param {Object} params @return {Boolean}\nfunction isCached(params) {\n    /* jshint validthis:true*/\n    // Generates an uninque url that will be used as the request identifier\n    const url = normalizeUrl(_.result(this, 'url'), params);\n    return !!Backbone.localCache[url];\n}\n\nfunction normalizeUrl(url, params) {\n    if (params) {\n        try {\n            const sorted = _.keys(params).sort();\n            const sorted_params = [];\n            for (let i = 0; i < sorted.length; i++) {\n                sorted_params.push(sorted[i] + '=' + params[sorted[i]]);\n            }\n            const question_pos = url.indexOf('?');\n\n            url += (question_pos > 0 ? '&' : '?') + sorted_params.join('&');\n        } catch (e) {\n            url += (~url.indexOf('?') ? '&' : '?') + jQuery.param(params);\n        }\n    }\n    return url;\n}\n\nexport = {\n    cachedSync: Backbone.cachedSync,\n    addToCache: addToCache,\n    isCached: isCached\n};\n"]}