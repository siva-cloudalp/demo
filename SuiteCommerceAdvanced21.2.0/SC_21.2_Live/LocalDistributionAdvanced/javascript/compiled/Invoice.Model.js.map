{"version":3,"sources":["Invoice.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IASF,SAAS,eAAe,CAAC,KAAK;QAC1B,KAAK,GAAG,UAAU,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAEnD,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YACd,OAAO,KAAK,CAAC,SAAS,CAAC,yCAAyC,CAAC,CAAC;SACrE;QACD,IAAI,KAAK,IAAI,CAAC,EAAE;YACZ,OAAO,KAAK,CAAC,SAAS,CAAC,wCAAwC,CAAC,CAAC;SACpE;QACD,2BAA2B;QAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC,SAAS,CAAC,+CAA+C,CAAC,CAAC;SAC3E;IACL,CAAC;IAED,+CAA+C;IAC/C,IAAM,YAAY,GAAQ,gBAAgB,CAAC,MAAM,CAAC;QAC9C,6BAA6B;QAC7B,OAAO,EAAE,6BAA6B;QAEtC,gCAAgC;QAChC,UAAU,EAAE;YACR,MAAM,EAAE,EAAE,EAAE,EAAE,eAAe,EAAE;SAClC;QAED,kGAAkG;QAClG,YAAY,EAAE,IAAI;QAElB,qBAAqB;QACrB,UAAU,EAAE,UAAS,UAAU;YAC3B,kEAAkE;YAClE,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE7D,IAAI,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAS,KAAK,EAAE,WAAW;gBACrD,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,qBAAqB,CAAC,WAAW,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3F,CAAC;QAED,oBAAoB;QACpB,SAAS,EAAE;YACP,IAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;aAC7D;YACD,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,YAAY,CAAC","file":"Invoice.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Invoice.Model\"/>\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nimport TransactionCollection = require('../../../Commons/Transaction/JavaScript/Transaction.Collection');\nimport TransactionModel = require('../../../Commons/Transaction/JavaScript/Transaction.Model');\n\nfunction validatePayment(value): string {\n    value = parseFloat((value + '').replace(',', '.'));\n\n    if (isNaN(value)) {\n        return Utils.translate('The amount to pay is not a valid number');\n    }\n    if (value <= 0) {\n        return Utils.translate('The amount to apply has to be positive');\n    }\n    /* jshint validthis:true */\n    if (value > this.get('due')) {\n        return Utils.translate('The amount to pay cannot exceed the remaining');\n    }\n}\n\n// @class Invoice.Model @extends Backbone.Model\nconst InvoiceModel: any = TransactionModel.extend({\n    // @property {String} urlRoot\n    urlRoot: 'services/Invoice.Service.ss',\n\n    // @property {Object} validation\n    validation: {\n        amount: { fn: validatePayment }\n    },\n\n    // @property {Boolean} cacheSupport enable or disable the support for cache (Backbone.CachedModel)\n    cacheSupport: true,\n\n    // @method initialize\n    initialize: function(attributes): void {\n        // call the initialize of the parent object, equivalent to super()\n        TransactionModel.prototype.initialize.apply(this, arguments);\n\n        this.on('change:adjustments', function(model, adjustments) {\n            model.set('adjustments', new TransactionCollection(adjustments), { silent: true });\n        });\n        this.trigger('change:adjustments', this, (attributes && attributes.adjustments) || []);\n    },\n\n    // @method isPayFull\n    isPayFull: function(): boolean {\n        if (this.get('discountapplies')) {\n            return this.get('amount') === this.get('duewithdiscount');\n        }\n        return this.get('amount') === this.get('due');\n    }\n});\n\nexport = InvoiceModel;\n"]}