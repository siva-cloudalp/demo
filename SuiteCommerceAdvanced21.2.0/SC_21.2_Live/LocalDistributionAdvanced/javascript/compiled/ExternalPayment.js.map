{"version":3,"sources":["ExternalPayment.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAOF,IAAM,eAAe,GAAQ;QACzB,UAAU,EAAE,UAAS,WAAW;YAApB,iBAyCX;YAxCG,IAAI,EAAE,CAAC,WAAW,CAAC,eAAe,IAAI,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,EAAE;gBAC7E,IAAM,QAAM,GACR,EAAE,CAAC,WAAW,CAAC,eAAe,IAAI,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC;gBAChF,IAAI,iBAAiB,SAAA,CAAC;gBAEtB,IAAI,CAAC,QAAM,CAAC,SAAS,EAAE;oBACnB,QAAQ,QAAM,CAAC,eAAe,EAAE;wBAC5B,KAAK,MAAM;4BACP,iBAAiB;gCACb,GAAG;oCACH,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,QAAM,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;yCAC5D,YAAY,CAAC;4BACtB,MAAM;wBACV,KAAK,MAAM;4BACP,iBAAiB;gCACb,GAAG;oCACH,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,QAAM,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;yCAC5D,YAAY,CAAC;4BACtB,MAAM;qBACb;oBAED,IAAI,iBAAiB,EAAE;wBACnB,OAAO,QAAM,CAAC,SAAS,CAAC;wBACxB,iBAAiB,GAAG,KAAK,CAAC,cAAc,CAAC,iBAAiB,EAAE,QAAM,CAAC,CAAC;wBACpE,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,iBAAiB,CAAC;qBAC5C;iBACJ;qBAAM,IAAI,QAAM,CAAC,SAAS,EAAE;oBACzB,IAAM,QAAM,GAAG,WAAW,CAAC,SAAS,EAAE,CAAC;oBACvC,QAAM,CAAC,IAAI,CACP,iBAAiB,EACjB;wBACI,QAAM,CAAC,aAAa,CAChB,KAAI,CAAC,eAAe,CAAC,QAAM,CAAC,SAAS,CAAC,EACtC,KAAK,CAAC,SAAS,CAAC,wBAAwB,CAAC,EACzC,KAAK,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAC5C,CAAC;oBACN,CAAC,CACJ,CAAC;iBACL;aACJ;QACL,CAAC;QAED,0BAA0B;QAC1B,6BAA6B;QAC7B,eAAe,EAAE,UAAS,UAAU;YAChC,IAAI,OAAO,CAAC;YACZ,QAAQ,UAAU,EAAE;gBAChB,KAAK,qCAAqC;oBACtC,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;oBACpD,MAAM;gBACV,KAAK,yCAAyC;oBAC1C,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;oBACjD,MAAM;gBACV,KAAK,sCAAsC;oBACvC,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,iDAAiD,CAAC,CAAC;oBAC7E,MAAM;gBACV,KAAK,2CAA2C;oBAC5C,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;oBACpD,MAAM;gBACV;oBACI,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;aACxD;YACD,OAAO,OAAO,CAAC;QACnB,CAAC;KACJ,CAAC;IAEF,OAAS,eAAe,CAAC","file":"ExternalPayment.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ExternalPayment\"/>\n// @module ExternalPayment\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nconst ExternalPayment: any = {\n    mountToApp: function(application) {\n        if (SC.ENVIRONMENT.EXTERNALPAYMENT && SC.ENVIRONMENT.EXTERNALPAYMENT.parameters) {\n            const params =\n                SC.ENVIRONMENT.EXTERNALPAYMENT && SC.ENVIRONMENT.EXTERNALPAYMENT.parameters;\n            let external_fragment;\n\n            if (!params.errorCode) {\n                switch (params.externalPayment) {\n                    case 'DONE':\n                        external_fragment =\n                            '#' +\n                            SC.CONFIGURATION.externalPayment[params.recordType.toUpperCase()]\n                                .doneFragment;\n                        break;\n                    case 'FAIL':\n                        external_fragment =\n                            '#' +\n                            SC.CONFIGURATION.externalPayment[params.recordType.toUpperCase()]\n                                .failFragment;\n                        break;\n                }\n\n                if (external_fragment) {\n                    delete params.errorCode;\n                    external_fragment = Utils.addParamsToUrl(external_fragment, params);\n                    window.location.hash = external_fragment;\n                }\n            } else if (params.errorCode) {\n                const layout = application.getLayout();\n                layout.once(\n                    'afterAppendView',\n                    (): void => {\n                        layout.internalError(\n                            this.getErrorMessage(params.errorCode),\n                            Utils.translate('External Payment Error'),\n                            Utils.translate('External Payment Error')\n                        );\n                    }\n                );\n            }\n        }\n    },\n\n    // @method getErrorMessage\n    // @param {String} error_code\n    getErrorMessage: function(error_code) {\n        let message;\n        switch (error_code) {\n            case 'externalPaymentValidationStatusFail':\n                message = Utils.translate('Invalid payment event.');\n                break;\n            case 'externalPaymentRequestInvalidParameters':\n                message = Utils.translate('Invalid parameters.');\n                break;\n            case 'externalPaymentMissingImplementation':\n                message = Utils.translate('Invalid external payment method implementation.');\n                break;\n            case 'externalPaymentRecordValidationStatusFail':\n                message = Utils.translate('Invalid record status.');\n                break;\n            default:\n                message = Utils.translate('Invalid error code.');\n        }\n        return message;\n    }\n};\n\nexport = ExternalPayment;\n"]}