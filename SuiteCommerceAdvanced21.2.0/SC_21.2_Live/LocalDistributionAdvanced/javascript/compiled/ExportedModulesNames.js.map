{"version":3,"sources":["ExportedModulesNames.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;;;;;;;;IAQF,SAAgB,cAAc,CAAC,UAAkB;QAC7C,IAAI,EAAE,CAAC,WAAW,CAAC,sBAAsB,EAAE;YACvC,EAAE,CAAC,WAAW,CAAC,0BAA0B,GAAG,EAAE,CAAC,WAAW,CAAC,0BAA0B,IAAI,EAAE,CAAC;YACtF,IAAA,KAIF,EAAE,CAAC,WAAW,EAHd,eAAe,qBAAA,EACf,sBAAsB,4BAAA,EACtB,0BAA0B,gCACZ,CAAC;YACnB,OAAO,CACH,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACxC,sBAAsB,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC/C,0BAA0B,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CACtD,CAAC;SACL;QACD,IAAI;YACA,IAAM,MAAM,GAAG,sBAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,UAAU,EAAE;gBACjD,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;oBACzB,IAAI,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,EAAE;wBAC3E,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,CAAC;qBAC/C;iBACJ;aACJ;iBAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;gBACrC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;aACrC;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,0DAA0D;YAC1D,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IA9BD,wCA8BC;IAED,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,sBAAsB,EAAE;QACxC,iBAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,gCAAgC,EAAE,CAAC,CAAC;KACjF;IAMD,SAAS,aAAa,CAAC,MAAyB,EAAE,IAAY;QAC1D,MAAM,CAAC,cAAc,kBAAO,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC,EAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1E,CAAC","file":"ExportedModulesNames.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ExportedModulesNames\"/>\n/// <reference path=\"../../Utilities/JavaScript/GlobalDeclarations.d.ts\"/>\n\nimport { Loggers } from '../../Loggers/JavaScript/Loggers';\nimport { requireModules } from '../../Utilities/JavaScript/Utils';\n\nexport function isModuleLoaded(moduleName: string): boolean {\n    if (SC.ENVIRONMENT.TEMPLATES_MODULE_NAMES) {\n        SC.ENVIRONMENT.EXTENSIONS_JS_MODULE_NAMES = SC.ENVIRONMENT.EXTENSIONS_JS_MODULE_NAMES || [];\n        const {\n            JS_MODULE_NAMES,\n            TEMPLATES_MODULE_NAMES,\n            EXTENSIONS_JS_MODULE_NAMES\n        } = SC.ENVIRONMENT;\n        return (\n            JS_MODULE_NAMES.indexOf(moduleName) > -1 ||\n            TEMPLATES_MODULE_NAMES.indexOf(moduleName) > -1 ||\n            EXTENSIONS_JS_MODULE_NAMES.indexOf(moduleName) > -1\n        );\n    }\n    try {\n        const module = requireModules(moduleName);\n        if (typeof module === 'object' && module.__esModule) {\n            for (let property in module) {\n                if (module.hasOwnProperty(property) && typeof module[property] === 'function') {\n                    setModuleName(module[property], moduleName);\n                }\n            }\n        } else if (typeof module === 'function') {\n            setModuleName(module, moduleName);\n        }\n    } catch (e) {\n        // console.log(`Couldn't load module ${moduleName} ${e}`);\n        return false;\n    }\n    return true;\n}\n\nif (!SC.ENVIRONMENT.TEMPLATES_MODULE_NAMES) {\n    Loggers.getLogger().info({ componentArea: 'REQUIRING_MODULE_FALLBACK_MODE' });\n}\n\ninterface AMDModuleFunction extends Function {\n    _AMDModuleName?: string[];\n}\n\nfunction setModuleName(module: AMDModuleFunction, name: string): void {\n    module._AMDModuleName = [...(module._AMDModuleName || []), ...[name]];\n}\n"]}