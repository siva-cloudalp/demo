{"version":3,"sources":["Content.ts"],"names":[],"mappings":"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","file":"Content.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Content\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\n\nimport '../../../Commons/Tracker/JavaScript/Tracker';\nimport * as _ from 'underscore';\nimport '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\n\nimport DataModels = require('./Content.DataModels');\nimport EnhancedViews = require('./Content.EnhancedViews');\nimport LandingPagesView = require('./Content.LandingPages.View');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// Integration to the Content Delivery Service Bundle\n\n// @class Content Overrides ```Layout:showContent``` and ```Layout:showInModal``` so it first fetch\n// content if any and then show views enhanced with content if any.\n// It also listen for any change in the url hash\n// and fetch for content if any correspond to the new url.\n// It also handles content of type 'merchandising'\n// and instantiate the LandingPages router @extends ApplicationModule\nconst Content: any = {\n    mountToApp: function(Application) {\n        if (!Configuration.get('cms.useCMS')) {\n            // Loads the URLs of the different pages in the content service,\n            // this needs to happened before the application starts, so some routes are registered\n            if (SC.ENVIRONMENT.CONTENT) {\n                DataModels.Urls.Collection.getInstance().reset(SC.ENVIRONMENT.CONTENT);\n                delete SC.ENVIRONMENT.CONTENT;\n\n                if (SC.ENVIRONMENT.DEFAULT_PAGE) {\n                    DataModels.Pages.Collection.getInstance().reset(SC.ENVIRONMENT.DEFAULT_PAGE);\n                    delete SC.ENVIRONMENT.DEFAULT_PAGE;\n                }\n            }\n\n            DataModels.Application = Application;\n\n            const Layout = Application.getLayout();\n            const show_content_wrapper = function(fn, view) {\n                const promise = jQuery.Deferred();\n                const args = arguments;\n\n                // Check the URL and loads the page definition if needed\n                DataModels.loadPage('/' + Backbone.history.fragment, function(page) {\n                    // override the title and page header of the view with the page returned\n                    EnhancedViews.overrideViewSettings(view, page);\n\n                    view.enhancedPage = true;\n\n                    // Calls the original function with all the parameters (slice to exclude fn)\n                    fn.apply(Layout, Array.prototype.slice.call(args, 1)).done(function() {\n                        // once the original function is done this reads the attributes of the view and\n                        // sets title, metas and adds banners\n                        EnhancedViews.enhancePage(view, Layout);\n\n                        // only after enhancing the view we resolve the promise\n                        promise.resolveWith(this, arguments);\n                    });\n                });\n\n                return promise;\n            };\n\n            // Wraps the layout.showContent and Layout.showInModal methods\n            // This make sure that every time you try to show content in the\n            // application the page will be enhanced by setting title, header, meta tags and banners\n            Layout.showContent = _.wrap(Layout.showContent, show_content_wrapper);\n            Layout.showInModal = _.wrap(Layout.showInModal, show_content_wrapper);\n\n            Layout.on('renderEnhancedPageContent', function(view, content_zone) {\n                if (content_zone.contenttype === 'html') {\n                    EnhancedViews.renderHTMLContent(view, content_zone);\n                } else if (content_zone.contenttype === 'merchandising') {\n                    EnhancedViews.previousPlaceholders.push(content_zone.target);\n                }\n            });\n\n            Application.on('afterModulesLoaded', function() {\n                let query = '';\n                const pageType = Application.getComponent('PageType');\n\n                pageType.registerPageType({\n                    name: 'landing-page',\n                    defaultTemplate: {\n                        name: 'landing_page.tpl',\n                        displayName: 'Landing Page Default',\n                        thumbnail: '/path/to/landing_page_tpl.png'\n                    }\n                });\n\n                _.each(DataModels.Urls.Collection.getInstance().landingPages, function(\n                    landing_page: any\n                ) {\n                    query =\n                        landing_page.get('query')[0] === '/'\n                            ? landing_page.get('query').substring(1)\n                            : landing_page.get('query');\n\n                    pageType.registerPageType({\n                        name: 'landing-page',\n                        routes: [query, query + '?*options'],\n                        view: LandingPagesView\n                    });\n                });\n            });\n\n            Application.on('afterStart', function() {\n                // Every time the URL changes we call the DataModels.loadPage,\n                // so if we need to load content from the server, the request starts as soon as possible,\n                // Probably while other Ajax request are being made\n                Backbone.history &&\n                    Backbone.history.on('all', function() {\n                        DataModels.loadPage('/' + Backbone.history.fragment);\n                    });\n\n                // After the application Starts we will do the same, since the URL have not changed yet\n                Backbone.history && DataModels.loadPage('/' + Backbone.history.fragment);\n            });\n        }\n    }\n};\n\nexport = Content;\n"]}