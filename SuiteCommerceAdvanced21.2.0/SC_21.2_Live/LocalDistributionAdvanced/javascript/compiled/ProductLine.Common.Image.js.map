{"version":3,"sources":["ProductLine.Common.Image.ts"],"names":[],"mappings":"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","file":"ProductLine.Common.Image.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductLine.Common.Image\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\n// @class ProductLine.Common.Image\nexport = {\n    // @method filterImages Given the tree-like object returned by\n    // the Search API containing the item's images and a group of options,\n    // filters the item images\n    // @param {Object} item_images_detail\n    // @param {Array<String>} image_option_filters\n    // @return {Object} The same input parameters filtered based on the current\n    // selection of the line/product taking into account the image option filters\n    filterImages: function filterImages(item_images_detail, image_option_filters) {\n        const self = this;\n        let images_container = item_images_detail;\n        let selected_option_filter;\n\n        _.each(image_option_filters, function(image_filter) {\n            selected_option_filter = self.get('options').findWhere({ cartOptionId: image_filter });\n\n            // if the option/dimension has a value set\n            if (\n                selected_option_filter &&\n                selected_option_filter.get('value') &&\n                selected_option_filter.get('value').label\n            ) {\n                const label = selected_option_filter.get('value').label.toLowerCase();\n\n                _.each(images_container, function(value, key: any) {\n                    if (key.toLowerCase() === label) {\n                        images_container = value;\n                    }\n                });\n            }\n        });\n\n        return images_container;\n    },\n\n    // @method getThumbnail Gets the thumbnail for the model based on the current selection\n    // @return {ImageContainer}\n    getThumbnail: function getThumbnail() {\n        const item = this.get('item');\n        let item_images_detail = item.get('itemimages_detail') || {};\n        const image_filters = Configuration.get('productline.multiImageOption', []);\n        let images = [];\n        let images_container = {};\n\n        if (\n            _.isEqual(item_images_detail, {}) &&\n            item.get('_matrixParent').get('internalid') &&\n            item.get('_matrixParent').get('itemimages_detail')\n        ) {\n            item_images_detail = item.get('_matrixParent').get('itemimages_detail');\n        }\n\n        // If you generate a thumbnail position in the itemimages_detail it will be used\n        if (item_images_detail.thumbnail) {\n            images_container = this.filterImages(item_images_detail.thumbnail, image_filters);\n\n            images = Utils.imageFlatten(images_container);\n\n            return item.getFirstImage(images) || item_images_detail.thumbnail;\n        }\n        if (SC.ENVIRONMENT.siteType === 'STANDARD') {\n            return item.getThumbnail();\n        }\n        item_images_detail = item_images_detail.media || item_images_detail;\n        images_container = this.filterImages(item_images_detail, image_filters);\n        images = Utils.imageFlatten(images_container);\n\n        return images.length\n            ? // If you using the advance images features it will grab the 1st one\n              item.getFirstImage(images)\n            : // still nothing? image the not available\n              {\n                  url: Utils.getThemeAbsoluteUrlOfNonManagedResources(\n                      'img/no_image_available.jpeg',\n                      Configuration.get('imageNotAvailable')\n                  ),\n                  altimagetext: item.get('_name')\n              };\n    }\n};\n"]}