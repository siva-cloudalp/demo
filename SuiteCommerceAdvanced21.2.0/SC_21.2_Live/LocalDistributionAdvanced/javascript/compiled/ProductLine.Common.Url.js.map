{"version":3,"sources":["ProductLine.Common.Url.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAaF,gCAAgC;IAChC,IAAM,oBAAoB,GAAG;QACzB,qDAAqD;QACrD,wBAAwB,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;QAEjD,eAAe,EAAE,IAAI,eAAe,EAAE;QAEtC,iBAAiB,EAAE,IAAI,eAAe,EAAE;QAExC,4FAA4F;QAC5F,uKAAuK;QACvK,mBAAmB;QACnB,QAAQ,EAAE,SAAS,QAAQ,CAAC,sBAAsB;YAC9C,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAM,UAAU,GAAG,IAAI,CAAC;YACxB,IAAM,wBAAwB,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,UACrE,SAAS;gBAET,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;YAClF,CAAC,CAAC,CAAC;YACH,IAAI,cAAc,GAAiB,CAAC,CAAC,GAAG,CAAC,wBAAwB,EAAE,UAAS,SAAS;gBACjF,oCAAoC;gBACpC,OAAO;oBACH,wBAAwB;oBACxB,KAAK,EAAE,SAAS;oBAChB,wBAAwB;oBACxB,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC;iBACnC,CAAC;gBACF,uBAAuB;YAC3B,CAAC,CAAC,CAAC;YAEH,cAAc,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;YAEhE,cAAc;gBACV,oBAAoB,CAAC,eAAe,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,cAAc,CAAC;YAE5F,CAAC,CAAC,IAAI,CAAC,sBAAsB,IAAI,EAAE,EAAE,UAAS,KAAY,EAAG,SAAiB;gBAC1E,IAAM,kBAAkB,GAAG,CAAC,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;gBAE7E,IAAI,kBAAkB,EAAE;oBACpB,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;wBACjB,mBAAmB;wBACnB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC3E;yBAAM;wBACH,iBAAiB;wBACjB,kBAAkB,CAAC,KAAK,GAAG,KAAK,CAAC;qBACpC;iBACJ;qBAAM,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;oBACzB,kBAAkB;oBAClB,cAAc,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAE,SAAS;wBAChB,KAAK,EAAE,KAAK;qBACf,CAAC,CAAC;iBACN;YACL,CAAC,CAAC,CAAC;YAEH,+EAA+E;YAC/E,iGAAiG;YACjG,+DAA+D;YAC/D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,UAAS,KAAa,EAAC,IAAY;gBAC7E,IAAM,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAElD,IACI,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,UAAS,SAAS;oBACpC,OAAO,SAAS,CAAC,KAAK,CAAC;gBAC3B,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvB,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EACrC;oBACE,cAAc,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAE,IAAI;wBACX,KAAK,EAAE,KAAK;qBACf,CAAC,CAAC;iBACN;YACL,CAAC,CAAC,CAAC;YAEH,IAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YAEpE,KAAK,GAAG,CAAC,CAAC,MAAM,CACZ,aAAa,EACb,UAAS,QAAQ,EAAE,MAAW;gBAC1B,OAAO,qBAAS,CAAC,eAAe,CAC5B,QAAQ,EACR,MAAM,CAAC,KAAK,EACZ,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CACnC,CAAC;YACN,CAAC,EACD,KAAK,CACR,CAAC;YAEF,OAAO,KAAK,CAAC;QACjB,CAAC;QAED,sGAAsG;QACtG,uKAAuK;QACvK,mBAAmB;QACnB,WAAW,EAAE,SAAS,WAAW,CAAC,sBAAsB;YACpD,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;QAChF,CAAC;QAED,kHAAkH;QAClH,yIAAyI;QACzI,0FAA0F;QAC1F,4DAA4D;QAC5D,8CAA8C;QAC9C,yBAAyB,EAAE,SAAS,yBAAyB,CAAC,cAAc;YACxE,IAAM,iBAAiB,GAAG,CAAC,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;YAE5E,IAAI,iBAAiB,EAAE;gBACnB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;gBAEvE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAS,MAAM;oBACpC,IAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;wBACrB,cAAc,CAAC,IAAI,CAAC;4BAChB,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC;4BACrC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;gCAC/B,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK;gCAC3B,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,UAAU;yBACvC,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC,CAAC;aACN;YAED,OAAO,cAAc,CAAC;QAC1B,CAAC;QAED,oIAAoI;QACpI,sFAAsF;QACtF,kKAAkK;QAClK,uKAAuK;QACvK,mBAAmB;QACnB,WAAW,EAAE,SAAS,WAAW,CAAC,sBAAsB;YACpD,IAAM,GAAG,GAAW,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;YAC7D,IAAM,eAAe,GAAG;gBACpB,IAAI,EAAE,GAAG;aACZ,CAAC;YAEF,IAAI,EAAE,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,KAAK,UAAU,EAAE;gBACrD,CAAC,CAAC,MAAM,CAAC,eAAe,EAAE;oBACtB,IAAI,EAAE;wBACF,UAAU,EAAE,MAAM;wBAClB,OAAO,EACH,6BAAa,CAAC,GAAG,CAAC,mBAAmB,CAAC,KAAK,MAAM;4BAC7C,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC;4BACzB,CAAC,CAAC,GAAG;qBAChB;iBACJ,CAAC,CAAC;aACN;YAED,OAAO,KAAK,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;QACrD,CAAC;QAED,uFAAuF;QACvF,oCAAoC;QACpC,iBAAiB;QACjB,iBAAiB,EAAE,SAAS,iBAAiB,CAAC,OAAO;YACjD,IAAM,IAAI,GAAG,IAAI,CAAC;YAElB,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;YACxB,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;YAClD,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAExE,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,OAAO,CAAC;YAEtF,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,UAAS,KAAK,EAAE,IAAY;gBACxC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,IAAI,CAAC,EAAE;oBAC5E,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACzB;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,qIAAqI;QACrI,8HAA8H;QAC9H,mHAAmH;QACnH,2CAA2C;QAC3C,6BAA6B;QAC7B,yBAAyB,EAAE,SAAS,yBAAyB,CAAC,cAAc;YACxE,IAAM,IAAI,GAAG,IAAI,CAAC;YAElB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAS,MAAM;gBACpC,IAAI,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,EAAE;oBAChD,IAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACvE,IAAI,qBAAqB,SAAA,CAAC;oBAE1B,2EAA2E;oBAC3E,OAAO,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAEtD,IAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;wBAC9B,qBAAqB,GAAG,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;4BACtD,KAAK,EAAE,eAAe;yBACzB,CAAC,CAAC;wBACH,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,qBAAqB;4BAC9D,CAAC,CAAC,qBAAqB,CAAC,UAAU;4BAClC,CAAC,CAAC,eAAe,CAAC;qBACzB;yBAAM;wBACH,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,eAAe,CAAC;qBAChE;oBACD,IAAI,CAAC,SAAS,CACV,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,EAC1B,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAC7C,CAAC;iBACL;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QAC1B,CAAC;KACJ,CAAC;IAEF,OAAS,oBAAoB,CAAC","file":"ProductLine.Common.Url.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductLine.Common.Url\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\n\nimport * as _ from 'underscore';\nimport { UrlParams } from '../../Utilities/JavaScript/Utils.Interfaces';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport { UrlHelper } from '../../UrlHelper/JavaScript/UrlHelper';\nimport PluginContainer = require('../../PluginContainer/JavaScript/PluginContainer');\n\n// @class ProductLine.Common.Url\nconst ProductLineCommonUrl = {\n    // @property {Array<String>} attributesReflectedInURL\n    attributesReflectedInURL: ['options', 'quantity'],\n\n    preURLGenerated: new PluginContainer(),\n\n    preItemSetFromURL: new PluginContainer(),\n\n    // @method getQuery Generates a string query with all the parameters of the current line set\n    // @param {Dictionary<String, String?>} parameters_to_override Object where each key indicate a parameter value to override or null if the parameter want to be removed\n    // @return {String}\n    getQuery: function getQuery(parameters_to_override) {\n        let query = '';\n        const line_model = this;\n        const attributes_to_map_in_url = _.filter(_.keys(line_model.attributes), function(\n            attribute\n        ) {\n            return !!~_.indexOf(ProductLineCommonUrl.attributesReflectedInURL, attribute);\n        });\n        let all_parameters : UrlParams[] = _.map(attributes_to_map_in_url, function(attribute) {\n            // @class Product.Model.URLParameter\n            return {\n                // @param {String} param\n                param: attribute,\n                // @param {String} value\n                value: line_model.get(attribute)\n            };\n            // @class Product.Model\n        });\n\n        all_parameters = this.mapOptionsToURLParameters(all_parameters);\n\n        all_parameters =\n            ProductLineCommonUrl.preURLGenerated.executeAll(all_parameters, this) || all_parameters;\n\n        _.each(parameters_to_override || {}, function(value:string , parameter: string) {\n            const selected_parameter = _.findWhere(all_parameters, { param: parameter });\n\n            if (selected_parameter) {\n                if (_.isNull(value)) {\n                    // Remove parameter\n                    all_parameters.splice(_.indexOf(all_parameters, selected_parameter), 1);\n                } else {\n                    // Override value\n                    selected_parameter.value = value;\n                }\n            } else if (!_.isNull(value)) {\n                // New extra value\n                all_parameters.push({\n                    param: parameter,\n                    value: value\n                });\n            }\n        });\n\n        // This loop maintain the parameters that are set in the first call to the URL.\n        // When the URL is generated again with the options that are modified on the page, the parameters\n        // that are not in the options are added at the end of the URL.\n        _.each(Utils.parseUrlOptions(location.search),function(value: string,name: string) {\n            const removedOptions = _.keys(line_model.changed);\n\n            if (\n                _.map(all_parameters, function(attribute) {\n                    return attribute.param;\n                }).indexOf(name) === -1 &&\n                removedOptions.indexOf(name) === -1\n            ) {\n                all_parameters.push({\n                    param: name,\n                    value: value\n                });\n            }\n        });\n\n        const params_to_set = _.filter(all_parameters, _.property('value'));\n\n        query = _.reduce(\n            params_to_set,\n            function(memo_url, option: any) {\n                return UrlHelper.setUrlParameter(\n                    memo_url,\n                    option.param,\n                    encodeURIComponent(option.value)\n                );\n            },\n            query\n        );\n\n        return query;\n    },\n\n    // @method generateURL Generates a string URL to a PDP with all the parameters of the current line set\n    // @param {Dictionary<String, String?>} parameters_to_override Object where each key indicate a parameter value to override or null if the parameter want to be removed\n    // @return {String}\n    generateURL: function generateURL(parameters_to_override) {\n        return this.get('item').get('_url') + this.getQuery(parameters_to_override);\n    },\n\n    // @method mapOptionsToURLParameters This method make the invert behavior as the method mapURLParametersToOptions.\n    // It is called when a URL for the current line is required and based on the current configuration and the options set it generate a list\n    // of parameters values that will be reduced into the URL string by the method generateURL\n    // @param {Array<Product.Model.URLParameter>} all_parameters\n    // @return {Array<Product.Model.URLParameter>}\n    mapOptionsToURLParameters: function mapOptionsToURLParameters(all_parameters) {\n        const options_parameter = _.findWhere(all_parameters, { param: 'options' });\n\n        if (options_parameter) {\n            all_parameters.splice(_.indexOf(all_parameters, options_parameter), 1);\n\n            this.get('options').each(function(option) {\n                if (option.get('value')) {\n                    all_parameters.push({\n                        param: option.get('urlParameterName'),\n                        value: option.get('useLabelsOnUrl')\n                            ? option.get('value').label\n                            : option.get('value').internalid\n                    });\n                }\n            });\n        }\n\n        return all_parameters;\n    },\n\n    // @method getFullLink Generates a String ready to be used to a link for a PDP. In difference to the method generateURL, getFullLink\n    // returns a string that contains the value of href, data-hashtag and data-touchpoint.\n    // output example: href=\"/Californium-Mtr?internalid=910_1&amp;quantity=2\" data-touchpoint=\"home\" data-hashtag=\"#/Californium-Mtr?internalid=910_1&amp;quantity=2\"\n    // @param {Dictionary<String, String?>} parameters_to_override Object where each key indicate a parameter value to override or null if the parameter want to be removed\n    // @return {Object}\n    getFullLink: function getFullLink(parameters_to_override) {\n        const url: string = this.generateURL(parameters_to_override);\n        const link_attributes = {\n            href: url\n        };\n\n        if (SC.ENVIRONMENT.siteSettings.sitetype === 'ADVANCED') {\n            _.extend(link_attributes, {\n                data: {\n                    touchpoint: 'home',\n                    hashtag:\n                        Configuration.get('currentTouchpoint') !== 'home'\n                            ? encodeURIComponent(url)\n                            : url\n                }\n            });\n        }\n\n        return Utils.objectToAtrributes(link_attributes);\n    },\n\n    // @method setOptionsFromURL Given a URL query string, it sets the options in the model\n    // @param {ParameterOptions} options\n    // @return {Void}\n    setOptionsFromURL: function setOptionsFromURL(options) {\n        const self = this;\n\n        options = options || {};\n        options = this.mapURLParametersToOptions(options);\n        options.quantity && (options.quantity = parseInt(options.quantity, 10));\n\n        options = ProductLineCommonUrl.preItemSetFromURL.executeAll(options, self) || options;\n\n        _.each(options, function(value, name: string) {\n            if (value && !!~_.indexOf(ProductLineCommonUrl.attributesReflectedInURL, name)) {\n                self.set(name, value);\n            }\n        });\n    },\n\n    // @method mapURLParametersToOptions Map parameters from URL to its real/internal value. This is needed as based on the configuration\n    // it is possible to show in the URL the label of the options and the string of the selected value instead of the internal id.\n    // Something like: /item-name?color=red or /item-name?custcol3=2 are both valid urls depending on the configuration\n    // @param {ParameterOptions} url_parameters\n    // @return {ParameterOptions}\n    mapURLParametersToOptions: function mapURLParametersToOptions(url_parameters) {\n        const self = this;\n\n        this.get('options').each(function(option) {\n            if (url_parameters[option.get('urlParameterName')]) {\n                const aux_param_value = url_parameters[option.get('urlParameterName')];\n                let selected_option_value;\n\n                // Clean URL parameter based on URL option to change to option cartOptionId\n                delete url_parameters[option.get('urlParameterName')];\n\n                if (option.get('useLabelsOnUrl')) {\n                    selected_option_value = _.findWhere(option.get('values'), {\n                        label: aux_param_value\n                    });\n                    url_parameters[option.get('cartOptionId')] = selected_option_value\n                        ? selected_option_value.internalid\n                        : aux_param_value;\n                } else {\n                    url_parameters[option.get('cartOptionId')] = aux_param_value;\n                }\n                self.setOption(\n                    option.get('cartOptionId'),\n                    url_parameters[option.get('cartOptionId')]\n                );\n            }\n        });\n\n        return url_parameters;\n    }\n};\n\nexport = ProductLineCommonUrl;\n"]}