{"version":3,"sources":["LiveOrder.Model.ts"],"names":[],"mappings":"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","file":"LiveOrder.Model.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"LiveOrder.Model\"/>\n// @module LiveOrder\n\nimport * as _ from 'underscore';\nimport { Loggers } from '../../Loggers/JavaScript/Loggers';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { ItemTrack } from '../../Instrumentation/JavaScript/APMTrackerParameters';\nimport * as InstrumentationAddToCart from '../../Instrumentation/JavaScript/InstrumentationAddToCart';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\nimport { AjaxRequestsKiller } from '../../AjaxRequestsKiller/JavaScript/AjaxRequestsKiller';\nimport { ProfileModel } from '../../Profile/JavaScript/Profile.Model';\n\nimport TransactionModel = require('../../Transaction/JavaScript/Transaction.Model');\nimport TransactionShipmethodCollection = require('../../Transaction/JavaScript/Transaction.Shipmethod.Collection');\nimport LiveOrderLineCollection = require('../../LiveOrder/JavaScript/LiveOrder.Line.Collection');\nimport LiveOrderLineModel = require('../../LiveOrder/JavaScript/LiveOrder.Line.Model');\nimport Session = require('../../Session/JavaScript/Session');\nimport Singleton = require('../../Main/JavaScript/Singleton');\nimport Tracker = require('../../Tracker/JavaScript/Tracker');\n\n// @class LiveOrder.Model Model for showing information about an open order.\n// It is a singleton so you can obtain the instance fro anywhere by calling\n// ```LiveOrderModel.getInstance()```\n// @extends Transaction.Model\nconst ClassProperties = _.extend(\n    {\n        // @method loadCart\n        // @return {jQuery.Deferred}\n        // @static\n        loadCart: function() {\n            // if the Page Generator is on, do not fetch the cart. Instead, return an empty solved promise\n            if (_.result(SC, 'isPageGenerator')) {\n                return jQuery.Deferred().resolve();\n            }\n\n            const cart_instance = this.getInstance();\n\n            if (cart_instance.cartLoad) {\n                if (cart_instance.isLoading) {\n                    cart_instance.isLoading = false;\n                }\n            } else {\n                cart_instance.cartLoad = jQuery.Deferred();\n\n                ProfileModel.getPromise().done(function() {\n                    cart_instance\n                        .fetch()\n                        .done(function() {\n                            cart_instance.cartLoad.resolve.apply(this, arguments);\n                        })\n                        .fail(function() {\n                            cart_instance.cartLoad.reject.apply(this, arguments);\n                        })\n                        .always(function() {\n                            if (cart_instance.isLoading) {\n                                cart_instance.isLoading = false;\n                            }\n                        });\n                });\n            }\n\n            return cart_instance.cartLoad;\n        },\n        countItems: function(lines) {\n            let item_count = 0;\n\n            _.each(lines.models ? lines.models : lines, function(line: any) {\n                if (line.get('quantity')) {\n                    item_count += line.get('quantity');\n                }\n            });\n\n            return item_count;\n        }\n    },\n    Singleton\n);\n\nconst LiveOrderModel = TransactionModel.extend(\n    {\n        linesCollection: LiveOrderLineCollection,\n\n        validation: {\n            zip: { fn: Utils.validateZipCode }\n        },\n\n        // @method urlRoot\n        // @return {String}\n        urlRoot: function urlRoot() {\n            if (SC.SESSION.currency && SC.SESSION.currency.internalid) {\n                return Utils.getAbsoluteUrl(\n                    `services/LiveOrder.Service.ss?cur=${SC.SESSION.currency.internalid}`\n                );\n            }\n            return Utils.getAbsoluteUrl('services/LiveOrder.Service.ss');\n        },\n\n        // @method url redefine url to avoid possible cache problems from browser\n        // @return {Void}\n        url: function url() {\n            const base_url = TransactionModel.prototype.url.apply(this, arguments);\n            return `${base_url + (base_url.indexOf('?') > 0 ? '&' : '?')}t=${new Date().getTime()}`;\n        },\n\n        initialize: function initialize(attributes) {\n            // call the initialize of the parent object, equivalent to super()\n            TransactionModel.prototype.initialize.apply(this, arguments);\n\n            this.set('internalid', 'cart');\n\n            this.on('change:confirmation', function(model, confirmation) {\n                model.set('confirmation', new TransactionModel(confirmation), { silent: true });\n            });\n            this.trigger(\n                'change:confirmation',\n                this,\n                (attributes && attributes.confirmation) || {}\n            );\n\n            this.on('change:multishipmethods', function(model, multishipmethods) {\n                if (multishipmethods) {\n                    _.each(_.keys(multishipmethods), function(address_id) {\n                        multishipmethods[address_id] = new TransactionShipmethodCollection(\n                            multishipmethods[address_id],\n                            { silent: true }\n                        );\n                    });\n                }\n\n                model.set('multishipmethods', multishipmethods, { silent: true });\n            });\n            this.trigger(\n                'change:multishipmethods',\n                this,\n                (attributes && attributes.multishipmethods) || []\n            );\n\n            // Some actions in the live order may change the url of the checkout so to be sure we re send all the touchpoints\n            this.on('change:touchpoints', function(model, touchpoints) {\n                Session.set('touchpoints', touchpoints);\n            });\n            // metadata of the attribute options(custom fields)\n            if (\n                SC.ENVIRONMENT.customFieldsMetadata &&\n                SC.ENVIRONMENT.customFieldsMetadata.salesorder\n            ) {\n                this.__customFieldsMetadata = SC.ENVIRONMENT.customFieldsMetadata.salesorder;\n            }\n        },\n\n        // @method getLatestAddition\n        // @return {LiveOrder.Line.Model}\n        getLatestAddition: function getLatestAddition() {\n            let model = null;\n\n            if (this.get('latest_addition')) {\n                model = this.get('lines').get(this.get('latest_addition'));\n            }\n\n            if (!model && this.get('lines').length) {\n                model = this.get('lines').at(0);\n            }\n\n            return model;\n        },\n\n        // @method findItemInCart Algorithm to search an line in the cart. We can't use internalid only because for matrix items, the internalid change when is added to the cart\n        // @param {Transaction.Line.Model} line\n        // @return {LiveOrder.Line.Model}\n        findLine: function findLine(line) {\n            return this.get('lines').find(function(cart_line) {\n                return cart_line.isEqual(line);\n            });\n        },\n\n        // @method addLines Add the passed in collection of products as new lines to the Cart\n        // @param {Array<TransactionLineModel|LiveOrder.Line.Collection>} lines\n        // @return {jQuery.Deferred}\n        addLines: function addLines(lines) {\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.addLines', lines).then(function() {\n                lines =\n                    lines instanceof LiveOrderLineCollection\n                        ? lines\n                        : new LiveOrderLineCollection(lines);\n\n                // As the LiveOrder.Live.Service IS NOT REST we cannot use lines.save,\n                // instead we directly call lines.sync\n                const old_lines = self.get('lines').clone();\n                const promise = lines.sync('create', lines, {\n                    killerId: AjaxRequestsKiller.getKillerId()\n                });\n\n                promise.done(function(attributes) {\n                    // Though this should be a restful api, the live-order-line returns the full\n                    // live-order back (lines and summary are interconnected)\n\n                    self.set(attributes);\n\n                    Tracker.getInstance().trackAddToCart(\n                        self.get('lines').get(self.get('latest_addition'))\n                    );\n\n                    Tracker.getInstance().trackCartUpdate(self.get('lines'));\n\n                    InstrumentationAddToCart.addOperationIdToCartLine(\n                        self.get('lines').models,\n                        lines\n                    );\n                    self.cancelableTrigger(\n                        'after:LiveOrder.addLines',\n                        old_lines,\n                        self.get('lines').clone()\n                    );\n                });\n\n                return promise;\n            });\n        },\n\n        // @method addLine\n        // @param {Transaction.Line.Model} line\n        // @return {jQuery.Deferred}\n        addLine: function addLine(line) {\n            return this.addLines([line]);\n        },\n\n        // @method addProduct\n        // @param {Product.Model} line\n        // @return {jQuery.Deferred}\n        addProduct: function addProduct(product) {\n            return this.addLine(LiveOrderLineModel.createFromProduct(product));\n        },\n\n        // @method addProducts\n        // @param {Array<Product.Model>} products\n        // @return {jQuery.Deferred}\n        addProducts: function addProducts(products) {\n            const lines = _.map(products, function(product) {\n                return LiveOrderLineModel.createFromProduct(product);\n            });\n\n            return this.addLines(lines);\n        },\n\n        // @method updateProduct\n        // @param {Product.Model} product\n        // @return {jQuery.Deferred}\n        updateProduct: function updateProduct(product) {\n            return this.updateLine(LiveOrderLineModel.createFromProduct(product));\n        },\n\n        // @method updateLine\n        // @param {Transaction.Line.Model} line\n        // @return {jQuery.Deferred}\n        updateLine: function updateLine(line, preventDefault) {\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.updateLine', line).then(function() {\n                // As the LiveOrder.Live.Service IS NOT REST we\n                // cannot use line.save, instead we directly call line.sync\n                return line\n                    .sync('update', line, {\n                        killerId: AjaxRequestsKiller.getKillerId(),\n                        validate: false,\n                        preventDefault: preventDefault\n                    })\n                    .done(function(attributes) {\n                        // Although this should be a restful api, the live-order-line returns\n                        // the full live-order back (lines and summary are interconnected)\n                        self.set(attributes);\n\n                        Tracker.getInstance().trackAddToCart(self.getLatestAddition());\n\n                        self.cancelableTrigger('after:LiveOrder.updateLine', line);\n                    })\n                    .fail(function(jqXhr) {\n                        let error_details = null;\n                        try {\n                            const response = JSON.parse(jqXhr.responseText);\n                            error_details = response.errorDetails;\n                        } finally {\n                            if (error_details && error_details.status === 'LINE_ROLLBACK') {\n                                const line = self.get('lines').get(error_details.oldLineId);\n\n                                if (line) {\n                                    line.set('internalid', error_details.newLineId);\n                                    self.trigger('LINE_ROLLBACK', line);\n                                }\n                            }\n                        }\n                    });\n            });\n        },\n\n        // @method removeLine\n        // @param {LiveOrder.Line.Model} line\n        // @return {jQuery.Deferred}\n        removeLine: function removeLine(line) {\n            const self = this;\n            const loggers = Loggers.getLogger();\n            const actionId = loggers.start('Remove from Cart');\n\n            return this.cancelableTrigger('before:LiveOrder.removeLine', line).then(function() {\n                const item: ItemTrack = InstrumentationAddToCart.itemToTrack(line);\n                return line\n                    .sync('delete', line, {\n                        killerId: AjaxRequestsKiller.getKillerId(),\n                        validate: false\n                    })\n                    .done(function(attributes) {\n                        self.set(attributes);\n                        loggers.end(actionId, {\n                            operationIds: line.getOperationIds(),\n                            status: 'success',\n                            itemId: item.itemId,\n                            itemQuantity: item.itemQuantity\n                        });\n\n                        self.cancelableTrigger('after:LiveOrder.removeLine', line);\n                    });\n            });\n        },\n\n        // @method submit invoked when the user place/submit the order\n        // @return {jQuery.Deferred}\n        submit: function submit() {\n            const loggers = Loggers.getLogger();\n            const actionId = loggers.start('Place Order');\n\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.submit').then(function() {\n                self.set('internalid', null);\n\n                const creditcard = self.get('paymentmethods').findWhere({ type: 'creditcard' });\n                const paypal = self.get('paymentmethods').findWhere({ type: 'paypal' });\n\n                if (creditcard && !creditcard.get('creditcard')) {\n                    self.get('paymentmethods').remove(creditcard);\n                }\n\n                if (paypal && !paypal.get('complete')) {\n                    self.get('paymentmethods').remove(paypal);\n                }\n\n                if (!self.shippingAddressIsRequired()) {\n                    self.unset('shipaddress', { silent: true });\n                    self.set('sameAs', false, { silent: true });\n                }\n                const beforeActionOperationIds = _.clone(self.getOperationIds());\n                // this value is needed because when the save finished\n                // the lines in the cart becomes 0 and we need the lines\n                // were bought\n                const lines = self.get('lines');\n                const cartLines = lines ? `${lines.length}` : '';\n\n                return self\n                    .save()\n                    .done(function(order) {\n                        let lastOperationIdIndex = self.getOperationIds().length;\n                        if (beforeActionOperationIds && beforeActionOperationIds.length > 0) {\n                            lastOperationIdIndex = beforeActionOperationIds.length;\n                        }\n                        const orderOperationIds = self.getLatestOperationIds(lastOperationIdIndex);\n                        loggers.end(actionId, {\n                            operationIds: orderOperationIds,\n                            status: 'success',\n                            transactionId: order.confirmation.internalid,\n                            cartLines\n                        });\n                        const suiteTaxEnabled = Configuration.get('siteSettings.isSuiteTaxEnabled');\n\n                        if (suiteTaxEnabled) {\n                            jQuery\n                                .get(\n                                    Utils.getAbsoluteUrl(\n                                        `services/SuiteTax.ss?internalid=${\n                                            order.confirmation.internalid\n                                        }&n=${SC.ENVIRONMENT.siteSettings.siteid}&domain=${\n                                            SC.ENVIRONMENT.shoppingDomain\n                                        }`,\n                                        true\n                                    )\n                                )\n                                .then(function(result) {\n                                    self.set('suitetaxes', _.isArray(result) ? result : []);\n                                });\n                        }\n\n                        self.cancelableTrigger('after:LiveOrder.submit', order.confirmation);\n                    })\n                    .fail(function() {\n                        loggers.end(actionId, {\n                            operationIds: self.getOperationIds(),\n                            status: 'fail'\n                        });\n                        self.set('internalid', 'cart');\n                    });\n            });\n        },\n\n        // @method save Override default save method to just return a resolved promise when the cart have already been saved.\n        // @return {jQuery.Deferred}\n        save: function save() {\n            if (this.get('confirmation') && this.get('confirmation').get('internalid')) {\n                return jQuery.Deferred().resolve();\n            }\n            return TransactionModel.prototype.save.apply(this, arguments);\n        },\n\n        // @method getTotalItemCount\n        // @return {Number}\n        getTotalItemCount: function getTotalItemCount() {\n            return _.reduce(\n                this.get('lines').pluck('quantity'),\n                function(memo, quantity) {\n                    return memo + (parseFloat(<any>quantity) || 1);\n                },\n                0\n            );\n        },\n\n        parse: function parse(_response, options) {\n            if (options && !options.parse) {\n                return;\n            }\n\n            return TransactionModel.prototype.parse.apply(this, arguments);\n        },\n\n        // @method getUnsetLines\n        // @returns {Array<Transaction.Line.Model>} the order's lines that have not set its addresses to Multi Ship To yet\n        getUnsetLines: function getUnsetLines() {\n            return this.get('lines').filter(function(line) {\n                return !line.get('shipaddress') && line.get('item').get('_isfulfillable');\n            });\n        },\n\n        // @method getNonShippableLines\n        // @returns {Array<Transaction.Line.Model>} the order's line that are NON Shippable\n        getNonShippableLines: function getNonShippableLines() {\n            return this.get('lines').filter(function(line) {\n                return !line.get('item').get('_isfulfillable');\n            });\n        },\n\n        // @method getSetLines\n        // @returns {Array<Transaction.Line.Model>} the list of lines already set its shipping address\n        getSetLines: function getSetLines() {\n            return this.get('lines').filter(function(line) {\n                return line.get('shipaddress') && line.get('item').get('_isfulfillable');\n            });\n        },\n\n        // @method getShippableLines\n        // @returns {Array<Transaction.Line.Model>} the order's line that are shippable without taking into account if their have or not set a shipaddress\n        getShippableLines: function getShippableLines() {\n            return this.get('lines').filter(function(line) {\n                return (\n                    line.get('item').get('_isfulfillable') &&\n                    line.get('fulfillmentChoice') !== 'pickup' &&\n                    line.get('quantity')\n                );\n            });\n        },\n\n        // @method getItemsIds\n        // @returns {Array<String>} an array containing the cart items ids\n        // @return {Array<String>}\n        getItemsIds: function getItemsIds() {\n            return this.get('lines').map(function(line) {\n                return line.get('item').get('internalid');\n            });\n        },\n\n        // @method getIfThereAreDeliverableItems Determines if at least one item is shippable\n        // @return {Boolean}\n        getIfThereAreDeliverableItems: function getIfThereAreDeliverableItems() {\n            return (\n                this.get('lines').length -\n                    this.getNonShippableLines().length -\n                    this.getPickupInStoreLines().length >\n                0\n            );\n        },\n\n        // @method shippingAddressIsRequired Checks if the shipping address is require and if all items in the order are non-shippable.\n        // @return {Boolean}\n        shippingAddressIsRequired: function shippingAddressIsRequired() {\n            return (\n                this.getIfThereAreDeliverableItems() &&\n                Configuration.get('siteSettings.requireshippinginformation', 'F') === 'T'\n            );\n        },\n\n        getPickupInStoreLines: function getPickupInStoreLines() {\n            const lines = [];\n            this.get('lines').each(function(line) {\n                if (line.get('fulfillmentChoice') === 'pickup') {\n                    lines.push(line);\n                }\n            });\n\n            return lines;\n        },\n\n        addPromotion: function addPromotion(promocode) {\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.addPromotion', {\n                code: promocode\n            }).then(function() {\n                const pre_promocodes = self.get('promocodes') || [];\n                const new_promocodes = pre_promocodes.concat([{ code: promocode }]);\n\n                return self\n                    .save({ promocodes: new_promocodes }, { preventDefault: true })\n                    .then(function() {\n                        const added_promocode = _.find(self.get('promocodes'), function(promo) {\n                            return (<any>promo).code === promocode;\n                        });\n\n                        // We kept the pre existing event\n                        self.trigger('promocodeUpdated', 'applied');\n                        self.cancelableTrigger('after:LiveOrder.addPromotion', added_promocode);\n\n                        return added_promocode;\n                    })\n                    .fail(function() {\n                        self.set('promocodes', pre_promocodes);\n                        self.trigger('apply_promocode_failed');\n                    })\n                    .always(function() {\n                        self.trigger('apply_promocode_finished');\n                    });\n            });\n        },\n\n        removePromotion: function removePromotion(promocode_internal_id) {\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.removePromotion', {\n                internalid: promocode_internal_id\n            }).then(function() {\n                let promocodes = self.get('promocodes') || [];\n\n                promocodes = _.reject(promocodes, function(promocode) {\n                    return (<any>promocode).internalid === promocode_internal_id;\n                });\n\n                return self\n                    .save({ promocodes: promocodes })\n                    .always(function() {\n                        self.trigger('remove_promocode_finished');\n                    })\n                    .pipe(function() {\n                        // We kept the pre existing event\n                        self.trigger('promocodeUpdated', 'removed');\n                        self.cancelableTrigger('after:LiveOrder.removePromotion', {\n                            internalid: promocode_internal_id\n                        });\n                    });\n            });\n        },\n\n        addPayment: function addPayment(payment_method, save) {\n            const self = this;\n\n            return this.cancelableTrigger('before:LiveOrder.addPayment', payment_method).pipe(\n                function() {\n                    try {\n                        TransactionModel.prototype.addPayment.apply(self, [payment_method]);\n\n                        let promise = jQuery.Deferred().resolve();\n                        if (save) {\n                            promise = self.save();\n                        }\n\n                        return promise.then(function() {\n                            self.cancelableTrigger('after:LiveOrder.addPayment', payment_method);\n                        });\n                    } catch (error) {\n                        return jQuery.Deferred().reject(error);\n                    }\n                }\n            );\n        },\n\n        setAddress: function setAddress(address_type, address_id, options, save) {\n            const self = this;\n            const address = {\n                id: address_id,\n                type: address_type\n            };\n\n            return this.cancelableTrigger('before:LiveOrder.setAddress', address).pipe(function() {\n                try {\n                    TransactionModel.prototype.setAddress.apply(self, [\n                        address_type,\n                        address_id,\n                        options\n                    ]);\n\n                    let promise = jQuery.Deferred().resolve();\n                    if (save) {\n                        promise = self.save();\n                    }\n\n                    return promise.then(function() {\n                        self.cancelableTrigger('after:LiveOrder.setAddress', address);\n                    });\n                } catch (error) {\n                    return jQuery.Deferred().reject(error);\n                }\n            });\n        },\n\n        setShipMethod: function setShipMethod(shipMethodId) {\n            return this.cancelableTrigger('before:LiveOrder.setShipMethod', shipMethodId).then(\n                () => {\n                    this.set('shipmethod', shipMethodId);\n                    return this.save().then(() => {\n                        const shippingMethod = _.find(\n                            this.get('shipmethods').toJSON(),\n                            (shipMethod: any) => shipMethod.internalid === shipMethodId\n                        );\n                        this.cancelableTrigger('after:LiveOrder.setShipMethod', shippingMethod);\n                        return shippingMethod;\n                    });\n                }\n            );\n        },\n\n        setPurchaseOrderNumber: function setPurchaseOrderNumber(purchaseNumber) {\n            return this.cancelableTrigger(\n                'before:LiveOrder.setPurchaseOrderNumber',\n                purchaseNumber\n            ).then(() => {\n                this.set('purchasenumber', purchaseNumber);\n                this.cancelableTrigger('after:LiveOrder.setPurchaseOrderNumber', purchaseNumber);\n            });\n        }\n    },\n    ClassProperties\n);\n\nexport = LiveOrderModel;\n"]}