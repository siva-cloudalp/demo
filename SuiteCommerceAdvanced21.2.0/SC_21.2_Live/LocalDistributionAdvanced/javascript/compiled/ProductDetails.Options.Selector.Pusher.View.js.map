{"version":3,"sources":["ProductDetails.Options.Selector.Pusher.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAQF,qDAAqD;IACrD,IAAM,uCAAuC,GAAQ,YAAY,CAAC,MAAM,CAAC;QACrE,gCAAgC;QAChC,QAAQ,EAAE,2CAA2C;QAErD,kCAAkC;QAClC,UAAU,EAAE;YACR,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACzD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC;QACD,qBAAqB;QACrB,yDAAyD;QACzD,UAAU,EAAE;YACR,IAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAEzD,sDAAsD;YACtD,OAAO;gBACH,iCAAiC;gBACjC,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,sGAAsG;gBACtG,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;gBACtD,2FAA2F;gBAC3F,kBAAkB,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM;gBAC7C,oEAAoE;gBACpE,eAAe,EAAE,gBAAgB;aACpC,CAAC;YACF,8CAA8C;QAClD,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,uCAAuC,CAAC","file":"ProductDetails.Options.Selector.Pusher.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductDetails.Options.Selector.Pusher.View\"/>\n\nimport * as product_details_options_selector_pusher_tpl from 'product_details_options_selector_pusher.tpl';\n\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\n\n// @class ProductDetails.Options.Selector.Pusher.View\nconst ProductDetailsOptionsSelectorPusherView: any = BackboneView.extend({\n    // @property {Function} template\n    template: product_details_options_selector_pusher_tpl,\n\n    // @property {Function} initialize\n    initialize: function() {\n        BackboneView.prototype.initialize.apply(this, arguments);\n        this.model.on('change', this.render, this);\n    },\n    // @method getContext\n    // @return {ProductDetails.Options.Selector.View.Context}\n    getContext: function() {\n        const selected_options = this.model.getSelectedOptions();\n\n        // @class ProductDetails.Options.Selector.View.Context\n        return {\n            // @property {ProductModel} model\n            model: this.model,\n            // @property {Boolean} isSelectionCompleted Indicate if at least all required options are properly set\n            isSelectionCompleted: this.model.isSelectionComplete(),\n            // @property {Boolean} hasSelectedOptions Indicate if the current line has options selected\n            hasSelectedOptions: !!selected_options.length,\n            // @property {Array<String>} selectedOptions List of selected values\n            selectedOptions: selected_options\n        };\n        // @class ProductDetails.Options.Selector.View\n    }\n});\n\nexport = ProductDetailsOptionsSelectorPusherView;\n"]}