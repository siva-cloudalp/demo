{"version":3,"sources":["FormView.ts"],"names":[],"mappings":"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","file":"FormView.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"FormView\"/>\n// @Typescript-full\n\nimport { View } from './View';\nimport { jQuery } from './jquery/JQueryExtras';\n\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Model } from './Model';\nimport { Application } from '../../ApplicationSkeleton/JavaScript/Application';\nimport { Environment } from './Environment';\nimport { PropertiesName } from './Types';\nimport { InferModelEntity, InferModelServiceContract } from './backbone/backbone';\nimport { ValidationErrors } from './Validator';\nimport { Error, Errors } from './Error';\n\ntype HelpMessages<TEntity> = Partial<{ [key in PropertiesName<TEntity>]: string }>;\nexport interface FormFieldError {\n    name: string;\n    error: string;\n}\n\nexport interface FormFieldsError<TEntity> extends Error {\n    errorCode: Errors.FormValidation;\n    errors: ValidationErrors<TEntity>;\n}\nexport type FormFieldValue<T> =\n    | { [K in PropertiesName<T>]: { name: K; value: T[K] } }[PropertiesName<T>]\n    | FormFieldError;\n\nexport abstract class FormView<\n    TModel extends Model<InferModelEntity<TModel>, InferModelServiceContract<TModel>, {}>,\n    TContext extends object,\n    TEvents extends object = {}\n> extends View<TContext, TEvents> {\n    protected formModel: TModel;\n    protected application: Application;\n    private readonly selectors = {\n        controlGroup: { attr: 'data-validation', value: 'control-group' },\n        control: { attr: 'data-validation', value: 'control' },\n        error: { attr: 'data-validation-error', value: '' },\n        errorInline: { attr: 'data-validation-error', value: 'inline' },\n        errorBlock: { attr: 'data-validation-error', value: 'block' },\n        field: { attr: 'name' },\n        build: (selectorName): string => {\n            const selector = this.selectors[selectorName];\n            return `[${selector.attr}=\"${selector.value}\"]`;\n        }\n    };\n\n    private readonly helpMessages: HelpMessages<InferModelEntity<TModel>> = {};\n\n    protected constructor(formModel: TModel) {\n        super();\n        this.formModel = formModel;\n        this.application = Environment.getApplication();\n    }\n\n    protected onFormFieldChange(event: JQuery.TriggeredEvent): void {\n        event.preventDefault();\n        const eventTarget = jQuery(event.target);\n        // removes back-end errors\n        this.application.getLayout().hideError();\n        const field = this.getFormFieldValue(eventTarget);\n        if ('error' in field) {\n            this.displayValidationError(field.name, field.error);\n        } else {\n            this.formModel.set(field.name, field.value);\n            this.handleErrorMessage(field.name);\n        }\n    }\n\n    /**\n     * Called by onFormFieldChange method\n     * @param changedInput\n     * @return the field name and value, the value will have the data type expected by the model,\n     * if error attribute is returned the error will be displayed\n     */\n    protected abstract getFormFieldValue(\n        changedInput: JQuery<HTMLElement>\n    ): FormFieldValue<InferModelEntity<TModel>>;\n\n    protected handleErrorMessage(field: PropertiesName<InferModelEntity<TModel>>): void {\n        const errors = this.formModel.getValidationErrors();\n        if (errors && field in errors) {\n            this.displayValidationError(field, errors[field]);\n        } else {\n            this.removeErrorMessage(field);\n        }\n    }\n\n    protected removeErrorMessage<E extends PropertiesName<InferModelEntity<TModel>>>(\n        field: E\n    ): void {\n        const $control = this.$el.find(`[${this.selectors.field.attr}=\"${field}\"]`);\n        // if its valid we remove the error classnames\n        const $group = $control\n            .closest(this.selectors.build('controlGroup'))\n            .removeAttr(this.selectors.error.attr);\n        const $target =\n            $control.data('error-style') === 'inline'\n                ? $group.find(this.selectors.build('errorInline'))\n                : $group.find(this.selectors.build('errorBlock'));\n\n        if (field in this.helpMessages) {\n            $target.text(this.helpMessages[field]);\n        }\n        // we also need to remove all of the error messages\n        $target.remove();\n    }\n\n    protected displayValidationError(attr: string, error: string): void {\n        let $target;\n        const $control = this.$el.find(`[${this.selectors.field.attr}=\"${attr}\"]`);\n        const $group = $control\n            .closest(this.selectors.build('controlGroup'))\n            .attr(this.selectors.error.attr, this.selectors.error.value);\n\n        if ($control.data('error-style') === 'inline') {\n            // if we don't have a place holder for the error\n            // we need to add it. $target will be the placeholder\n            if (!$group.find(this.selectors.build('errorInline')).length) {\n                $group\n                    .find(this.selectors.build('control'))\n                    .append(\n                        `<span ${this.selectors.errorInline.attr}=\"${\n                            this.selectors.errorInline.value\n                        }\"></span>`\n                    );\n            }\n\n            $target = $group.find(this.selectors.build('errorInline'));\n        } else {\n            // if we don't have a place holder for the error\n            // we need to add it. $target will be the placeholder\n            if (!$group.find(this.selectors.build('errorBlock')).length) {\n                $group\n                    .find(this.selectors.build('control'))\n                    .append(\n                        `<p ${this.selectors.errorBlock.attr}=\"${\n                            this.selectors.errorBlock.value\n                        }\"></p>`\n                    );\n            }\n\n            $target = $group.find(this.selectors.build('errorBlock'));\n        }\n\n        this.helpMessages[attr] = $target.text();\n\n        return $target.text(error);\n    }\n\n    protected displayValidationErrors(\n        validationErrors: ValidationErrors<InferModelEntity<TModel>> | null\n    ): void {\n        if (validationErrors) {\n            Object.keys(validationErrors).forEach(\n                (field): void => {\n                    this.displayValidationError(field, validationErrors[field]);\n                }\n            );\n        }\n    }\n    /**\n     * Call save method of \"formModel\" attribute. if saving goes ok then\n     * buttons are shown and if form is in a modal, it will be closed.\n     * if something goes wrong then re-enable the submit button and errors are displayed\n     *\n     * Typically this method will be attached to the submit event of a form like:\n     * getEvents(){return {'submit form': 'saveForm'}}\n     * @param event\n     */\n    protected saveForm(\n        event: JQuery.TriggeredEvent\n    ): JQuery.jqXHR<InferModelServiceContract<TModel>> | false {\n        event.preventDefault();\n        this.application.getLayout().hideError();\n        const $savingForm = jQuery(event.target).closest('form');\n        if ($savingForm.length) {\n            const formValues = this.getFormValues($savingForm);\n            if ('errorCode' in formValues) {\n                this.displayValidationErrors(formValues.errors);\n                this.focusOnFirstValidationError($savingForm);\n            } else {\n                const saveOperation = this.formModel.save(formValues, {\n                    wait: true\n                });\n                if (saveOperation) {\n                    // there aren't front-end validation errors\n                    this.changeControlButtonsToProcessingMode($savingForm);\n                    saveOperation\n                        .then(\n                            (): void => {\n                                this.application.getLayout().closeModal();\n                            }\n                        )\n                        .always(\n                            (): void => {\n                                this.restoreControlButtons($savingForm);\n                            }\n                        );\n                } else {\n                    this.displayValidationErrors(this.formModel.getValidationErrors());\n                    this.focusOnFirstValidationError($savingForm);\n                }\n                return saveOperation;\n            }\n        }\n        return false;\n    }\n\n    protected abstract getFormValues(\n        $savingForm: JQuery<HTMLElement>\n    ): Partial<InferModelEntity<TModel>> | FormFieldsError<InferModelEntity<TModel>>;\n\n    protected setSubmitButtonToProcessing($savingForm: JQuery<HTMLElement>): void {\n        $savingForm.find('[type=\"submit\"]').each(\n            (index: number, elem: HTMLElement): void => {\n                const element = jQuery(elem);\n                element.attr('disabled', 'disabled');\n                element.data('default-text', jQuery.trim(element.text()));\n                element.text(Utils.translate('Processing...'));\n            }\n        );\n    }\n\n    protected restoreSubmitButton($savingForm: JQuery<HTMLElement>): void {\n        $savingForm.find('[type=\"submit\"]').each(\n            (index: number, elem: HTMLElement): void => {\n                const element = jQuery(elem);\n                element.attr('disabled', null);\n                element.text(element.data('default-text'));\n            }\n        );\n    }\n\n    protected focusOnFirstValidationError($savingForm: JQuery<HTMLElement>): void {\n        const $firstInputError = $savingForm.find(`[${this.selectors.error.attr}]:first input`);\n        if ($firstInputError) {\n            const $controlGroup = $firstInputError.closest(this.selectors.build('controlGroup'));\n            if ($controlGroup.length) {\n                jQuery('body').animate(\n                    {\n                        scrollTop: $controlGroup.offset().top\n                    },\n                    600\n                );\n            }\n            $firstInputError.trigger('focus');\n        }\n    }\n    protected changeControlButtonsToProcessingMode($savingForm: JQuery<HTMLElement>): void {\n        $savingForm.find('input[type=\"reset\"], button[type=\"reset\"]').hide();\n        this.setSubmitButtonToProcessing($savingForm);\n    }\n    protected restoreControlButtons($savingForm: JQuery<HTMLElement>): void {\n        $savingForm.find('input[type=\"reset\"], button[type=\"reset\"]').show();\n        this.restoreSubmitButton($savingForm);\n    }\n}\n"]}