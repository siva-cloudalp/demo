{"version":3,"sources":["Quote.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAYuB,CAAC;IAM1B,gDAAgD;IACnC,QAAA,UAAU,GAAQ,gBAAgB,CAAC,MAAM,CAAC;QACnD,6BAA6B;QAC7B,OAAO,EAAE,+CAA+C;QAExD,UAAU,EAAE;YACR,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE7D,mDAAmD;YACnD,IAAI,EAAE,CAAC,WAAW,CAAC,oBAAoB,IAAI,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,EAAE;gBACrF,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC;aAC9E;QACL,CAAC;QAED,6EAA6E;QAC7E,4BAA4B;QAC5B,MAAM,EAAE;YAAA,iBA6BP;YA5BG,IAAM,OAAO,GAAG,iBAAO,CAAC,SAAS,EAAE,CAAC;YACpC,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAClD,IAAM,wBAAwB,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC,OAAO;iBACd,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;iBACtB,IAAI,CAAC,UAAS,KAAK;gBAChB,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;YAChC,CAAC,CAAC;iBACD,IAAI,CAAC,UAAA,KAAK;gBACP,IAAI,oBAAoB,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC;gBACzD,IAAI,wBAAwB,IAAI,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjE,oBAAoB,GAAG,wBAAwB,CAAC,MAAM,CAAC;iBAC1D;gBACD,IAAM,iBAAiB,GAAG,KAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;gBAC3E,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAI,KAAK,IAAI,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE;oBAC9D,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;iBACzD;gBACD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;oBAClB,YAAY,EAAE,iBAAiB;oBAC/B,MAAM,EAAE,SAAS;oBACjB,aAAa,EAAE,OAAO;iBACzB,CAAC,CAAC;gBACH,KAAI,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,gBAAgB,CAAC,KAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE;oBACrE,MAAM,EAAE,IAAI;iBACf,CAAC,CAAC;gBACH,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACX,CAAC;QACD,qHAAqH;QACrH,wCAAwC;QACxC,2EAA2E;QAC3E,IAAI,EAAE;YACF,IAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9D,IAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAE/D,uGAAuG;YACvG,8FAA8F;YAC9F,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;gBAC5D,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;aAC7B;YAED,sGAAsG;YACtG,6FAA6F;YAC7F,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;gBAC1D,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;aAC7B;YAED,uCAAuC;YACvC,+FAA+F;YAC/F,mDAAmD;YACnD,0FAA0F;YAC1F,wFAAwF;YACxF,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE;gBACnC,IAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAS,cAAc;oBAC9E,OAAO,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;gBAEH,IAAI,kBAAkB,EAAE;oBACpB,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;oBACxE,kBAAkB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;iBAC5C;aACJ;YAED,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAClE,CAAC;QAED,+EAA+E;QAC/E,2CAA2C;QAC3C,oBAAoB,EAAE;YAClB,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAS,IAAI;gBACzC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACP,CAAC;QAED,qFAAqF;QACrF,oBAAoB;QACpB,6BAA6B,EAAE,SAAS,6BAA6B;YACjE,OAAO,CACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM;gBACpB,IAAI,CAAC,oBAAoB,EAAE,CAAC,MAAM;gBAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC,MAAM;gBACvC,CAAC,CACJ,CAAC;QACN,CAAC;QACD,4BAA4B;QAC5B,kJAAkJ;QAClJ,iBAAiB,EAAE,SAAS,iBAAiB;YACzC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAS,IAAI;gBACzC,OAAO,CACH,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACtC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,KAAK,QAAQ;oBAC1C,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CACvB,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QACD,qBAAqB,EAAE,SAAS,qBAAqB;YACjD,IAAM,KAAK,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAS,IAAI;gBAChC,IAAI,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,KAAK,QAAQ,EAAE;oBAC5C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACjB,CAAC;QAED,gJAAgJ;QAChJ,oBAAoB;QACpB,yBAAyB,EAAE;YACvB,OAAO,IAAI,CAAC;YACZ,oCAAoC;YACpC,qEAAqE;YACrE,SAAS;QACb,CAAC;KACJ,CAAC,CAAC","file":"Quote.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Quote.Model\"/>\n/// <reference path=\"../../Utilities/JavaScript/GlobalDeclarations.d.ts\" />\n/// <reference path=\"../../Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as _ from 'underscore';\nimport { Loggers } from '../../Loggers/JavaScript/Loggers';\n\nimport TransactionModel = require('../../Transaction/JavaScript/Transaction.Model');\n\n//TODO: This interface has to be used as the entity type when migrating Quote.Model to Typescript\nexport interface Quote {};\n\nexport type QuoteModel = any;\n\nexport type QuoteLine = any;\n\n// @class Quote.Model @extends Transaction.Model\nexport const QuoteModel: any = TransactionModel.extend({\n    // @property {String} urlRoot\n    urlRoot: 'services/Quote.Service.ss?recordtype=estimate',\n\n    initialize: function(): void {\n        TransactionModel.prototype.initialize.apply(this, arguments);\n\n        // metadata of the attribute options(custom fields)\n        if (SC.ENVIRONMENT.customFieldsMetadata && SC.ENVIRONMENT.customFieldsMetadata.estimate) {\n            this.__customFieldsMetadata = SC.ENVIRONMENT.customFieldsMetadata.estimate;\n        }\n    },\n\n    // @method submit Method invoked when the user a new quote want to be created\n    // @return {jQuery.Deferred}\n    submit: function() {\n        const loggers = Loggers.getLogger();\n        const actionId = loggers.start('Request a Quote');\n        const beforeActionOperationIds = _.clone(this.operationIds);\n        return this._submit\n            .apply(this, arguments)\n            .fail(function(jqXhr) {\n                jqXhr.preventDefault = true;\n            })\n            .then(quote => {\n                let lastOperationIdIndex = this.getOperationIds().length;\n                if (beforeActionOperationIds && beforeActionOperationIds.length > 0) {\n                    lastOperationIdIndex = beforeActionOperationIds.length;\n                }\n                const quoteOperationIds = this.getLatestOperationIds(lastOperationIdIndex);\n                let quoteId = 0;\n                if (quote && quote.confirmation && quote.confirmation.internalid) {\n                    quoteId = parseInt(quote.confirmation.internalid, 10);\n                }\n                loggers.end(actionId, {\n                    operationIds: quoteOperationIds,\n                    status: 'success',\n                    transactionId: quoteId\n                });\n                this.set('confirmation', new TransactionModel(this.get('confirmation')), {\n                    silent: true\n                });\n                this.trigger('submit');\n            });\n    },\n    // @method save Override default save method to validate that independently of the current wizard steps configuration\n    // the default quote values are preserve\n    // @return {jQuery.XHR|Boolean} jqXHR if validation is successful and false\n    save: function() {\n        const billing_address = parseInt(this.get('billaddress'), 10);\n        const shipping_address = parseInt(this.get('shipaddress'), 10);\n\n        // We don't know if the shipping address module is for sure present, so we add here an extra validation\n        // to just save a valid shipping address and not an id that was auto-generated in the back-end\n        if (!_.isNumber(shipping_address) || _.isNaN(shipping_address)) {\n            this.unset('shipaddress');\n        }\n\n        // We don't know if the billing address module is for sure present, so we add here an extra validation\n        // to just save a valid billing address and not an id that was auto-generated in the back-end\n        if (!_.isNumber(billing_address) || _.isNaN(billing_address)) {\n            this.unset('billaddress');\n        }\n\n        // Fix terms payment method object name\n        // This happens because in some cases the back-end returns a payment method already initialized\n        // that can be terms depending on the current user.\n        // Our Transaction.Model returns the invoice in an object with the property 'paymentterms'\n        // but at the time to set the payment method it expect an object with a property 'terms'\n        if (this.get('paymentmethods').length) {\n            const term_paymentMethod = this.get('paymentmethods').find(function(payment_method) {\n                return !!payment_method.get('paymentterms');\n            });\n\n            if (term_paymentMethod) {\n                term_paymentMethod.set('terms', term_paymentMethod.get('paymentterms'));\n                term_paymentMethod.unset('paymentterms');\n            }\n        }\n\n        return TransactionModel.prototype.save.apply(this, arguments);\n    },\n\n    // @method getNonShippableLines Returns the order's line that are NON Shippable\n    // @returns {Array<Transaction.Line.Model>}\n    getNonShippableLines: function() {\n        return this.get('lines').filter(function(line) {\n            return !line.get('item').get('_isfulfillable');\n        });\n    },\n\n    // @method getIfThereAreDeliverableItems Determines if at least one item is shippable\n    // @return {Boolean}\n    getIfThereAreDeliverableItems: function getIfThereAreDeliverableItems() {\n        return (\n            this.get('lines').length -\n                this.getNonShippableLines().length -\n                this.getPickupInStoreLines().length >\n            0\n        );\n    },\n    // @method getShippableLines\n    // @returns {Array<Transaction.Line.Model>} the order's line that are shippable without taking into account if their have or not set a shipaddress\n    getShippableLines: function getShippableLines() {\n        return this.get('lines').filter(function(line) {\n            return (\n                line.get('item').get('_isfulfillable') &&\n                line.get('fulfillmentChoice') !== 'pickup' &&\n                line.get('quantity')\n            );\n        });\n    },\n    getPickupInStoreLines: function getPickupInStoreLines() {\n        const lines = [];\n        this.get('lines').each(function(line) {\n            if (line.get('fulfillmentChoice') === 'pickup') {\n                lines.push(line);\n            }\n        });\n\n        return lines;\n    },\n\n    // @method shippingAddressIsRequired This method is used by the OrderWizard.Module.Address.Shipping to determine if its must be rendered or not.\n    // @return {Boolean}\n    shippingAddressIsRequired: function() {\n        return true;\n        // return this.get('lines').length ?\n        // \tthis.getNonShippableLines().length !== this.get('lines').length :\n        // \ttrue;\n    }\n});\n"]}