{"version":3,"sources":["Invoice.PaidList.View.ts"],"names":[],"mappings":"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","file":"Invoice.PaidList.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Invoice.PaidList.View\"/>\n\nimport '../../../Commons/Backbone.CompositeView/JavaScript/Backbone.CompositeView';\nimport * as _ from 'underscore';\nimport * as invoice_paid_list_tpl from 'invoice_paid_list.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\nimport { ListHeaderView } from '../../../Commons/ListHeader/JavaScript/ListHeader.View';\nimport { RecordViewsView } from '../../RecordViews/JavaScript/RecordViews.View';\nimport { GlobalViewsPaginationView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Pagination.View';\nimport { AjaxRequestsKiller } from '../../../Commons/AjaxRequestsKiller/JavaScript/AjaxRequestsKiller';\nimport { ProfileModel } from '../../../Commons/Profile/JavaScript/Profile.Model';\n\nimport TransactionListView = require('../../../Commons/Transaction/JavaScript/Transaction.List.View');\nimport InvoiceCollection = require('./Invoice.Collection');\nimport BackboneCollectionView = require('../../../Commons/Backbone.CollectionView/JavaScript/Backbone.CollectionView');\nimport Handlebars = require('../../../Commons/Utilities/JavaScript/Handlebars');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// @class Invoice.PaidList.View @extends Backbone.View\nconst InvoicePaidListView = TransactionListView.extend({\n    // @property {Function} template\n    template: invoice_paid_list_tpl,\n\n    // @property {String} title\n    title: Utils.translate('Invoices'),\n\n    // @property {String} page_header\n    page_header: Utils.translate('Invoices'),\n\n    // @property {Object} attributes\n    attributes: {\n        id: 'PaidInvoicesHistory',\n        class: 'PaidInvoices'\n    },\n\n    // @method initialize\n    initialize: function(options): void {\n        let page = '1';\n\n        if (options.routerArguments && options.routerArguments[0]) {\n            const params = Utils.parseUrlOptions(options.routerArguments[0]);\n\n            if (params.page) {\n                page = params.page.toString();\n            }\n        }\n        this.options.page = page;\n\n        this.collection = new InvoiceCollection();\n\n        this.collection.on('sync', this.showContent, this);\n\n        this.user = ProfileModel.getInstance();\n\n        const today = new Date();\n        const isoDate = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n\n        this.rangeFilterOptions = {\n            fromMin: '1800-01-02',\n            fromMax: isoDate,\n            toMin: '1800-01-02',\n            toMax: isoDate\n        };\n\n        // manages sorting and filtering of the collection\n        this.listHeader = new ListHeaderView({\n            view: this,\n            application: options.application,\n            collection: this.collection,\n            sorts: this.sortOptions,\n            rangeFilter: 'date',\n            rangeFilterLabel: Utils.translate('From'),\n            hidePagination: true\n        });\n\n        this.collection.on('sync reset', jQuery.proxy(this, 'render'));\n    },\n\n    beforeShowContent: function beforeShowContent() {\n        return this.collection.fetch({\n            data: {\n                status: 'paid',\n                page: this.options.page\n            },\n            killerId: AjaxRequestsKiller.getKillerId()\n        });\n    },\n\n    // @method getSelectedMenu\n    getSelectedMenu: function(): string {\n        return 'invoices';\n    },\n\n    // @method getBreadcrumbPages\n    getBreadcrumbPages: function() {\n        return {\n            text: this.title,\n            href: '/paid-invoices'\n        };\n    },\n\n    // @property {Array} sortOptions\n    // Array of default sort options\n    // sorts only apply on the current collection\n    // which might be a filtered version of the original\n    sortOptions: [\n        {\n            value: 'closedate',\n            name: Utils.translate('By Close Date'),\n            selected: true,\n            sort: function() {\n                return this.sortBy(function(invoice) {\n                    return [invoice.get('closedateInMilliseconds'), invoice.get('tranid')];\n                });\n            }\n        },\n        {\n            value: 'trandate',\n            name: Utils.translate('By Invoice Date'),\n            sort: function() {\n                return this.sortBy(function(invoice) {\n                    return [invoice.get('tranDateInMilliseconds'), invoice.get('tranid')];\n                });\n            }\n        },\n        {\n            value: 'invoicenumber',\n            name: Utils.translate('By Invoice Number'),\n            sort: function() {\n                return this.sortBy(function(invoice) {\n                    return parseInt(\n                        invoice\n                            .get('tranid')\n                            .split(/[^\\(\\)0-9]*/)\n                            .join(''),\n                        10\n                    );\n                });\n            }\n        },\n        {\n            value: 'amountdue',\n            name: Utils.translate('By Amount'),\n            sort: function() {\n                return this.sortBy(function(invoice) {\n                    return invoice.get('amount');\n                });\n            }\n        }\n    ],\n\n    // @property {Object} childViews\n    childViews: {\n        ListHeader: function() {\n            return this.listHeader;\n        },\n        'Invoice.Results': function() {\n            return this._resultsView;\n        },\n        'GlobalViews.Pagination': function() {\n            return new GlobalViewsPaginationView(\n                _.extend(\n                    {\n                        totalPages: Math.ceil(\n                            this.collection.totalRecordsFound / this.collection.recordsPerPage\n                        )\n                    },\n                    Configuration.defaultPaginationSettings\n                )\n            );\n        }\n    },\n\n    _buildResultsView: function() {\n        const self = this;\n        let selectedColumns = [];\n\n        if (!Configuration.get().transactionListColumns.enableInvoice) {\n            selectedColumns.push({ label: 'Date', type: 'date', name: 'date', id: 'trandate' });\n            selectedColumns.push({\n                label: 'Close Date',\n                type: 'date',\n                name: 'close-date',\n                id: 'closedate'\n            });\n            selectedColumns.push({\n                label: 'Amount',\n                type: 'currency',\n                name: 'amount',\n                id: 'amount_formatted'\n            });\n        } else {\n            selectedColumns = Configuration.get().transactionListColumns.invoicePaid;\n        }\n\n        const records_collection = new Backbone.Collection(\n            this.collection.map(function(invoice) {\n                const model = new Backbone.Model({\n                    touchpoint: 'customercenter',\n                    title: new Handlebars.SafeString(\n                        Utils.translate(\n                            'Invoice #<span class=\"tranid\">$(0)</span>',\n                            invoice.get('tranid')\n                        )\n                    ),\n                    detailsURL: `invoices/${invoice.get('internalid')}`,\n\n                    id: invoice.get('internalid'),\n                    internalid: invoice.get('internalid'),\n\n                    columns: self._buildColumns(selectedColumns, invoice)\n                });\n\n                return model;\n            })\n        );\n\n        return new BackboneCollectionView({\n            childView: RecordViewsView,\n            collection: records_collection,\n            viewsPerRow: 1,\n            childViewOptions: {\n                referrer: 'paid-invoices'\n            }\n        });\n    },\n\n    // @method getContext @returns Invoice.PaidList.View.Context\n    getContext: function() {\n        this._resultsView = this._buildResultsView();\n        let columns = [];\n        if (this._resultsView.collection.length > 0) {\n            columns = this._resultsView.collection.at(0).get('columns');\n        }\n        // @class Invoice.PaidList.View.Context\n        return {\n            // @property {Invoice.Collection} invoices\n            invoices: this.collection,\n            // @property {Boolean} showInvoices\n            showInvoices: !!this.collection.length,\n            // @property {String} pageHeader\n            pageHeader: this.page_header,\n            // @property {Boolean} showBackToAccount\n            showBackToAccount: Configuration.get('siteSettings.sitetype') === 'STANDARD',\n            // @property {Array<{}>} columns\n            columns: columns,\n            // @property {Boolean} showPagination\n            showPagination: !!(this.collection.totalRecordsFound && this.collection.recordsPerPage)\n        };\n    }\n});\n\nexport = InvoicePaidListView;\n"]}