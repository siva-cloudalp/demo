{"version":3,"sources":["RecordViews.View.ts"],"names":[],"mappings":"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","file":"RecordViews.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"RecordViews.View\"/>\n\nimport * as _ from 'underscore';\n\nimport * as record_views_tpl from 'recordviews.tpl';\nimport * as Backbone from '../../../Commons/Core/JavaScript/backbone/BackboneExtras';\n\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\n\n// @class RecordViews.View @extend BackboneView\nexport const RecordViewsView: any = BackboneView.extend({\n    // @property {Function} template\n    template: record_views_tpl,\n    attributes: { id: '', class: '' },\n    // this attribute is used because this class has not been migrated\n    // the actual implementation of this class is passing sometimes\n    // a Backbone.Model that only use the get function of the\n    // Backbone.Model class. To avoid this, in Case.List.View is being passed an object\n    // instead of a model. This new implementation does not affect the Backward Compatibility\n    recordViewObject: {},\n\n    // @method initialize\n    // @param {RecordViews.View.Initialize} options\n    // @return {Void}\n    initialize: function(options) {\n        this.recordViewObject = this.model || options.record;\n        this.extendChildViews();\n    },\n\n    // @property {Object} childViews\n    childViews: {},\n\n    // @method extendChildViews Internal method that based on the list of columns\n    // that the current model has, extend the childViews property object by adding\n    // each of the composite views specified in the columns.\n    // Notice here that each column is of type RecordViews.View.Column\n    // @return {Void}\n    extendChildViews: function() {\n        const self = this;\n        const columns = this.getColumns();\n\n        _.each(columns, function(column: any) {\n            if (column.compositeKey) {\n                const childView = {};\n                childView[`${column.compositeKey}`] = function() {\n                    return column.composite;\n                };\n                self.addChildViewInstances(childView);\n            }\n        });\n    },\n\n    // @method normalizeColumns Add the properties\n    // showLabel and isComposite to each of the RecordViews.View.Column\n    // of the current model.\n    // @return {Array<RecordViews.View.Column>}\n    normalizeColumns: function() {\n        const columns = this.getColumns();\n        return _.map(columns, function(column: any) {\n            column.showLabel = !!column.label;\n            column.isComposite = !!column.compositeKey;\n\n            return column;\n        });\n    },\n    checkIfModelInstance: function(): boolean {\n        return this.recordViewObject instanceof Backbone.Model;\n    },\n    getColumns: function() {\n        // const recordViewObject = this.model || this.record;\n        return this.checkIfModelInstance()\n            ? this.recordViewObject.get('columns')\n            : this.recordViewObject.columns;\n    },\n\n    // @method getContext @return {RecordViews.View.Context}\n    getContext: function() {\n        let modelData;\n        if (this.checkIfModelInstance()) {\n            // TODO: remove this block when all files using this are migrated\n            modelData = {\n                isNavigable: this.recordViewObject.get('isNavigable'),\n                showInModal: this.recordViewObject.get('showInModal'),\n                touchPoint: this.recordViewObject.get('touchpoint'),\n                detailsURL: this.recordViewObject.get('detailsURL'),\n                title: this.recordViewObject.get('title'),\n                id: this.recordViewObject.id\n            };\n        } else {\n            modelData = {\n                isNavigable: this.recordViewObject.isNavigable,\n                showInModal: this.recordViewObject.showInModal,\n                touchPoint: this.recordViewObject.touchpoint,\n                detailsURL: this.recordViewObject.detailsURL,\n                title: this.recordViewObject.title,\n                id: this.recordViewObject.internalid\n            };\n        }\n        return {\n            // @property {Backbone.Model} model\n            model: this.recordViewObject,\n            // @property {String} id\n            id: modelData.id,\n            // @property {Boolean} isNavigable\n            isNavigable: _.isBoolean(modelData.isNavigable) ? modelData.isNavigable : true,\n            // @property {Boolean} showInModal\n            showInModal: _.isBoolean(modelData.showInModal) ? modelData.showInModal : false,\n            // @property {String} touchpoint\n            touchpoint: modelData.touchPoint || 'customercenter',\n            // @property {String} detailsURL\n            detailsURL: this.options.referrer\n                ? `${modelData.detailsURL}/${this.options.referrer}`\n                : modelData.detailsURL,\n            // @property {String} title\n            title: modelData.title,\n            // @property {Array<RecordViews.View.Column>} columns\n            columns: this.normalizeColumns()\n        };\n    }\n});\n\nexport type RecordViewsView = any;\n\n// @class RecordViews.View.Initialize\n// @property {RecordViews.View.Initialize.Model} model\n\n// @class RecordViews.View.Initialize.Model @extends Backbone.Model\n// @property {String} id\n// @property {Boolean?} isNavigable The default value is true\n// @property {Boolean?} showInModal The default value is false\n// @property {String?} touchpoint The default value is 'customercenter'\n// @property {String} detailsURL\n// @property {String} title\n// @property {Array<RecordViews.View.Column>} columns\n\n// @class RecordViews.View.Column\n// @property {String} label\n// @property {Boolean} showLabel This field is calculated\n// @property {Boolean} isComposite This field is calculated\n// @property {String} type\n// @property {String} name\n// @property {String|Number|Boolean} value\n// @property {String} compositeKey\n// @property {Backbone.View} composite In instance of a view\n"]}