{"version":3,"sources":["TransactionHistory.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IASF,IAAM,uBAAuB,GAAQ,gBAAgB,CAAC,MAAM,CAAC;QACzD,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,gCAAgC,EAAE,IAAI,CAAC;QACrE,kGAAkG;QAClG,YAAY,EAAE,IAAI;QAClB,wCAAwC;QACxC,YAAY,EAAE;YACV,IAAI,IAAI,CAAC;YAET,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,IAAI,UAAU,KAAK,YAAY,EAAE;gBAC7B,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aACzC;iBAAM,IAAI,UAAU,KAAK,iBAAiB,EAAE;gBACzC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;aACrC;iBAAM,IAAI,UAAU,KAAK,iBAAiB,EAAE;gBACzC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;aACrC;iBAAM,IAAI,UAAU,KAAK,oBAAoB,EAAE;gBAC5C,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;aACjD;iBAAM,IAAI,UAAU,KAAK,SAAS,EAAE;gBACjC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;aACrC;iBAAM,IAAI,UAAU,KAAK,UAAU,EAAE;gBAClC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;aAC1C;YAED,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,sCAAsC;QACtC,UAAU,EAAE;YACR,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACpC,IAAI,eAAe,GAAG,qBAAqB,GAAG,IAAI,CAAC;YAEnD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,eAAe,GAAG,6BAA6B,CAAC;aACnD;iBAAM,IAAI,IAAI,KAAK,qBAAqB,EAAE;gBACvC,eAAe,GAAG,SAAS,CAAC;aAC/B;YAED,OAAO,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1D,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,uBAAuB,CAAC","file":"TransactionHistory.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"TransactionHistory.Model\"/>\n// @module TransactionHistory\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nimport TransactionModel = require('../../../Commons/Transaction/JavaScript/Transaction.Model');\n\nconst TransactionHistoryModel: any = TransactionModel.extend({\n    urlRoot: Utils.getAbsoluteUrl('services/TransactionHistory.ss', true),\n    // @property {Boolean} cacheSupport enable or disable the support for cache (Backbone.CachedModel)\n    cacheSupport: true,\n    // @method getTypeLabel @return {String}\n    getTypeLabel: function() {\n        let type;\n\n        const recordtype = this.get('recordtype');\n        if (recordtype === 'creditmemo') {\n            type = Utils.translate('Credit Memo');\n        } else if (recordtype === 'customerpayment') {\n            type = Utils.translate('Payment');\n        } else if (recordtype === 'customerdeposit') {\n            type = Utils.translate('Deposit');\n        } else if (recordtype === 'depositapplication') {\n            type = Utils.translate('Deposit Application');\n        } else if (recordtype === 'invoice') {\n            type = Utils.translate('Invoice');\n        } else if (recordtype === 'cashsale') {\n            type = Utils.translate('Cash Receipt');\n        }\n\n        return type;\n    },\n\n    // @method getTypeUrl @return {String}\n    getTypeUrl: function() {\n        const type = this.get('recordtype');\n        let record_root_url = 'transactionhistory/' + type;\n\n        if (type === 'invoice') {\n            record_root_url = 'transactionhistory/invoices';\n        } else if (type === 'returnauthorization') {\n            record_root_url = 'returns';\n        }\n\n        return record_root_url + '/' + this.get('internalid');\n    }\n});\n\nexport = TransactionHistoryModel;\n"]}