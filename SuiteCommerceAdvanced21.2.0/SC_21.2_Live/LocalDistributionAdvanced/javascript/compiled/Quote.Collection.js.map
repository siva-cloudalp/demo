{"version":3,"sources":["Quote.Collection.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAUF,uDAAuD;IACvD,IAAM,eAAe,GAAQ,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;QACpD,gCAAgC;QAChC,KAAK,EAAE,wBAAU;QAEjB,yBAAyB;QACzB,GAAG,EAAE,0CAA0C;QAE/C,gBAAgB;QAChB,0GAA0G;QAC1G,uDAAuD;QACvD,KAAK,EAAE,UAAS,QAAQ;YACpB,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YACpD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;YAE9C,OAAO,QAAQ,CAAC,OAAO,CAAC;QAC5B,CAAC;QAED,qGAAqG;QACrG,qCAAqC;QACrC,iBAAiB;QACjB,MAAM,EAAE,UAAS,OAAO;YACpB,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YAClC,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC1D,IAAM,EAAE,GAAG,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAEpD,IAAI,CAAC,KAAK,CAAC;gBACP,IAAI,EAAE;oBACF,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK;oBAC5B,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;oBACxB,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,IAAI,EAAE,IAAI,IAAI,IAAI;oBAClB,EAAE,EAAE,EAAE,IAAI,IAAI;oBACd,IAAI,EAAE,OAAO,CAAC,IAAI;iBACrB;gBACD,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC7B,CAAC,CAAC;QACP,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,eAAe,CAAC","file":"Quote.Collection.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Quote.Collection\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\n\nimport { QuoteModel } from './Quote.Model';\nimport Backbone = require('../../Utilities/JavaScript/backbone.custom');\n\n// @class Quote.Collection @extends Backbone.Collection\nconst QuoteCollection: any = Backbone.Collection.extend({\n    // @property {Quote.Model} model\n    model: QuoteModel,\n\n    // @property {String} url\n    url: 'services/Quote.Service.ss?types=Estimate',\n\n    // @method parse\n    // @param {Quote.Model.List.Result} response This is the backend service response when fetching the model\\\n    // @return {Arra<Transaction.Model.List.Result.Record>}\n    parse: function(response) {\n        this.totalRecordsFound = response.totalRecordsFound;\n        this.recordsPerPage = response.recordsPerPage;\n\n        return response.records;\n    },\n\n    // @method update Method used by the ListHeader to filter the current list when seeing the Quote List\n    // @param {Collection.Filter} options\n    // @return {Void}\n    update: function(options): void {\n        const range = options.range || {};\n        const from = range.from && Utils.stringToDate(range.from);\n        const to = range.to && Utils.stringToDate(range.to);\n\n        this.fetch({\n            data: {\n                filter: options.filter.value,\n                sort: options.sort.value,\n                order: options.order,\n                from: from || null,\n                to: to || null,\n                page: options.page\n            },\n            reset: true,\n            killerId: options.killerId\n        });\n    }\n});\n\nexport = QuoteCollection;\n"]}