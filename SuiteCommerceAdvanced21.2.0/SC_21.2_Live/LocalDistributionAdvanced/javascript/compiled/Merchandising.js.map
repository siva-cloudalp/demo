{"version":3,"sources":["Merchandising.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAWF,yBAAyB;IACzB,mEAAmE;IAEnE,SAAgB,qBAAqB,CAAC,WAAW,EAAE,IAAI;QACnD,IAAI,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,iBAAiB,CAAC;YACzD,WAAW,EAAE,WAAW;SAC3B,CAAC,CAAC;IACP,CAAC;IAJD,sDAIC;IAED,gGAAgG;IAChG,6DAA6D;IAC7D,SAAgB,UAAU,CAAC,WAAW;QAClC,IAAI,EAAE,CAAC,WAAW,CAAC,aAAa,EAAE;YAC9B,mCAAmC;YACnC,IAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,aAAa,EAAE,UAAS,KAAU,EAAE,GAAG;gBAC5E,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC;gBACvB,OAAO,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC;SACvC;QAED,iEAAiE;QACjE,+CAA+C;QAC/C,2BAA2B,CAAC,SAAS,CAAC,sBAAsB,GAAG,yCAAmB,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;QAEjI,IAAI,qBAAqB,CAAC;QAC1B,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,oEAAoE;QACpE,WAAW;aACN,SAAS,EAAE;aACX,EAAE,CAAC,iBAAiB,EAAE,UAAS,IAAI;YAChC,IAAI,CAAC,qBAAqB,EAAE;gBACxB,qBAAqB,GAAG,IAAI,CAAC;aAChC;iBAAM;gBACH,qBAAqB,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBACzE,qBAAqB,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAClF,qBAAqB,GAAG,IAAI,CAAC;aAChC;YAED,qBAAqB,CAAC,EAAE,CACpB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,iBAAiB,EAChE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,WAAW,CAAC,CACxD,CAAC;YAEF,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;QACnE,CAAC,CAAC;YACF,yEAAyE;aACxE,EAAE,CAAC,2BAA2B,EAAE,UAAS,IAAI,EAAE,YAAY;YACxD,mDAAmD;YACnD,IAAI,YAAY,CAAC,WAAW,KAAK,eAAe,EAAE;gBACtC,IAAA,MAAM,GAAK,YAAY,OAAjB,CAAkB;gBAChC,IAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBACpC,IAAM,0BAA0B,GAAG;oBAC/B,WAAW,EAAE,WAAW;oBACxB,EAAE,EAAE,YAAY,CAAC,OAAO;iBAC3B,CAAC;gBAEF,uCAAuC;gBACvC,sCAAsC;gBACtC,IAAI,YAAY,CAAC,MAAM,EAAE;oBACrB,YAAY,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;iBAC9D;qBAAM;oBACH,+CAA+C;oBAC/C,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;yBACT,MAAM,CAAC,QAAQ,CAAC;yBAChB,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;iBACtD;aACJ;QACL,CAAC,CAAC,CAAC;QAEP,yDAAyD;QACzD,gCAAgC;QAChC,yCAAyC;QACzC,WAAW,CAAC,qBAAqB,GAAG,SAAS,qBAAqB;YAC9D,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QACzC,CAAC,CAAC;IACN,CAAC;IApED,gCAoEC","file":"Merchandising.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Merchandising\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\nimport './Merchandising.jQueryPlugin';\nimport * as _ from 'underscore';\n\nimport MerchandisingItemCollection = require('./Merchandising.Item.Collection');\nimport Rule = require('./Merchandising.Rule');\nimport { MasterOptionsHelper } from '../../../Commons/SC/JavaScript/MasterOptionsHelper';\n\n// @module Merchandising1\n// Module to handle MerchandisingZones (ex: Featured Items section)\n\nexport function reRenderMerchandizing(application, view) {\n    view.$('[data-type=\"merchandising-zone\"]').merchandisingZone({\n        application: application\n    });\n}\n\n// @class Merchandising It will listen onAfterAppendView to see if there is a new placeholder on\n// which to attach a merchandising @extends ApplicationModule\nexport function mountToApp(application) {\n    if (SC.ENVIRONMENT.MERCHANDISING) {\n        // we need to turn it into an array\n        const definitions = _.map(SC.ENVIRONMENT.MERCHANDISING, function(value: any, key) {\n            value.internalid = key;\n            return value;\n        });\n\n        Rule.Collection.getInstance().reset(definitions);\n        delete SC.ENVIRONMENT.MERCHANDISING;\n    }\n\n    // we add the default options to be added when fetching the items\n    // this includes language and shoper's currency\n    MerchandisingItemCollection.prototype.searchApiMasterOptions = MasterOptionsHelper.getSearchAPIMasterOption('merchandisingZone');\n\n    let current_selected_view;\n    const self = this;\n\n    // afterAppendView is triggered whenever a view or modal is appended\n    application\n        .getLayout()\n        .on('afterAppendView', function(view) {\n            if (!current_selected_view) {\n                current_selected_view = view;\n            } else {\n                current_selected_view.off('afterViewRender', self.reRenderMerchandizing);\n                current_selected_view.off('afterCompositeViewRender', self.reRenderMerchandizing);\n                current_selected_view = view;\n            }\n\n            current_selected_view.on(\n                view.childViews ? 'afterCompositeViewRender' : 'afterViewRender',\n                _.bind(self.reRenderMerchandizing, self, application)\n            );\n\n            self.reRenderMerchandizing(application, current_selected_view);\n        })\n        // content service triggers this event when rendering a new enhanced page\n        .on('renderEnhancedPageContent', function(view, content_zone) {\n            // if the type of the content zone is merchandising\n            if (content_zone.contenttype === 'merchandising') {\n                const { target } = content_zone;\n                const $view_target = view.$(target);\n                const merchandising_zone_options = {\n                    application: application,\n                    id: content_zone.content\n                };\n\n                // if the target is in the current view\n                // we add the merchandising zone there\n                if ($view_target.length) {\n                    $view_target.merchandisingZone(merchandising_zone_options);\n                } else {\n                    // else, we search for the target in the layout\n                    this.$(target)\n                        .filter(':empty')\n                        .merchandisingZone(merchandising_zone_options);\n                }\n            }\n        });\n\n    // @module ApplicationSkeleton @class ApplicationSkeleton\n    // @method getMerchandisingRules\n    // @return {MerchandisingRule.Collection}\n    application.getMerchandisingRules = function getMerchandisingRules() {\n        return Rule.Collection.getInstance();\n    };\n}\n"]}