{"version":3,"sources":["Url.ts"],"names":[],"mappings":"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","file":"Url.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Url\"/>\n// @Typescript-full\n\n/**\n * REFERENCES\n * https://tools.ietf.org/html/rfc1808\n */\n\ninterface NetLocComponent {\n    user: string;\n    password: string;\n    domain: string;\n    port: string;\n}\n\nexport class Url {\n    private schema: string;\n\n    private netLoc: string;\n\n    private strUrl: string;\n\n    private path: string;\n\n    private parameters: string;\n\n    private fragment: string;\n\n    private query: string;\n\n    private netLocComponet: NetLocComponent;\n\n    public constructor(url: string) {\n        let match: RegExpMatchArray;\n        const parametersRegex = /([^;]*)(;(.*))*/;\n        const queryRegex = /([^?]*)(\\?(.*))*/;\n        const netLocRegex = /^\\/\\/([^\\/]*)(.*)/;\n        const squemaNameRegex = /^([a-zA-Z+\\-.]+):(.+)/;\n        const fragmentRegex = /([^#]*)(#(.*))*/;\n        const netLocComponentsRegex = /(([^:@]*)(:([^@]*))?@)*([\\d\\w.-]+)$/;\n\n        this.strUrl = url;\n\n        // Parse Fragment\n        match = url.match(fragmentRegex);\n        if (match) {\n            this.fragment = match[3];\n            url = match[1];\n        }\n\n        // Parse Schema\n        match = url.match(squemaNameRegex);\n        if (match) {\n            this.schema = match[1];\n            url = match[2];\n        }\n\n        // Parse NetLoc\n        match = url.match(netLocRegex);\n        if (match) {\n            this.netLoc = match[1];\n            url = match[2];\n        }\n\n        // Parse Query\n        match = url.match(queryRegex);\n        if (match) {\n            this.query = match[3];\n            url = match[1];\n        }\n\n        // Parse Parameters\n        match = url.match(parametersRegex);\n        if (match) {\n            this.parameters = match[3];\n            url = match[1];\n        }\n\n        // Set Path\n        this.path = url;\n\n        // Parse NetLocComponents\n        // todo: implement parsing validations\n        if (this.netLoc) {\n            match = this.netLoc.match(netLocComponentsRegex);\n            let user;\n            let password;\n            let domain;\n            let port;\n            if (match) {\n                if (match[2] !== undefined) {\n                    user = match[2];\n                    // password can only be considered if a user was provided\n                    if (match[4] !== undefined) {\n                        password = match[4];\n                    }\n                }\n                if (match[5] !== undefined) {\n                    domain = match[5];\n                    if (match[7] !== undefined) {\n                        port = match[7];\n                    }\n                }\n            }\n            this.netLocComponet = { user, password, domain, port };\n        }\n    }\n\n    public toString(): string {\n        let url = '';\n        if (this.schema) {\n            url += `${this.schema}:`;\n        }\n        if (this.netLoc) {\n            url += `//${this.netLoc}`;\n        }\n        if (this.path) {\n            url += this.path;\n        }\n        if (this.parameters) {\n            url += `;${this.parameters}`;\n        }\n        if (this.query) {\n            url += `?${this.query}`;\n        }\n        if (this.fragment) {\n            url += `#${this.fragment}`;\n        }\n        return url;\n    }\n\n    public resolve(baseUrlStr: string): Url {\n        const baseUrl: Url = new Url(baseUrlStr);\n\n        // step 1\n        if (!baseUrl.strUrl) {\n            return this;\n        }\n        // step 2 - a\n        if (!this.strUrl) {\n            return baseUrl;\n        }\n\n        const absoluteUrl: Url = new Url(this.strUrl);\n\n        // step 2 - b\n        if (this.schema) {\n            return this;\n        }\n\n        // step 2 - c\n        absoluteUrl.schema = baseUrl.schema;\n\n        // step 3\n        if (!this.netLoc) {\n            absoluteUrl.netLoc = baseUrl.netLoc;\n            // step 4\n            if (this.path.indexOf('/') !== 0) {\n                // step 5\n                if (!this.path) {\n                    absoluteUrl.path = baseUrl.path;\n                    // step 5 - a\n                    if (!this.parameters) {\n                        absoluteUrl.parameters = baseUrl.parameters;\n                        if (!this.query) {\n                            absoluteUrl.query = baseUrl.query;\n                        }\n                    }\n                } else {\n                    // step 6\n                    const basePath = baseUrl.path.substr(0, baseUrl.path.lastIndexOf('/'));\n                    absoluteUrl.path = basePath + '/' + this.path;\n                    // step 6 - a,b\n                    absoluteUrl.path = absoluteUrl.path.replace(/(\\/\\.\\/)|(\\/\\.$)/g, '/');\n                    // step 6 - c\n                    let tmpPath = '';\n                    while (tmpPath !== absoluteUrl.path) {\n                        tmpPath = absoluteUrl.path;\n                        absoluteUrl.path = absoluteUrl.path.replace(/\\/*[^./]+\\/\\.\\.\\//, '/');\n                    }\n                    // step 6 - d\n                    absoluteUrl.path = absoluteUrl.path.replace(/\\/*[^./]+\\/\\.\\.$/, '/');\n                }\n            }\n        }\n        return absoluteUrl;\n    }\n\n    public getNetLocComponets(): NetLocComponent {\n        return this.netLocComponet;\n    }\n}\n"]}