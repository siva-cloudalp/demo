{"version":3,"sources":["Cart.Confirmation.Helpers.ts"],"names":[],"mappings":"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","file":"Cart.Confirmation.Helpers.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Cart.Confirmation.Helpers\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport LiveOrderModel = require('../../LiveOrder/JavaScript/LiveOrder.Model');\nimport CartConfirmationView = require('./Cart.Confirmation.View');\nimport Backbone = require('../..//Utilities/JavaScript/backbone.custom');\n\nexport = {\n    // Cart.showCartConfirmation()\n    // This reads the configuration object and execs one of the functions above\n    showCartConfirmation: function showCartConfirmation(cart_promise, line, application) {\n        // Available values are: goToCart, showMiniCart and showCartConfirmationModal\n        const addToCartBehavior =\n            Configuration.get().addToCartBehavior || 'showCartConfirmationModal';\n        this['_' + addToCartBehavior](cart_promise, line, application);\n\n        const layout = application.getLayout();\n        cart_promise.fail(function(error) {\n            let output_message = '';\n            let error_object = { errorCode: 'UNKNOWN' };\n            let error_message = '';\n\n            if (error) {\n                if (error.responseJSON) {\n                    error_object = error.responseJSON;\n                    error_message = layout.parseErrorMessage(error);\n                } else if (_.isString(error)) {\n                    // Error came from Frontend ExtLayer\n                    error_object.errorCode = 'ERR_EXT_CANCELED_OPERATION';\n                    error_message = error;\n                }\n            }\n\n            // if the error was caused by an extension canceling the operation,\n            // then show the error message from the back-end\n            if (error_object.errorCode === 'ERR_EXT_CANCELED_OPERATION' && error_message) {\n                output_message = error_message;\n            } else {\n                output_message = Utils.translate(\n                    'Sorry, there is a problem with this Item and can not be purchased at this time. Please check back later.'\n                );\n            }\n\n            layout.showErrorInModal(output_message);\n        });\n    },\n\n    _showCartConfirmationModal: function _showCartConfirmationModal(\n        cart_promise,\n        line,\n        application\n    ) {\n        if (line.isNew()) {\n            return this._showOptimisticCartConfirmation(cart_promise, line, application);\n        }\n        return cart_promise.done(function() {\n            const view = new CartConfirmationView({\n                application: application,\n                model: LiveOrderModel.getInstance().getLatestAddition()\n            });\n            view.showInModal();\n        });\n    },\n\n    _showOptimisticCartConfirmation: function _showOptimisticCartConfirmation(\n        cart_promise,\n        line,\n        application\n    ) {\n        const cart_model = LiveOrderModel.getInstance();\n        // search the item in the cart to merge the quantities\n        if (LiveOrderModel.loadCart().state() === 'resolved') {\n            const cart_line = cart_model.findLine(line);\n\n            if (cart_line) {\n                if (line.get('source') !== 'cart') {\n                    cart_line.set(\n                        'quantity',\n                        cart_line.get('quantity') + parseInt(line.get('quantity'), 10)\n                    );\n                } else {\n                    cart_line.set('quantity', line.get('quantity'));\n                }\n\n                cart_promise.fail(function() {\n                    cart_line.set('quantity', cart_line.previous('quantity'));\n                });\n\n                line = cart_line;\n            } else {\n                cart_model.get('lines').add(line, { at: 0 });\n\n                cart_promise.fail(function() {\n                    cart_model.get('lines').remove(line);\n                });\n            }\n        }\n\n        const view = new CartConfirmationView({\n            application: application,\n            model: line\n        });\n\n        cart_promise.done(function() {\n            view.model = cart_model.getLatestAddition();\n            view.render();\n        });\n\n        view.showInModal();\n    },\n\n    // Cart.goToCart()\n    _goToCart: function _goToCart(cart_promise) {\n        cart_promise.done(function() {\n            Backbone.history.navigate('cart', { trigger: true });\n        });\n    },\n\n    _showMiniCart: function _showMiniCart(cart_promise, line, application) {\n        const layout = application.getLayout();\n\n        cart_promise.done(function() {\n            jQuery(document).scrollTop(0);\n\n            layout.closeModal().done(function() {\n                if (layout.headerViewInstance) {\n                    layout.headerViewInstance.showMiniCart();\n                }\n            });\n        });\n    }\n};\n"]}