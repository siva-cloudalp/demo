{"version":3,"sources":["GlobalViews.RatingByStar.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAWF,8DAA8D;IAC9D,IAAM,2BAA2B,GAAG,YAAY,CAAC,MAAM,CAAC;QACpD,QAAQ,EAAE,+BAA+B;QAEzC,UAAU,EAAE,UAAS,OAAO;YACxB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;YAC7C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACnC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;YACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QACnC,CAAC;QAED,sEAAsE;QACtE,UAAU,EAAE;YACR,IAAM,OAAO,GAAG,6BAAa,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC5D,IAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACnE,IAAI,KAAK,CAAC;YACV,IAAI,UAAU,CAAC;YACf,IAAM,KAAK,GAAG,EAAE,CAAC;YAEjB,KAAK,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC9B,KAAK,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtE,UAAU,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAC7D,KAAK,CAAC,IAAI,CAAC;oBACP,KAAK,EAAE,KAAK;oBACZ,UAAU,EAAE,UAAU;oBACtB,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;oBACvC,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC,CAAC,KAAK;oBACjB,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC;oBACjD,WAAW,EAAE,KAAK,KAAK,GAAG;iBAC7B,CAAC,CAAC;aACN;YAED,+CAA+C;YAC/C,OAAO;gBACH,gCAAgC;gBAChC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,qCAAqC;gBACrC,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,0BAA0B;gBAC1B,KAAK,EAAE,KAAK;aACf,CAAC;QACN,CAAC;QAED,6DAA6D;QAC7D,eAAe,EAAE,UAAS,MAAM;YAC5B,IAAM,OAAO,GAAQ,EAAE,CAAC;YACxB,IAAM,IAAI,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YAC/D,IAAM,MAAM,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAErE,IAAI,MAAM,EAAE;gBACR,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;aAC3B;YAED,IAAI,IAAI,EAAE;gBACN,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;aACvB;YAED,OAAO,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtD,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,2BAA2B,CAAC","file":"GlobalViews.RatingByStar.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"GlobalViews.RatingByStar.View\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as global_views_rating_by_star_tpl from 'global_views_rating_by_star.tpl';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class GlobalViews.RatingByStar.View @extends Backbone.View\nconst GlobalViewsRatingByStarView = BackboneView.extend({\n    template: global_views_rating_by_star_tpl,\n\n    initialize: function(options) {\n        this.showPercentage = options.showPercentage;\n        this.showCount = options.showCount;\n        this.queryOptions = options.queryOptions;\n        this.baseUrl = options.baseUrl;\n    },\n\n    // @method getContext @returns {GlobalViews.RatingByStar.View.Context}\n    getContext: function() {\n        const maxRate = Configuration.get('productReviews.maxRate');\n        const ratingsCountsByRate = this.model.get('_ratingsCountsByRate');\n        let count;\n        let percentage;\n        const rates = [];\n\n        for (let i = maxRate; i > 0; i--) {\n            count = ratingsCountsByRate[i] ? parseInt(ratingsCountsByRate[i]) : 0;\n            percentage = (count * 100) / this.model.get('_ratingsCount');\n            rates.push({\n                count: count,\n                percentage: percentage,\n                percentageRound: Math.round(percentage),\n                index: i,\n                showLink: !!count,\n                url: this.getUrlForOption({ filter: i + 'star' }),\n                isOneReview: count === '1'\n            });\n        }\n\n        // @class GlobalViews.RatingByStar.View.Context\n        return {\n            // @property {Boolean} showCount\n            showCount: this.showCount,\n            // @property {Boolean} showPercentage\n            showPercentage: this.showPercentage,\n            // @property {Array} rates\n            rates: rates\n        };\n    },\n\n    // creates a new url based on a new filter or sorting options\n    getUrlForOption: function(option) {\n        const options: any = {};\n        const sort = (option && option.sort) || this.queryOptions.sort;\n        const filter = (option && option.filter) || this.queryOptions.filter;\n\n        if (filter) {\n            options.filter = filter;\n        }\n\n        if (sort) {\n            options.sort = sort;\n        }\n\n        return this.baseUrl + '?' + jQuery.param(options);\n    }\n});\n\nexport = GlobalViewsRatingByStarView;\n"]}