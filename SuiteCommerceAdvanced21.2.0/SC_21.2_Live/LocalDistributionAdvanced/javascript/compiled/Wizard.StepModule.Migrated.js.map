{"version":3,"sources":["Wizard.StepModule.Migrated.ts"],"names":[],"mappings":"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","file":"Wizard.StepModule.Migrated.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Wizard.StepModule.Migrated\"/>\n// @Typescript-partial\n// Migrate sufix shoulde be removed after full migration of this file.\n\nimport * as _ from 'underscore';\nimport * as wizard_module_tpl from 'wizard_module.tpl';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { GlobalViewsMessageView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Message.View';\nimport { View } from '../../../Commons/Core/JavaScript/View';\n\ninterface WizardStepModuleMigratedEvents {\n    error: (param) => void;\n    ready: (param) => void;\n}\n\nexport class WizardStepModuleMigrated<\n    TContext extends object,\n    TEvents extends object = {}\n> extends View<TContext, WizardStepModuleMigratedEvents> {\n    protected tagName = 'article';\n\n    protected template = wizard_module_tpl;\n\n    public errors = [];\n\n    public wizard;\n\n    private readonly step;\n\n    public model;\n\n    private moduleId;\n\n    private error;\n\n    private options;\n\n    protected title;\n\n    private state;\n\n    public constructor(options) {\n        super();\n\n        this.wizard = options.wizard;\n        this.step = options.step;\n        this.model = options.wizard.model;\n\n        this.moduleId = options.module_id || (this.template ? this.template.Name : '');\n\n        // errors array in the configuration file completely overrides the default one.\n        if (options.errors) {\n            this.errors = options.errors;\n        }\n    }\n\n    // @method disableInterface General method to disable the module interface\n    // called at the moment of submitting the step\n    private disableInterface(): void {}\n\n    // @method enableInterface General method to re-enable the module interface\n    // called after getting an ERROR on submitting\n    private enableInterface(): void {}\n\n    // @method refresh Auxiliary method to refresh a module. It is implemented\n    // by the OrderWizard to refresh titles\n    private refresh(): void {}\n\n    public _render(...args) {\n        let ret;\n        if (!this.isActive()) {\n            ret = this.$el.empty();\n        } else {\n            this.$el.addClass('module-rendered');\n            ret = super.render.apply(this, args);\n            // add the error message box to the module\n            if (!this.$('[data-type=\"alert-placeholder-module\"]').length) {\n                this.$el.prepend('<div data-type=\"alert-placeholder-module\"></div>');\n            }\n\n            // we show module errors (if any) and remove the error object\n            if (this.error) {\n                this.showError();\n            }\n        }\n\n        // We trigger the resize event of the body as the DOM is changed\n        // and some components might be positioned based on the body size\n        jQuery(document.body).trigger('resize');\n\n        return ret;\n    }\n\n    // @method submit by default, a module returns it's validation promise.\n    // @returns {jQuery.Deferred}\n    public submit() {\n        return this.isValid();\n    }\n\n    // @method cancel @returns {jQuery.Deferred}\n    private cancel() {\n        return jQuery.Deferred().resolve();\n    }\n\n    // @method isValid validate resolves a promise because maybe it needs to\n    // do some ajax for validation @returns {jQuery.Deferred}\n    public isValid(): JQueryDeferred<void> {\n        return jQuery.Deferred().resolve();\n    }\n\n    // @method isActive Base implementation to determines is a module is active\n    // (can be submitted, rendered or just use) or not. @returns {Boolean}\n    public isActive(...args) {\n        return _.isFunction(this.options.isActive) ? this.options.isActive.apply(this, args) : true;\n    }\n\n    // @method getTitle returns the title of the module, can be overridden in the\n    // configuration file. @returns {String}\n    public getTitle() {\n        return _.isFunction(this.options.title)\n            ? this.options.title.apply(this)\n            : this.options.title || this.title || '';\n    }\n\n    // @method manageError @param {Wizard.Module.Error} error\n    public manageError(error) {\n        if (this.state !== 'future' && this.isActive()) {\n            // @property {Wizard.Module.Error} error the current error object if any\n            this.error = error;\n            this.trigger('error', error);\n\n            // if the module is being shown we show the error\n            if (this.wizard.getCurrentStep() === this.step) {\n                this.showError();\n            }\n        }\n    }\n\n    // @method showError render the error message\n    private showError() {\n        const global_view_message = new GlobalViewsMessageView({\n            message: this.error.errorMessage,\n            type: 'error',\n            closable: true\n        });\n\n        // Note: in special situations (like in payment-selector), there are modules\n        // inside modules, so we have several place holders, so we only want to show\n        // the error in the first place holder.\n        const error_container = this.$('[data-type=\"alert-placeholder-module\"]:first');\n        const error_container_parent = error_container.parents('.module-rendered:last');\n\n        if (error_container_parent.length) {\n            // may be more than one, we are interested in the last one\n            Utils.animatedScroll(error_container_parent[0]);\n        }\n\n        error_container.html(global_view_message.render().$el.html());\n        this.error = null;\n    }\n\n    // @method clearError empty the error message container\n    private clearError() {\n        this.$('[data-type=\"alert-placeholder-module\"]').empty();\n        this.error = null;\n    }\n\n    // @method clearGeneralMessages General method to clear any message at step level\n    private clearGeneralMessages() {\n        this.$('[data-type=\"alert-placeholder-module\"]:first').empty();\n    }\n\n    // @method showGeneralMessage Notify a message (not just an error) at step level.\n    // Type can be a boolean (true: for errors, false: for success) or string to add\n    // a class alert-<type>\n    private showGeneralMessage(message, type) {\n        const message_type = _.isString(type) ? type : (type && 'error') || 'success';\n\n        const global_view_message = new GlobalViewsMessageView({\n            message: message,\n            type: message_type,\n            closable: true\n        });\n\n        this.$('[data-type=\"alert-placeholder-module\"]:first').html(\n            global_view_message.render().$el.html()\n        );\n    }\n\n    public getContext(): any {\n        return {};\n    }\n}\n"]}