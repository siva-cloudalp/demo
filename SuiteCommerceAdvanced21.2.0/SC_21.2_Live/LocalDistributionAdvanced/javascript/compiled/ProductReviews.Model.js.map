{"version":3,"sources":["ProductReviews.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAYF,OAAS,mBAAmB,CAAC,MAAM,CAAC;QAChC,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,oCAAoC,CAAC;QACnE,gDAAgD;QAChD,0EAA0E;QAC1E,UAAU,EAAE;YACR,MAAM,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,oBAAoB,CAAC;aAC7C;YACD,KAAK,EAAE;gBACH,EAAE,EAAE,UAAS,KAAK;oBACd,IAAI,CAAC,KAAK,EAAE;wBACR,OAAO,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;qBAC/C;oBAED,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,EAAE;wBACrB,OAAO,KAAK,CAAC,SAAS,CAClB,yFAAyF,CAC5F,CAAC;qBACL;gBACL,CAAC;aACJ;YACD,IAAI,EAAE;gBACF,EAAE,EAAE,UAAS,KAAK;oBACd,IAAI,CAAC,KAAK,EAAE;wBACR,OAAO,KAAK,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;qBAC9C;oBAED,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,EAAE;wBACrB,OAAO,KAAK,CAAC,SAAS,CAClB,4FAA4F,CAC/F,CAAC;qBACL;gBACL,CAAC;aACJ;YACD,UAAU,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,oBAAoB,CAAC;aAC7C;SACJ;QAED,KAAK,EAAE,UAAS,QAAQ;YACpB,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACxF,OAAO,QAAQ,CAAC;QACpB,CAAC;KACJ,CAAC,CAAC","file":"ProductReviews.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductReviews.Model\"/>\n\nimport * as Utils from '../../Utilities/JavaScript/Utils';\n\nimport BackboneCachedModel = require('../../BackboneExtras/JavaScript/Backbone.CachedModel');\nimport Cookies = require('../../../Commons/Utilities/JavaScript/js.cookie');\n\n// @class ProductReviews.Model It returns a new instance of a Backbone CachedModel\n// initializes writer and rating per attribute if null or undefined\n// @extends Backbone.CachedModel\nexport = BackboneCachedModel.extend({\n    urlRoot: Utils.getAbsoluteUrl('services/ProductReviews.Service.ss'),\n    // conditions for each of the fields to be valid\n    // [Backbone.Validation](https://github.com/thedersen/backbone.validation)\n    validation: {\n        rating: {\n            required: true,\n            msg: Utils.translate('Rating is required')\n        },\n        title: {\n            fn: function(value) {\n                if (!value) {\n                    return Utils.translate('Title is required');\n                }\n\n                if (value.length >= 199) {\n                    return Utils.translate(\n                        'The field name cannot contain more than the maximum number (199) of characters allowed.'\n                    );\n                }\n            }\n        },\n        text: {\n            fn: function(value) {\n                if (!value) {\n                    return Utils.translate('Text is required');\n                }\n\n                if (value.length > 1000) {\n                    return Utils.translate(\n                        'The review field cannot contain more than the maximum number (1000) of characters allowed.'\n                    );\n                }\n            }\n        },\n        writerName: {\n            required: true,\n            msg: Utils.translate('Writer is required')\n        }\n    },\n\n    parse: function(response) {\n        response.rated = JSON.parse(Cookies.get('votedReviewsId') || '{}')[response.internalid];\n        return response;\n    }\n});\n"]}