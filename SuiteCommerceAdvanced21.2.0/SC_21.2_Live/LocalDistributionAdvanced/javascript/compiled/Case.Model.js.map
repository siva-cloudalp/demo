{"version":3,"sources":["Case.Model.ts"],"names":[],"mappings":"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","file":"Case.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Case.Model\"/>\n// @Typescript-full\n\nimport { Model, ModelEventsDefinition } from '../../../Commons/Core/JavaScript/Model';\nimport { ValidationConfig } from '../../../Commons/Core/JavaScript/backbone/BackboneValidationExtras';\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { Case } from '../../../ServiceContract/SC/Case/Case';\nimport {\n    AttributeValidationRules,\n    ValidationUtils\n} from '../../../Commons/Core/JavaScript/Validator';\n\ninterface CaseForm {\n    category: string;\n    email: string;\n    include_email: boolean;\n    internalid: string | undefined;\n    isNewCase: boolean;\n    message: string;\n    reply: string | undefined;\n    title: string;\n}\nexport class CaseModel extends Model<Case, Case, ModelEventsDefinition<Case, Case>> {\n    protected urlRoot = (): string => Utils.getAbsoluteUrl('services/Case.ss', true);\n\n    protected validation: ValidationConfig = {\n        title: {\n            required: true,\n            msg: Utils.translate('Subject is required')\n        },\n\n        message: {\n            fn: this.validateMessage\n        },\n\n        reply: {\n            fn: this.validateReply\n        },\n\n        email: {\n            required: (value: string, name: string, form: CaseForm): boolean => {\n                return !!form.include_email;\n            },\n            pattern: 'email',\n            msg: Utils.translate('Please provide a valid email')\n        }\n    };\n\n    protected getValidationRules(): AttributeValidationRules<Case> {\n        return {\n            title: [val => ValidationUtils.required(val, Utils.translate('Subject is required'))],\n            message: [val => this.validateMessage(val, 'message')],\n            reply: [val => this.validateReply(val, 'reply')],\n            email: [\n                val => ValidationUtils.email(val, Utils.translate('Please provide a valid email'))\n            ]\n        };\n    }\n\n    public isClosing: boolean = false;\n\n    public constructor(\n        attributes: Case = {\n            caseNumber: '',\n            title: '',\n            status: { id: '', name: '' },\n            origin: { id: '', name: '' },\n            category: { id: '', name: '' },\n            company: { id: '', name: '' },\n            priority: { id: '', name: '' },\n            createdDate: '',\n            lastMessageDate: '',\n            email: '',\n            messages_count: 0,\n            grouped_messages: []\n        },\n        options?: never\n    ) {\n        super(attributes, options);\n    }\n\n    private validateReply(value: string | undefined, name: string): string {\n        if (!this.get('isNewCase') && !value && !this.isClosing) {\n            return Utils.translate('$(0) is required', name);\n        }\n        return '';\n    }\n\n    private validateMessage(value: string | undefined, name: string): string {\n        if (this.get('isNewCase')) {\n            if (!value) {\n                return Utils.translate('$(0) is required', name);\n            }\n\n            return CaseModel.validateLength(value, name);\n        }\n        return '';\n    }\n\n    // Validates message length. (0 < length <= 4000)\n    private static validateLength(value: string, name: string): string {\n        const max_length = 4000;\n\n        if (value && value.length > max_length) {\n            return Utils.translate('$(0) must be at most $(1) characters', name, max_length);\n        }\n        return '';\n    }\n}\n"]}