{"version":3,"sources":["ServiceClient.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;;;;;;;;;;;;IAwCF;QAAA;QA6FA,CAAC;QA5FW,+BAAO,GAAf,UACI,OAAiC;YAEjC,IAAM,QAAQ,GAAG,qBAAM,CAAC,QAAQ,EAG7B,CAAC;YACJ,qBAAM;iBACD,IAAI,CAAC,OAAO,CAAC;iBACb,IAAI,CACD,UAAC,IAAe,EAAE,UAAkB,EAAE,KAA2B;gBAC7D,QAAQ,CAAC,OAAO,CAAC;oBACb,IAAI,MAAA;oBACJ,UAAU,YAAA;oBACV,QAAQ,EAAE;wBACN,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,iBAAiB,EAAE,UAAC,IAAY;4BAC5B,OAAA,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAA7B,CAA6B;qBACpC;iBACJ,CAAC,CAAC;YACP,CAAC,CACJ;iBACA,IAAI,CACD,UAAC,KAA2B,EAAE,UAAkB,EAAE,WAAmB;gBACjE,QAAQ,CAAC,MAAM,CAAC;oBACZ,UAAU,YAAA;oBACV,WAAW,aAAA;oBACX,QAAQ,EAAE;wBACN,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,iBAAiB,EAAE,UAAC,IAAY;4BAC5B,OAAA,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAA7B,CAA6B;qBACpC;iBACJ,CAAC,CAAC;YACnB,CAAC,CACQ,CAAC;YAEN,OAAO,QAAQ,CAAC;QACpB,CAAC;QAES,6CAAqB,GAA/B;YACI,OAAO;gBACH,WAAW,EAAE,kBAAkB;gBAC/B,QAAQ,EAAE,MAAM;gBAChB,WAAW,EAAE,KAAK;aACrB,CAAC;QACN,CAAC;QAES,kCAAU,GAApB,UACI,GAAW,EACX,IAAoB,EACpB,OAA+C;YAA/C,wBAAA,EAAA,YAA+C;YAE/C,IAAM,MAAM,kCACL,IAAI,CAAC,qBAAqB,EAAE,KAC/B,GAAG,KAAA,EACH,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAC1D,OAAO,CACb,CAAC;YACF,OAAO,IAAI,CAAC,OAAO,CAAsB,MAAM,CAAC,CAAC;QACrD,CAAC;QAES,mCAAW,GAArB,UACI,GAAW,EACX,IAAoB,EACpB,OAA+C;YAA/C,wBAAA,EAAA,YAA+C;YAE/C,IAAM,MAAM,kCACL,IAAI,CAAC,qBAAqB,EAAE,KAC/B,GAAG,KAAA,EACH,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAC1D,OAAO,CACb,CAAC;YACF,OAAO,IAAI,CAAC,OAAO,CAAsB,MAAM,CAAC,CAAC;QACrD,CAAC;QAES,kCAAU,GAApB,UACI,GAAW,EACX,IAAe,EACf,OAA+C;YAA/C,wBAAA,EAAA,YAA+C;YAE/C,IAAM,MAAM,kCACL,IAAI,CAAC,qBAAqB,EAAE,KAC/B,GAAG,KAAA,EACH,MAAM,EAAE,KAAK,EACb,IAAI,MAAA,EACJ,WAAW,EAAE,IAAI,KACd,OAAO,CACb,CAAC;YACF,OAAO,IAAI,CAAC,OAAO,CAAsB,MAAM,CAAC,CAAC;QACrD,CAAC;QACL,oBAAC;IAAD,CA7FA,AA6FC,IAAA;IA7FqB,sCAAa","file":"ServiceClient.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ServiceClient\"/>\n// @Typescript-full\n\nimport { jQuery } from './jquery/JQueryExtras';\n\nexport interface CommonRequestOptions {\n    contentType?: 'application/json';\n    dataType: 'json';\n    processData: boolean;\n    timeout?: number;\n}\n\n\ninterface ResponseData {\n    readyState: number;\n    getResponseHeader: (key: string) => string | null;\n}\n\nexport interface ServiceClientResponse<TRequest> {\n    data?: TRequest;\n    textStatus: string;\n    response: ResponseData;\n}\n\nexport interface ServiceClientErrorResponse {\n    textStatus: string;\n    errorThrown: string;\n    response: ResponseData;\n}\n\nexport type Data<TRequest> =\n    | { toJSON?: () => TRequest }\n    | { [key in keyof TRequest]: TRequest[key] };\nexport interface RequestOptions<TRequest> extends CommonRequestOptions {\n    url: string;\n    data?: TRequest | string;\n    method: 'POST' | 'GET' | 'PUT' | 'DELETE';\n}\nexport abstract class ServiceClient {\n    private request<TResponse, TRequest>(\n        options: RequestOptions<TRequest>\n    ): Promise<ServiceClientResponse<TResponse>> {\n        const deferred = jQuery.Deferred<\n            ServiceClientResponse<TResponse>,\n            ServiceClientErrorResponse\n        >();\n        jQuery\n            .ajax(options)\n            .done(\n                (data: TResponse, textStatus: string, jqXHR: JQuery.jqXHR<object>): void => {\n                    deferred.resolve({\n                        data,\n                        textStatus,\n                        response: {\n                            readyState: jqXHR.readyState,\n                            getResponseHeader: (name: string): string | null =>\n                                jqXHR.getResponseHeader(name)\n                        }\n                    });\n                }\n            )\n            .fail(\n                (jqXHR: JQuery.jqXHR<object>, textStatus: string, errorThrown: string): void => {\n                    deferred.reject({\n                        textStatus,\n                        errorThrown,\n                        response: {\n                            readyState: jqXHR.readyState,\n                            getResponseHeader: (name: string): string | null =>\n                                jqXHR.getResponseHeader(name)\n                        }\n                    });\n    }\n            );\n\n        return deferred;\n    }\n\n    protected defaultRequestOptions(): CommonRequestOptions {\n        return {\n            contentType: 'application/json',\n            dataType: 'json',\n            processData: false\n        };\n    }\n\n    protected putRequest<TResponse, TRequest>(\n        url: string,\n        data: Data<TRequest>,\n        options: Partial<RequestOptions<TRequest>> = {}\n    ): Promise<ServiceClientResponse<TResponse>> {\n        const params: RequestOptions<TRequest> = {\n            ...this.defaultRequestOptions(),\n            url,\n            method: 'PUT',\n            data: JSON.stringify('toJSON' in data ? data.toJSON() : data),\n            ...options\n        };\n        return this.request<TResponse, TRequest>(params);\n    }\n\n    protected postRequest<TResponse, TRequest>(\n        url: string,\n        data: Data<TRequest>,\n        options: Partial<RequestOptions<TRequest>> = {}\n    ): Promise<ServiceClientResponse<TResponse>> {\n        const params: RequestOptions<TRequest> = {\n            ...this.defaultRequestOptions(),\n            url,\n            method: 'POST',\n            data: JSON.stringify('toJSON' in data ? data.toJSON() : data),\n            ...options\n        };\n        return this.request<TResponse, TRequest>(params);\n    }\n\n    protected getRequest<TResponse, TRequest = undefined>(\n        url: string,\n        data?: TRequest,\n        options: Partial<RequestOptions<TRequest>> = {}\n    ): Promise<ServiceClientResponse<TResponse>> {\n        const params: RequestOptions<TRequest> = {\n            ...this.defaultRequestOptions(),\n            url,\n            method: 'GET',\n            data,\n            processData: true,\n            ...options\n        };\n        return this.request<TResponse, TRequest>(params);\n    }\n}\n"]}