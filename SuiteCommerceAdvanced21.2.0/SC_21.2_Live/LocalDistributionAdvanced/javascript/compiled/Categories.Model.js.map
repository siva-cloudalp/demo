{"version":3,"sources":["Categories.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;;;;;;;;;;;;;;IA6BF,iEAAiE;IACjE,sFAAsF;IACtF;QAAqC,mCAA4C;QAc7E,yBAAmB,OAAiB;YAApC,YACI,iBAAO,SAGV;YAjBD,uDAAuD;YAEtC,YAAM,GAAG,6BAAa,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC;YAExC,aAAO,GAAY,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YAEnC,iBAAW,GAAY,IAAI,CAAC;YAE7C,2FAA2F;YAC1E,mBAAa,GAAG,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC;YAE9D,aAAO,GAAG,cAAM,OAAA,KAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,CAAC;YAKxC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;QAC3B,CAAC;QAED,+EAA+E;QACxE,+BAAK,GAAZ,UAAa,OAAO;YAChB,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEhD,OAAO,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;YAElC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACrD,CAAC;QAEO,oCAAU,GAAlB,UAAmB,OAAe;YAC9B,OAAO,CAAC,CAAC,KAAK,CACV,eAAe,CAAC,kBAAkB,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM,EACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,CACvE,CAAC,IAAI,EAAE,CAAC;QACb,CAAC;QAEO,yDAA+B,GAAvC;YACI,OAAO,yBAAuB,IAAI,CAAC,UAAU,CACzC,YAAY,CACf,yBAAoB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,0BAAqB,IAAI,CAAC,UAAU,CAChF,UAAU,CACb,4BAAuB,IAAI,CAAC,UAAU,CAAC,eAAe,CAAG,CAAC;QAC/D,CAAC;QAEO,uCAAa,GAArB;YACI,IAAM,sBAAsB,GAAG,sCAAsC,CAAC;YACtE,IAAM,OAAO,GAAG,eAAe,CAAC,UAAU,EAAE,CAAC;YAC7C,IAAM,MAAM,GAAG,eAAe,CAAC,wBAAwB,CACnD,UAAU,EACV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EACzB,IAAI,CAAC,+BAA+B,EAAE,EACtC,GAAG,EACH,IAAI,EACJ,IAAI,CACP,CAAC;YACF,IAAM,GAAG,GAAG,OAAO,GAAG,sBAAsB,GAAG,MAAM,CAAC;YAEtD,OAAO,GAAG,CAAC;QACf,CAAC;QAES,+BAAK,GAAf,UAAgB,QAAsB;YAClC,8EAA8E;YAC9E,IAAM,YAAY,GAAiB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpD,YAAY,CAAC,QAAQ,GAAe,CAChC,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAC1F,CAAC;YACF,YAAY,CAAC,UAAU,GAAe,CAClC,eAAe,CAAC,SAAS,CACrB,YAAY,CAAC,UAAU,EACvB,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,CAC7C,CACJ,CAAC;YACF,OAAO,YAAY,CAAC;QACxB,CAAC;QACL,sBAAC;IAAD,CA1EA,AA0EC,CA1EoC,aAAK,GA0EzC;IA1EY,0CAAe","file":"Categories.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Categories.Model\"/>\n// @Typescript-partial\n\nimport * as _ from 'underscore';\nimport * as CategoriesUtils from './Categories.Utils';\n\nimport { Model } from '../../Core/JavaScript/Model';\nimport {\n    CategoryTree,\n    FullCategory,\n    Category\n} from '../../../ServiceContract/SC/Category/Category';\n\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport BackboneCachedModel = require('../../BackboneExtras/JavaScript/Backbone.CachedModel');\n\ninterface CategoryURL {\n    fullurl?: string;\n}\n\nexport interface Options {\n    cache?: boolean;\n    data?: CategoryURL;\n    killerId?: any;\n}\n\n// Connects to the search api to get all the items and the facets\n// A Model Contains a Collection of items and the list of facet groups with its values\nexport class CategoriesModel extends Model<FullCategory | Category, CategoryTree> {\n    // TODO: We should extend of CachedModel once available\n\n    private readonly config = Configuration.get().categories;\n\n    private readonly options: Options = { cache: true };\n\n    private readonly ignoreCache: boolean = true;\n\n    // TODO: Once this extends of CachedModel the access to the prototype fetch won't be needed\n    private readonly originalFetch = BackboneCachedModel.prototype.fetch;\n\n    public urlRoot = () => this.getServiceURL();\n\n    public constructor(options?: Options) {\n        super();\n\n        this.options = options;\n    }\n\n    // Overrides fetch so we make sure that the cache is set to true, so we wrap it\n    public fetch(options) {\n        options = _.extend(options || {}, this.options);\n\n        options.cache = !this.ignoreCache;\n\n        return this.originalFetch.apply(this, arguments);\n    }\n\n    private getColumns(element: string): string {\n        return _.union(\n            CategoriesUtils.getCategoryColumns()[element].fields,\n            this.config[element].fields || this.config[element].additionalFields\n        ).join();\n    }\n\n    private getNavigationItemOptionalFields(): string {\n        return `&bread_crumb_fields=${this.getColumns(\n            'breadcrumb'\n        )}&category_fields=${this.getColumns('category')}&side_menu_fields=${this.getColumns(\n            'sideMenu'\n        )}&subcategory_fields=${this.getColumns('subCategories')}`;\n    }\n\n    private getServiceURL(): string {\n        const CATEGORY_TREE_ENDPOINT = '/api/navigation/v1/categorynavitems?';\n        const baseUrl = CategoriesUtils.getBaseUrl();\n        const params = CategoriesUtils.getSMTEndpointParameters(\n            'full_url',\n            this.options.data.fullurl,\n            this.getNavigationItemOptionalFields(),\n            'F',\n            null,\n            null\n        );\n        const url = baseUrl + CATEGORY_TREE_ENDPOINT + params;\n\n        return url;\n    }\n\n    protected parse(category: CategoryTree): FullCategory {\n        // The category is always at the first position. SMT send the data in that way\n        const categoryData = <FullCategory>category.data[0];\n        categoryData.siblings = <Category[]>(\n            CategoriesUtils.sortingBy(categoryData.siblings, CategoriesUtils.getSortBy('sideMenu'))\n        );\n        categoryData.categories = <Category[]>(\n            CategoriesUtils.sortingBy(\n                categoryData.categories,\n                CategoriesUtils.getSortBy('subCategories')\n            )\n        );\n        return categoryData;\n    }\n}\n"]}