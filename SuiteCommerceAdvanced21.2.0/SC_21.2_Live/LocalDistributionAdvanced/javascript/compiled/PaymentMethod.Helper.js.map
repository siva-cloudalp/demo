{"version":3,"sources":["PaymentMethod.Helper.ts"],"names":[],"mappings":"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","file":"PaymentMethod.Helper.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"PaymentMethod.Helper\"/>\n\nimport * as _ from 'underscore';\n\nimport PaymentInstrumentCreditCardView = require('../../../Commons/PaymentInstrument/JavaScript/PaymentInstrument.CreditCard.View');\nimport CreditCardView = require('../../../Commons/CreditCard/JavaScript/CreditCard.View');\n\n// @class CreditCard.Utils Standard credit card utils for parsing the formats\n\nfunction tr(text, search, replace) {\n    // Make the search string a regex.\n    const regex = new RegExp('[' + search + ']', 'g');\n    const t = text.replace(regex, function(chr) {\n        // Get the position of the found character in the search string.\n        const ind = search.indexOf(chr);\n        // Get the corresponding character from the replace string.\n        const r = replace.charAt(ind);\n        return r;\n    });\n    return t;\n}\n\n// replacements needed for spanish keyboards\nconst keyReplacementEs = {\n    search: '&_ñ¡',\n    replace: '^?;='\n};\n\n// @method parseTrack @param {Array<String>}card\nfunction parseTrack(card) {\n    try {\n        return _parseTrack(card);\n    } catch (err) {\n        card = tr(card, keyReplacementEs.search, keyReplacementEs.replace);\n        return _parseTrack(card);\n    }\n}\n\nfunction _parseTrack(card) {\n    const card_info: any = {};\n    let separator = '';\n    if (!card) {\n        throw new Error('empty credit card');\n    }\n\n    const start_sentinel = card[0];\n    let fields;\n\n    if (start_sentinel === '%') {\n        // Track 1\n        const format_code = card[1];\n\n        if (format_code === 'E') {\n            throw new Error('format credit card error');\n        } else if (format_code === 'B') {\n            separator = '^';\n        } else {\n            throw new Error('unkown credit card format');\n        }\n\n        fields = card.slice(2, card.length - 1).split(separator);\n        if (!fields || fields.length !== 3) {\n            throw new Error('credit card missing fields');\n        }\n\n        const yymm = fields[2].slice(0, 4);\n\n        card_info.ccnumber = fields[0];\n        card_info.ccname = fields[1];\n        card_info.ccexpiredate = yymm.slice(2, 4) + '/20' + yymm.slice(0, 2);\n    } else if (start_sentinel === ';') {\n        // Track 2\n        separator = '=';\n        fields = card.slice(1, card.length - 1).split(separator);\n        if (!fields || fields.length !== 2) {\n            throw new Error('credit card missing fields');\n        }\n        card_info.ccnumber = fields[0];\n        card_info.ccname = '';\n        card_info.ccexpiredate = fields[1].slice(2, 4) + '/20' + fields[1].slice(0, 2);\n    } else {\n        throw new Error('unkown credit card format');\n    }\n\n    card_info.raw = card;\n\n    return card_info;\n}\n\n// @method getType @param {String} card_number @returns {String} @param {Array} card_types the credit card type (code)\nfunction getType(card_number, card_types) {\n    const types = _.filter(card_types, function(t: any) {\n        return card_number.match(t.pattern);\n    });\n    if (types && types[0]) {\n        return types[0].code;\n    }\n    return null;\n}\n\nfunction getCreditCardView() {\n    return SC.ENVIRONMENT.paymentInstrumentEnabled\n        ? PaymentInstrumentCreditCardView\n        : CreditCardView;\n}\n\n// @method getIcon @param {String} card_number @returns {String} @param {Array} card_types the credit icon\nfunction getIcon(card_number, card_types) {\n    const types = _.filter(card_types, function(t: any) {\n        return card_number.match(t.pattern);\n    });\n    if (types && types[0]) {\n        return types[0].icon;\n    }\n    return null;\n}\n\nexport = {\n    parseTrack: parseTrack,\n    getCreditCardView: getCreditCardView,\n    getType: getType,\n    getIcon: getIcon\n};\n"]}