{"version":3,"sources":["CMSadapter.Impl.Landing.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IASF;;;;;MAKE;IAEF,SAAS,cAAc,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU;QAChD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,YAAY,EAAE,CAAC;SACvB;IACL,CAAC;IAED,cAAc,CAAC,SAAS,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC;IAEpD,yBAAyB;IAEzB,uFAAuF;IACvF,kJAAkJ;IAClJ,cAAc,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAS,IAAI;QACxD,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAS,IAAI;YAC5B,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,+JAA+J;IAC/J,cAAc,CAAC,SAAS,CAAC,eAAe,GAAG,UAAS,IAAI;QACpD,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3C,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;SAC/D;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;SAC5C;IACL,CAAC,CAAC;IAEF,oLAAoL;IACpL,cAAc,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAS,IAAI;QACxD,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,cAAc,CAAC,SAAS,CAAC,iBAAiB,GAAG,UACzC,IAAI,CAAC,yDAAyD;;QAE9D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC3D,IAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC;YAEtC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC;SAC9C;QAED,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAE9D,YAAY;QACZ,yFAAyF;QACzF,sGAAsG;QACtG,mGAAmG;QACnG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAClF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjE,CAAC,CAAC;IAEF,OAAS,cAAc,CAAC","file":"CMSadapter.Impl.Landing.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"CMSadapter.Impl.Landing\"/>\n\nimport * as _ from 'underscore';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\n\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n/*\n\n@module CMSadapter\n\n@class CMSadapter.Impl.Landing\n*/\n\nfunction AdapterLanding(application, CMS, pageRouter) {\n    this.CMS = CMS;\n    this.application = application;\n    this.pageRouter = pageRouter;\n\n    if (pageRouter) {\n        this.listenForCMS();\n    }\n}\n\nAdapterLanding.prototype.listenForCMS = jQuery.noop;\n\n// landing pages handlers\n\n// @method realoadLandingPages called when user clicks on 'manage pages mode' in admin.\n// Remember that might be unpublished landing pages and so in the admin navigation to these ones must work even if they aren't real landing pages.\nAdapterLanding.prototype.realoadLandingPages = function(data) {\n    const self = this;\n\n    _.each(data.pages, function(page) {\n        self.pageRouter.addLandingRoute(page);\n    });\n};\n\n// @method addLandingPages NOTE: Add a new page(s) to your collection, also passes a bool value (trigger) that should be used to auto-navigate to the new page.\nAdapterLanding.prototype.addLandingPages = function(data) {\n    this.pageRouter.addLandingRoute(data.page);\n\n    if (data.trigger) {\n        Backbone.history.navigate(data.page.url, { trigger: true });\n    } else {\n        this.CMS.trigger('adapter:page:changed');\n    }\n};\n\n// @method navigateLandingPage handler called when the user navigates inside the admin. NOTE: Provides url so that the page can be reloaded or navigated to (Backbone History, etc).\nAdapterLanding.prototype.navigateLandingPage = function(data) {\n    Backbone.history.navigate(data.url, { trigger: false });\n    Backbone.history.loadUrl(data.url);\n};\n\nAdapterLanding.prototype.updateLandingPage = function(\n    data // Update an existing page with title, header, meta, etc.\n) {\n    if (!data.page.pageTypeName) {\n        const pageType = this.application.getComponent('PageType');\n        const context = pageType.getContext();\n\n        data.page.pageTypeName = context.page_type;\n    }\n\n    this.pageRouter.addLandingRoute(data.page, data.original_url);\n\n    // Heads up!\n    // Edit Live Site > Landing Pages > \"Page not found\" error for new published landing page\n    // navigate wont refresh the page if you are in the same url but it will change the url of the browser\n    // loadUrl will navigate to the url but won't change the url of the browser, that's why we use both\n    Backbone.history.navigate(data.page.urlPath || data.page.url, { trigger: false });\n    Backbone.history.loadUrl(data.page.urlPath || data.page.url);\n};\n\nexport = AdapterLanding;\n"]}