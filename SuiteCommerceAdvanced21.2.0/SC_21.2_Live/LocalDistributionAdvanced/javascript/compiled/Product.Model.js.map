{"version":3,"sources":["Product.Model.ts"],"names":[],"mappings":"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","file":"Product.Model.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Product.Model\"/>\n\nimport '../../PluginContainer/JavaScript/PluginContainer';\nimport '../../Utilities/JavaScript/Configuration';\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\n\nimport ItemModel = require('../../Item/JavaScript/Item.Model');\nimport ProductOptionCollection = require('../../Product/JavaScript/Product.Option.Collection');\nimport ProductLineCommon = require('../../ProductLine/JavaScript/ProductLine.Common');\nimport Backbone = require('../../Utilities/JavaScript/backbone.custom');\nimport LiveOrderModel = require('../../LiveOrder/JavaScript/LiveOrder.Model');\n\n// @class Product.Model A product is an item with state (options selection, quantity, etc) @extends Backbone.Model\nconst ProductModel: any = Backbone.Model.extend(\n    {\n        // @property {Object} validation\n        validation: {\n            quantity: {\n                fn: function quantityValidator(new_quantity) {\n                    const current_quantity = parseInt(new_quantity, 10);\n                    const maximum_quantity = this.getItem().get('_maximumQuantity');\n                    const minimum_quantity = this.getItem().get('_minimumQuantity');\n                    let item_quantity_in_cart = this._getItemQuantityInCart();\n\n                    if (\n                        !_.isNumber(current_quantity) ||\n                        _.isNaN(current_quantity) ||\n                        current_quantity < 1\n                    ) {\n                        return Utils.translate('Invalid quantity value');\n                    }\n                    if (typeof item_quantity_in_cart === 'string') {\n                        item_quantity_in_cart = parseInt(item_quantity_in_cart, 10);\n                    }\n                    if (item_quantity_in_cart + current_quantity < minimum_quantity) {\n                        return Utils.translate(\n                            'Please add $(0) or more of this item',\n                            minimum_quantity\n                        );\n                    }\n                    if (\n                        maximum_quantity &&\n                        item_quantity_in_cart + current_quantity > maximum_quantity\n                    ) {\n                        return Utils.translate(\n                            'Please add $(0) or less of this item',\n                            maximum_quantity - item_quantity_in_cart\n                        );\n                    }\n                }\n            },\n            options: {\n                fn: function optionsValidator() {\n                    let are_options_with_error = false;\n\n                    this.get('options').each(function(option) {\n                        are_options_with_error = are_options_with_error || !!option.validate();\n                    });\n                    return are_options_with_error && Utils.translate('Invalid options values');\n                }\n            }\n        },\n\n        _getItemQuantityInCart: function _getItemQuantityInCart() {\n            const liveorder = LiveOrderModel.getInstance();\n            const lines = liveorder.get('lines');\n            let qty = 0;\n            const current_item_id = this.getItem().id;\n\n            lines.each(function(model) {\n                if (current_item_id === model.get('item').id) {\n                    qty += model.get('quantity');\n                }\n            });\n\n            return qty;\n        },\n\n        // @method initialize Override default initialize method to assure the correct data structure\n        // @param {Object} attributes\n        // @return {Void}\n        initialize: function initialize(attributes) {\n            // Setting options should be done with care of the possible next cases:\n            // clone\t\t\tself.get('options') is a collection\n            // new lines\t\tself.get('options') is undefined\n            // change item\tself.get('options') is a collection\n\n            const self = this;\n            Backbone.Model.prototype.initialize.apply(this, arguments);\n\n            // We clone the validation object as we need it to be per instance instead of being a class property\n            this.validation = _.extend({}, this.validation);\n\n            this.on('change:item', function(model, item) {\n                model.set('item', item instanceof ItemModel ? item : new ItemModel(item), {\n                    silent: true\n                });\n\n                self.initializeOptions(\n                    model.isNew()\n                        ? self\n                              .get('item')\n                              .get('options')\n                              .toJSON()\n                        : attributes.options\n                );\n            });\n            this.trigger('change:item', this, (attributes && attributes.item) || {});\n\n            // Take into account that as we treat the item as a read-only model, this event should only be triggered when the associated item is fetched\n            // ITEM FETCHED\n            this.get('item').on('change', this.onItemChangeUpdateLine, this);\n\n            if (this.isNew()) {\n                // NEW TRANSACTION LINE\n                this.initializeOptions(\n                    (attributes && attributes.options) ||\n                        this.get('item')\n                            .get('options')\n                            .toJSON() ||\n                        []\n                );\n            } else {\n                // TRANSACTION LINE LOADED\n                this.initializeOptions(this.get('options'));\n            }\n\n            // Extend the model with Backbone.Validation.mixin to validate it without a View\n            _.extend(this, Backbone.Validation.mixin);\n        },\n\n        // @method _setQuantity Set the product's quantity in a cancelable way\n        // @private\n        // @param {Number} quantity\n        // @param {Array<Object>} args All the parameters of the original set call\n        // @return {jQuery.Deferred}\n        _setQuantity: function _setQuantity(quantity, args) {\n            const self = this;\n\n            return this.cancelableTrigger('beforeChangeQuantity', quantity).pipe(\n                function() {\n                    Backbone.Model.prototype.set.apply(self, args);\n                    self.cancelableTrigger('afterChangeQuantity');\n                },\n                function() {\n                    // Notify stickIt that the quantity was NOT changed\n                    self.trigger('change:quantity', self);\n                    return jQuery.Deferred().reject();\n                }\n            );\n        },\n\n        // @method set Override default method to provide control over the setting of the quantity attribute. This allows to cancel this action and perform async operation before it.\n        // @param {Object|String} attributes For documentation on this refer to @link http://backbonejs.org/#Model-set\n        // @return {Product.Model|jQuery.Deferred}\n        set: function set(attributes, value, options) {\n            const args = Array.prototype.slice.call(arguments);\n\n            if (\n                _.isString(attributes) &&\n                attributes === 'quantity' &&\n                (!options || !options.silent)\n            ) {\n                return this._setQuantity(value, args);\n            }\n            if (\n                _.isObject(attributes) &&\n                _.isNumber(attributes.quantity) &&\n                (!value || !value.silent)\n            ) {\n                return this._setQuantity(attributes.quantity, args);\n            }\n            return Backbone.Model.prototype.set.apply(this, arguments);\n        },\n\n        onItemChangeUpdateLine: function onItemChangeUpdateLine() {\n            if (this.isNew()) {\n                this.initializeMinimumQuantity();\n            }\n\n            this.initializeOptions(\n                this.get('item')\n                    .get('options')\n                    .toJSON()\n            );\n        },\n\n        // @method initializeOptions Set the options passed in as parameter to the options property of the current model\n        // @param {Array<Product.Option.Model.Attributes|Item.Option.Model.Attributes>} options\n        // @return {Void}\n        initializeOptions: function initializeOptions(options) {\n            this.set(\n                'options',\n                options instanceof ProductOptionCollection\n                    ? options\n                    : new ProductOptionCollection(options),\n                { silent: true }\n            );\n            this.extendOptionsFromItem(this.get('item'), this);\n            this.setOptionsValidation();\n        },\n\n        // @method initializeMinimumQuantity Internal method called when the line's item is fetched, change or when the line is initialized, to set the line quantity\n        // based on the item minimum quantity\n        // @return {Void}\n        initializeMinimumQuantity: function initializeMinimumQuantity() {\n            // Set minimum quantity\n            let line_quantity = this.get('quantity');\n            const minimum_quantity = this.get('item').get('_minimumQuantity') || 1;\n\n            if (\n                !_.isNumber(line_quantity) ||\n                _.isNaN(line_quantity) ||\n                line_quantity < minimum_quantity\n            ) {\n                line_quantity = minimum_quantity;\n            }\n\n            this.set('quantity', line_quantity, { silent: true });\n        },\n\n        // @method setOptionsValidation Set the validation property of the current line based on the options collection\n        // @return {Void}\n        setOptionsValidation: function setOptionsValidation() {\n            const self = this;\n\n            self.get('options').each(function(option) {\n                self.validation[option.get('cartOptionId')] = {\n                    fn: function optionValidationFunction(value, cartOptionId, computedState) {\n                        const selected_option = computedState.options.findWhere({\n                            cartOptionId: cartOptionId\n                        });\n                        const validation = selected_option.validate();\n\n                        // We use 'value.internalid' as we are validating the complex object 'value' which is of the form {internalid,label}\n                        if (validation && validation['value.internalid']) {\n                            return validation['value.internalid'];\n                        }\n                    }\n                };\n            });\n        },\n\n        // @method areAttributesValid\n        // @param {Array<String>} attributes List of attributes to be validated\n        // @param {Object} validators Object containing the Backbone.Validation validators to apply for the current validation\n        // @return {Boolean}\n        areAttributesValid: function areAttributesValid(attributes, validators) {\n            const current_validation = _.extend({}, this.validation);\n\n            _.extend(this.validation, validators || {});\n\n            const result = this.isValid(attributes);\n            this.validation = current_validation;\n            return result;\n        },\n\n        // @method setOption Takes care of setting an option to the current model. This method is needed as we use StickIt and Backbone.Validation.\n        // We \"need\" to emulate at the line level some temporal properties to make the validation of the PDP.\n        // Apart from the options collection the line has one property per option set, we use the cartOptionId as the property in the line.\n        // @param {String} option_cart_id\n        // @param {String} value Internalid of the selection option in case the selection is over an select type option, otherwise the string value specified\n        // @return {jQuery.Deferred<Product.Option.Model|Boolean>} If the option and the value specified are valid, the selected option is returned, false otherwise\n        setOption: function setOption(option_cart_id, value) {\n            const self = this;\n\n            return this.cancelableTrigger('beforeChangeOption', option_cart_id, value).pipe(\n                function() {\n                    const selected_option = self\n                        .get('options')\n                        .findWhere({ cartOptionId: option_cart_id });\n                    const selected_value: any =\n                        selected_option &&\n                        _.findWhere(selected_option.get('values'), { internalid: value });\n\n                    if (selected_option) {\n                        if (selected_value) {\n                            selected_option.set('value', {\n                                internalid: selected_value.internalid,\n                                label: selected_value.label\n                            });\n\n                            self.set(option_cart_id, value);\n                        } else if (\n                            value !== null &&\n                            value !== undefined &&\n                            value !== '' &&\n                            selected_option.get('type') !== 'select'\n                        ) {\n                            selected_option.set('value', {\n                                internalid: value,\n                                label: value\n                            });\n\n                            self.set(option_cart_id, value);\n                        } else {\n                            selected_option.unset('value');\n                            self.unset(option_cart_id);\n                        }\n\n                        // If it's a matrix, checks for valid combinations\n                        if (\n                            selected_option.get('isMatrixDimension') &&\n                            value &&\n                            selected_option.get('value')\n                        ) {\n                            const valid_values_for_selected_option = self.getValidValuesForOption(\n                                selected_option\n                            );\n                            const reset = !_.contains(\n                                valid_values_for_selected_option,\n                                selected_option.get('value').label\n                            );\n\n                            _.each(self.get('options').where({ isMatrixDimension: true }), function(\n                                option: any\n                            ) {\n                                if (reset && option_cart_id !== option.get('cartOptionId')) {\n                                    self.setOption(option.get('cartOptionId'), null);\n                                }\n                            });\n\n                            _.each(self.get('options').where({ isMatrixDimension: true }), function(\n                                option: any\n                            ) {\n                                const valid_values_for_option = self.getValidValuesForOption(\n                                    option\n                                );\n\n                                _.each(option.get('values'), function(value: any) {\n                                    if (\n                                        value.isAvailable !==\n                                        _.contains(valid_values_for_option, value.label)\n                                    ) {\n                                        value.isAvailable = !value.isAvailable;\n\n                                        self.trigger(\n                                            'change:' + option.get('cartOptionId'),\n                                            self,\n                                            self.get(option.get('cartOptionId'))\n                                        );\n                                    }\n                                });\n                            });\n                        }\n                    }\n\n                    self.cancelableTrigger(\n                        'afterChangeOption',\n                        _.isUndefined(self.get(option_cart_id)) ? false : selected_option.toJSON()\n                    );\n\n                    // if the option and the value specified are valid, the selected option is returned, false otherwise\n                    return jQuery\n                        .Deferred()\n                        .resolve(_.isUndefined(self.get(option_cart_id)) ? false : selected_option);\n                }\n            );\n        },\n\n        // @method isEqual\n        // @param {Product.Model|Transaction.Line.Model} other_line\n        // @return {Boolean}\n        isEqual: function isEqual(other_line) {\n            const other_line_internalid = _.isFunction(other_line.getItem)\n                ? other_line.getItem().get('internalid')\n                : other_line.get('item').get('internalid');\n            if (other_line && this.getItem().get('internalid') === other_line_internalid) {\n                const extract_options = function(option) {\n                    return {\n                        cartOptionId: option.cartOptionId,\n                        value: option.value\n                    };\n                };\n                const options_this_line = _.map(this.get('options').toJSON(), extract_options);\n                const options_other_line = _.map(\n                    other_line.get('options').toJSON(),\n                    extract_options\n                );\n                return _.isEqual(options_this_line, options_other_line);\n            }\n            return false;\n        },\n\n        // @method getImages Get the images of the the product taking into account the current options selection\n        // @return {Array<ImageContainer>}\n        getImages: function getImages() {\n            const item = this.get('item');\n            return item.getImages(this);\n        },\n\n        // @method isSelectionComplete\n        // @returns {Boolean} true if all mandatory options are set and valid\n        isSelectionComplete: function isSelectionComplete() {\n            const options = this.get('options').where({ isMandatory: true });\n            return _.all(options, function(option: any) {\n                return option.isValid(true);\n            });\n        },\n\n        // @method getSelectedOptions\n        // @returns {Array<ProductLine.Option.Value>} An array of all the selected option's value\n        getSelectedOptions: function getSelectedOptions() {\n            const selected_options = [];\n\n            this.get('options').each(function(option) {\n                if (!option.validate() && !!option.get('value')) {\n                    selected_options.push(option.get('value'));\n                }\n            });\n\n            return selected_options;\n        },\n\n        // @method getValidValuesForOption Given an <<option ID?>> this method return  GIVEN AN OPTION IDE WHAT ARE THE AVAILABLE VALUES\n        // @param {Product.Option.Model} option\n        // @returns {Array<Product.Option>} The list of all valid <<<options for the option you passed in>>>\n        getValidValuesForOption: function getValidValuesForOption(option) {\n            const matrix_options = this.getMatrixOptionsSelection();\n\n            // from all item matrix options selection remove the current dimension\n            delete matrix_options[option.get('itemOptionId')];\n\n            return _.uniq(\n                _.map(this.getSelectedMatrixChilds(matrix_options), function(model: any) {\n                    return model.get(option.get('itemOptionId'));\n                })\n            );\n        },\n\n        // @method getMatrixOptionsSelection Get all selected option by using sourcefrom and label\n        // @returns {Product.OptionHelper.MatrixSelection} an object of all the matrix options with its values set (DICTIONARY <STRING: OPTION_ID, STRING: VALUE.LABEL>)\n        getMatrixOptionsSelection: function getMatrixOptionsSelection() {\n            // @class Product.OptionHelper.MatrixSelection @extend Dictionary<String,String>\n            // #Description\n            // This class represents the selected option in the current line.\n            // IMPORTANT: When the Search API returns Matrix Items the property matrixchilditems_detail contains all valid children. These children\n            // are identified by its itemid (like itemid = \"Mendelevium-N-N\") or by the list of properties it has. Given an Item that is a matrix child it will\n            // contains one property for each dimension (option), THE KEY POINT IS THAT EACH OF THIS PROPERTIES is the sourcefrom property of each option.\n            // Item Returned from the search API:\n            // \t...\n            // \tdisplayname: \"Mendelevium\"\n            // \tfeatureddescription: \"\"\n            // \tinternalid: 320\n            // \titemid: \"Mendelevium\"\n            // \titemimages_detail: {}\n            // \titemoptions_detail: {matrixtype: \"parent\",…}\n            // \t\tfields: [\t\t\t\t\t\t\t\t\t\t<< ITEM OPTIONS\n            // \t\t\t{\n            // \t\t\t\tinternalid: \"custcol7\"\n            // \t\t\t\tismandatory: true\n            // \t\t\t\tismatrixdimension: true\n            // \t\t\t\tlabel: \"Radioactive level\"\n            // \t\t\t\tsourcefrom: \"custitem7\"\t\t\t\t\t<< OPTION sourcefrom\n            // \t\t\t\ttype: \"select\"\n            // \t\t\t\tvalues: [{label: \"- Select -\"},…]\n            // \t\t\t1: {…}\n            // \t\t]\n            // \tmatrixtype: \"parent\"\n            // \titemtype: \"NonInvtPart\"\n            // \tmatrixchilditems_detail: [\n            // \t\t{\n            // \t\t\tcustitem7: \"None\"\t\t\t\t\t\t\t<<< THIS PROPERTY custitem7 is obtained from the item options. The value is the LABE of the related option\n            // \t\t\tcustitem8: \"Healthy\"\n            // \t\t\tinternalid: 321\n            // \t\t\tisbackorderable: true\n            // \t\t\tisinstock: true\n            // \t\t\tispurchasable: true\n            // \t\t\titemid: \"Mendelevium-N-H\"\n            // \t\t\titemtype: \"NonInvtPart\"\n            // \t\t\tonlinecustomerprice_detail: {onlinecustomerprice_formatted: \"$12.00\", onlinecustomerprice: 12,…}\n            // \t\t\toutofstockmessage: \"\"\n            // \t\t\tshowoutofstockmessage: false\n            // \t\t1: {isinstock: true, itemid: \"Men...\n            //\n            // \t#Class Properties\n            // \tKey: Option sourcefrom\n            // \tValue: Selected option value label\n\n            const matrix_options = this.get('options').where({ isMatrixDimension: true });\n            const result = {};\n\n            _.each(matrix_options, function(matrix_option: any) {\n                // var set_value = self.get(matrix_option.get('cartOptionId'));\n                const set_value = matrix_option.get('value');\n\n                // if this option have been set in the current line\n                if (set_value) {\n                    // Remember that at each option the property itemOptionId is in fact the sourcefrom. See the class Product.Option\n                    // This line set the label of the selected option (based on he fact the we set option by setting its internalid)\n                    // result[matrix_option.itemOptionId] = _.findWhere(matrix_option.values, {internalid: set_value}).label;\n                    result[matrix_option.get('itemOptionId')] = set_value.label;\n                }\n            });\n\n            // <OPTION:SOURCE ID, SELECTED LABEL>\n            return result;\n        },\n\n        // @method getSelectedMatrixChilds Returns all child item that apply for the passed in selection\n        // @param {Product.OptionHelper.MatrixSelection} matrix_options\n        // @returns {Array<Item.Model>} All the children of a matrix that complies with the current or passed in selection\n        getSelectedMatrixChilds: function getSelectedMatrixChilds(matrix_options) {\n            const item_matrix_children = this.get('item').get('_matrixChilds'); // This is a collection of items!!\n            // but these items only have a subset of the item options (only those options on the matrixchilditems_detail field set!)\n\n            if (!item_matrix_children) {\n                return [];\n            }\n\n            matrix_options = matrix_options || this.getMatrixOptionsSelection();\n            const selection_key = JSON.stringify(matrix_options);\n\n            this.matrixSelectionCache = this.matrixSelectionCache || {};\n\n            // Caches the entry for the item\n            if (!this.matrixSelectionCache[selection_key]) {\n                // IF there are option selected THEN get all child items that complies for the current selection ELSE get ALL child items\n                this.matrixSelectionCache[selection_key] = _.values(matrix_options).length\n                    ? item_matrix_children.where(matrix_options)\n                    : item_matrix_children.models;\n            }\n\n            return this.matrixSelectionCache[selection_key];\n        },\n\n        // @method getItemId Gets the id of the current selected item\n        // @return {Sting}\n        getItemId: function getItemId() {\n            return this.getItem().get('_id');\n        },\n\n        // @method getItem Gets the current selected item\n        // @return {Item.Model}\n        getItem: function getItem() {\n            let item = this.get('item');\n            const children = this.getSelectedMatrixChilds();\n\n            if (children && children.length === 1) {\n                item = children[0];\n            }\n\n            return item;\n        },\n\n        // @method getStockInfo\n        // @return {Item.StockInfo}\n        getStockInfo: function getStockInfo() {\n            return this.get('item').getStockInfo(\n                this.getSelectedMatrixChilds(),\n                this.getMatrixOptionsSelection()\n            );\n        },\n\n        // @method getPrice Returns the object specifying the price of the current selection\n        // @return {ItemPrice}\n        getPrice: function getPrice() {\n            return this.get('item').getPrice(this.get('quantity'), this.getSelectedMatrixChilds());\n        }\n    },\n    {\n        // @method createFromTransactionLine Creates a new product from a transaction line\n        // @param {Transaction.Line.Model} transaction_line\n        // @return {Product.Model}\n        // @static\n        createFromTransactionLine: function createFromTransactionLine(transaction_line) {\n            const attributes = transaction_line.toJSON();\n\n            delete attributes.internalid;\n\n            _.each(attributes.options, function(option: any) {\n                option.values = transaction_line\n                    .get('options')\n                    .findWhere({ cartOptionId: option.cartOptionId })\n                    .get('values');\n            });\n\n            return new ProductModel(attributes);\n        }\n    }\n);\n\nProductModel.prototype = _.extend(ProductModel.prototype, ProductLineCommon);\n\nexport = ProductModel;\n"]}