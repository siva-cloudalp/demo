{"version":3,"sources":["GlobalViews.Breadcrumb.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAiBF,4DAA4D;IAC5D,IAAM,yBAAyB,GAAG,YAAY,CAAC,MAAM,CAAC;QAClD,QAAQ,EAAE,2BAA2B;QAErC,UAAU,EAAE,UAAS,OAAO;YACxB,IAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;YAEhC,IAAI,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;gBAC1B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;aACnB;iBAAM,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;aAC1B;iBAAM;gBACH,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;aAC5B;QACL,CAAC;QAED,oDAAoD;QACpD,2CAA2C;QAC3C,SAAS,EAAE,SAAS,SAAS;YACzB,IAAI,6BAAa,CAAC,GAAG,CAAC,2BAA2B,CAAC,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACpF,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAC1C;YACD,IAAM,gBAAgB,GAAyB;gBAC3C,OAAO,EAAE,gBAAgB;gBACzB,eAAe,EAAE,EAAE;aACtB,CAAC;YAEM,IAAA,MAAM,GAAK,MAAM,CAAC,QAAQ,OAApB,CAAqB;YACnC,IAAM,qBAAqB,GAAqB,CAAC,CAAC,GAAG,CACjD,IAAI,CAAC,KAAK,EACV,UAAC,OAAmB,EAAE,KAAa;gBAC/B,OAAO;oBACH,OAAO,EAAE,UAAU;oBACnB,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;oBAC7B,QAAQ,EAAE,KAAK,GAAG,CAAC;oBACnB,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI;iBAC9B,CAAC;YACN,CAAC,CACJ,CAAC;YACF,gBAAgB,CAAC,eAAe,GAAG,qBAAqB,CAAC;YAEzD,cAAc;YACd,IAAM,MAAM,GAAkB;gBAC1B,OAAO,EAAE,SAAS;gBAClB,UAAU,EAAE,gBAAgB;aAC/B,CAAC;YAEF,iBAAiB;YACjB,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;QAED,iEAAiE;QACjE,UAAU,EAAE,SAAS,UAAU;YAC3B,CAAC,CAAC,IAAI,CACF,IAAI,CAAC,KAAK,EACV,UAAC,IAAS;gBACN,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE;oBACzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;iBACjC;gBAED,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;oBACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;iBAC9B;YACL,CAAC,CACJ,CAAC;YAEF,6CAA6C;YAC7C,OAAO;gBACH,kCAAkC;gBAClC,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB,CAAC;QACN,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,yBAAyB,CAAC","file":"GlobalViews.Breadcrumb.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"GlobalViews.Breadcrumb.View\"/>\n\nimport * as _ from 'underscore';\nimport * as global_views_breadcrumb_tpl from 'global_views_breadcrumb.tpl';\nimport {\n    WebPage as JsonldWebPage,\n    ListItem as JsonldListItem,\n    BreadcrumbList as JsonldBreadcrumbList\n} from 'schema-dts';\nimport { JSONObject } from '../../../Commons/Utilities/JavaScript/Utils.Interfaces';\nimport { Configuration } from '../../../Commons/Utilities/JavaScript/Configuration';\n\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\nimport jQuery = require('../../../Commons/Core/JavaScript/jQuery');\n\n// @class GlobalViews.Breadcrumb.View @extends Backbone.View\nconst GlobalViewsBreadcrumbView = BackboneView.extend({\n    template: global_views_breadcrumb_tpl,\n\n    initialize: function(options): void {\n        const opt_pages = options.pages;\n\n        if (_.isUndefined(opt_pages)) {\n            this.pages = [];\n        } else if (_.isArray(opt_pages)) {\n            this.pages = opt_pages;\n        } else {\n            this.pages = [opt_pages];\n        }\n    },\n\n    // @method Create JsonLd object with Breadcrumb info\n    // @return {JQuery.Deferred<JsonldWebPage>}\n    getJsonLd: function getJsonLd(): JQuery.Deferred<JsonldWebPage> {\n        if (Configuration.get('structureddatamarkup.type') !== 'JSON-LD' || !this.pages.length) {\n            return jQuery.Deferred().resolve(null);\n        }\n        const jsonLdBreadcrumb: JsonldBreadcrumbList = {\n            '@type': 'BreadcrumbList',\n            itemListElement: []\n        };\n\n        const { origin } = window.location;\n        const jsonLditemListElement: JsonldListItem[] = _.map(\n            this.pages,\n            (element: JSONObject, index: number): JsonldListItem => {\n                return {\n                    '@type': 'ListItem',\n                    name: element.text.toString(),\n                    position: index + 1,\n                    item: origin + element.href\n                };\n            }\n        );\n        jsonLdBreadcrumb.itemListElement = jsonLditemListElement;\n\n        // Get WebPage\n        const jsonLd: JsonldWebPage = {\n            '@type': 'WebPage',\n            breadcrumb: jsonLdBreadcrumb\n        };\n\n        // Get Breadcrumb\n        return jQuery.Deferred().resolve(jsonLd);\n    },\n\n    // @method getContext @return GlobalViews.Breadcrumb.View.Context\n    getContext: function getContext(): any {\n        _.each(\n            this.pages,\n            (page: any): void => {\n                if (page['data-touchpoint']) {\n                    page.hasDataTouchpoint = true;\n                }\n\n                if (page['data-hashtag']) {\n                    page.hasDataHashtag = true;\n                }\n            }\n        );\n\n        // @class GlobalViews.Breadcrumb.View.Context\n        return {\n            // @property {Array<Object>} pages\n            pages: this.pages\n        };\n    }\n});\n\nexport = GlobalViewsBreadcrumbView;\n"]}