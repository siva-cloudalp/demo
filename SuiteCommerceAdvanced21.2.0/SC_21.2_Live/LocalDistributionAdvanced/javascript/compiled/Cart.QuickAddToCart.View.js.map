{"version":3,"sources":["Cart.QuickAddToCart.View.ts"],"names":[],"mappings":"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","file":"Cart.QuickAddToCart.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Cart.QuickAddToCart.View\"/>\n\nimport * as _ from 'underscore';\nimport * as cart_quickaddtocart_tpl from 'cart_quickaddtocart.tpl';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport LiveOrderModel = require('../../LiveOrder/JavaScript/LiveOrder.Model');\nimport CartAddToCartButtonView = require('./Cart.AddToCart.Button.View');\nimport ProductViewsPriceView = require('../../ProductViews/JavaScript/ProductViews.Price.View');\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class Cart.QuickAddToCart.View @extend Backbone.View\nexport = BackboneView.extend({\n    // @property {Function} template\n    template: cart_quickaddtocart_tpl,\n\n    events: {\n        'blur [data-action=\"setquantity\"]': 'updateQuantity'\n    },\n\n    // @method initialize Override default method to define state properties and attach to model's change event\n    // @param {Cart.QuickAddToCart.View.Initialize.Options} options\n    // @return {Void}\n    initialize: function initialize() {\n        this.cart = LiveOrderModel.getInstance();\n\n        // @property {Boolean} showQuickAddToCartButton Indicate if the current model is valid to be added form the facet list and if the configuration to show this button is enabled\n        this.showQuickAddToCartButton = !!(\n            Configuration.get('addToCartFromFacetsView', false) &&\n            this.model.getItem().get('_isPurchasable') &&\n            !this.hasRequiredCustomFields() &&\n            this.model.areAttributesValid(['options'])\n        );\n    },\n\n    //@method hasRequiredCustomFields Returns if the item has required custom fields\n\t//@return {Boolean}\n\thasRequiredCustomFields: function hasRequiredCustomFields ()\n\t{\n\t\tlet hasRequiredFields = false;\n\n\t\tif (this.model.getItem().get('_optionsDetails') && this.model.getItem().get('_optionsDetails').fields)\n\t\t{\n\t\t\t_.find(this.model.getItem().get('_optionsDetails').fields, function (field: any)\n\t\t\t{\n\t\t\t\tif (field.ismandatory)\n\t\t\t\t{\n\t\t\t\t\thasRequiredFields = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\treturn hasRequiredFields;\n\t},\n\n    // @method getMinimumQuantity Returns the minimum quantity taking into account how many item are in the cart\n    // @return {Number}\n    getMinimumQuantity: function getMinimumQuantity() {\n        return !this.cart.findLine(this.model) ? this.model.getItem().get('_minimumQuantity') : 1;\n    },\n    // @method getMaximumQuantity Returns the maximum quantity, if set, taking into account how many item are in the cart\n    // @return {Number}\n    getMaximumQuantity: function getMaximumQuantity() {\n        let maximum_quantity = this.model.getItem().get('_maximumQuantity');\n        if (maximum_quantity) {\n            const line_in_cart = this.cart.findLine(this.model);\n\n            maximum_quantity = !line_in_cart\n                ? maximum_quantity\n                : maximum_quantity - line_in_cart.quantity;\n\n            return maximum_quantity;\n        }\n    },\n    // @method updateQuantity Set the quantity into the current line\n    // @param {jQuery.Event} e\n    // @return {Void}\n    updateQuantity: function updateQuantity(e) {\n        let new_quantity = parseInt(this.$(e.target).val(), 10);\n        const minimum_quantity = this.getMinimumQuantity();\n        const maximum_quantity = this.getMaximumQuantity();\n\n        if (_.isNaN(new_quantity) || !_.isNumber(new_quantity) || new_quantity < minimum_quantity) {\n            new_quantity = minimum_quantity;\n        } else if (!!maximum_quantity && new_quantity > maximum_quantity) {\n            new_quantity = maximum_quantity;\n        }\n\n        this.model.set('quantity', new_quantity);\n        this.render();\n    },\n\n    childViews: {\n        AddToCart: function() {\n            return new CartAddToCartButtonView({\n                model: this.model,\n                application: this.options.application\n            });\n        },\n        'ProductViewsPrice.Price': function() {\n            return new ProductViewsPriceView({\n                model: this.model,\n                origin: 'ITEMCELL'\n            });\n        }\n    },\n\n    // @method getContext\n    // @return {Cart.QuickAddToCart.View.Context}\n    getContext: function getContext() {\n        const item_model = this.model.get('item');\n\n        // @class Cart.QuickAddToCart.View.Context\n        return {\n            // @property {String} itemId\n            itemId: item_model.get('_id'),\n            // @property {Boolean} showQuickAddToCartButton\n            showQuickAddToCartButton: this.showQuickAddToCartButton,\n            // @property {Number} minimumQuantity\n            minimumQuantity: this.getMinimumQuantity(),\n            // @property {Boolean} maximumQuantity\n            isMaximumQuantity: !!this.getMaximumQuantity(),\n            // @property {Number} isMaximumQuantity\n            maximumQuantity: this.getMaximumQuantity(),\n            // @property {Number} quantity\n            quantity: this.model.get('quantity')\n        };\n        // @class Cart.QuickAddToCart.View\n    }\n});\n\n// @class Cart.QuickAddToCart.View.Initialize.Options\n// @property {Product.Model} model\n"]}