{"version":3,"sources":["LoginRegister.ForgotPassword.View.ts"],"names":[],"mappings":"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","file":"LoginRegister.ForgotPassword.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"LoginRegister.ForgotPassword.View\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\n\nimport * as _ from 'underscore';\nimport * as forgot_password_tpl from 'login_register_forgot_password.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\nimport { FooterSimplifiedView } from '../../Footer/JavaScript/Footer.Simplified.View';\n\nimport LoginRegisterUtils = require('./LoginRegister.Utils');\nimport AccountForgotPasswordModel = require('../../Account/JavaScript/Account.ForgotPassword.Model');\nimport BackboneFormView = require('../../../Commons/Backbone.FormView/JavaScript/Backbone.FormView');\nimport HeaderSimplifiedView = require('../../Header/JavaScript/Header.Simplified.View');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\n\n// @class LoginRegister.ForgotPassword.View Implements the forgot-password UI @extemd BackboneView\nconst LoginRegisterForgotPasswordView: any = BackboneView.extend({\n    template: forgot_password_tpl,\n\n    attributes: {\n        id: 'forgot-password'\n    },\n\n    title: Utils.translate('Reset Password'),\n\n    events: {\n        'submit form': 'saveForm',\n        'click [data-action=\"sign-in-now\"]': 'signInNowClick'\n    },\n\n    bindings: {\n        '[name=\"email\"]': 'email'\n    },\n\n    initialize: function() {\n        // @property {Account.ForgotPassword.Model} model\n        this.model = new AccountForgotPasswordModel();\n        this.model.on('save', _.bind(this.showSuccess, this));\n\n        BackboneFormView.add(this);\n    },\n\n    getHeaderView: function() {\n        // We've got to disable passwordProtectedSite feature if customer registration is disabled.\n        if (\n            Configuration.getRegistrationType() !== 'disabled' &&\n            SC.ENVIRONMENT.siteSettings.siteloginrequired === 'T'\n        ) {\n            return HeaderSimplifiedView;\n        }\n    },\n\n    getFooterView: function() {\n        // We've got to disable passwordProtectedSite feature if customer registration is disabled.\n        if (\n            Configuration.getRegistrationType() !== 'disabled' &&\n            SC.ENVIRONMENT.siteSettings.siteloginrequired === 'T'\n        ) {\n            return FooterSimplifiedView;\n        }\n    },\n\n    render: function(...args): void {\n        const { checkoutApp } = this.options.application.getConfig();\n        BackboneView.prototype.render.apply(this, args);\n        if (this.$containerModal && checkoutApp.skipLogin) {\n            this.$('header, h3').remove();\n            this.$('[data-action=\"sign-in-now\"]').attr({\n                'data-toggle': 'show-in-modal',\n                href: 'login'\n            });\n        }\n    },\n\n    // @method showSuccess\n    showSuccess: function() {\n        SC.ENVIRONMENT.reset_password_confirmation_email = true;\n        Backbone.history.navigate('login-register', { trigger: true });\n    },\n\n    // @method signInNowClick\n    signInNowClick: LoginRegisterUtils.skipLoginCloseModal,\n\n    // @method saveForm override original saveForm method so\n    // the skip-login modal is not closed, if any.\n    saveForm: function(...args) {\n        const { checkoutApp } = this.options.application.getConfig();\n        // we don't want to close the modal, if any, on saveForm\n        if (this.$containerModal && checkoutApp.skipLogin) {\n            this.inModal = false;\n        }\n        return BackboneView.prototype.saveForm.apply(this, args).done(function() {\n            this.inModal = true;\n        });\n    },\n\n    // @method getcContext @return LoginRegister.ForgotPassword.View.Context\n    getContext: function() {\n        // @class LoginRegister.ForgotPassword.View.Context\n        return {};\n    }\n});\n\nexport = LoginRegisterForgotPasswordView;\n"]}