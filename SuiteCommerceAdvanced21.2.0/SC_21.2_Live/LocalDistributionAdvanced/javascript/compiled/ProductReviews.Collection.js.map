{"version":3,"sources":["ProductReviews.Collection.ts"],"names":[],"mappings":"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","file":"ProductReviews.Collection.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductReviews.Collection\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport Model = require('./ProductReviews.Model');\nimport BackboneCachedCollection = require('../../BackboneExtras/JavaScript/Backbone.CachedCollection');\n\n// @class ProductReviews.Collection\n// Returns an extended version of the CachedCollection constructor\n// @extends Backbone.CachedCollection\nexport = BackboneCachedCollection.extend({\n    url: Utils.addParamsToUrl(Utils.getAbsoluteUrl('services/ProductReviews.Service.ss'), {\n        'no-cache': new Date().getTime()\n    }),\n\n    model: Model,\n\n    // pre-processes the data after fetching\n    // http://backbonejs.org/#Model-parse\n    parse: function(data) {\n        // We set up some global attributes to the Collection\n        this.page = data.page;\n        this.recordsPerPage = data.recordsPerPage;\n        this.totalRecordsFound = data.totalRecordsFound;\n        this.totalPages = Math.ceil(this.totalRecordsFound / this.recordsPerPage);\n\n        // and we return only the collection from the server\n        return data.records;\n    },\n\n    // @method parseOptions @param {Object} options\n    parseOptions: function(options) {\n        if (options) {\n            if (options.filter) {\n                options.filter = options.filter.id;\n            }\n\n            if (options.sort) {\n                options.sort = options.sort.id;\n            }\n\n            options.itemid = this.itemid;\n        }\n\n        return options;\n    },\n\n    // @method getReviewParams Parse url options and return product reviews api params\n    // @param {filter:String,itemid:String,sort:String} options url parameters\n    // @return {Object} reviews_params\n    getReviewParams: function(options) {\n        let sort;\n        let filter;\n        // Cumputes Params for Reviews API\n        let reviews_params: any = {};\n\n        if (options) {\n            if (options.itemid) {\n                reviews_params.itemid = options.itemid;\n            }\n\n            // if there's a filter in the URL\n            if (options.filter) {\n                // we get it from the config file, based on its id\n                filter =\n                    _.find(Configuration.get('productReviews.filterOptions'), function(i) {\n                        return i.id === options.filter;\n                    }) || {};\n            } else {\n                // otherwise we just get the default one\n                filter =\n                    _.find(Configuration.get('productReviews.filterOptions'), function(i) {\n                        return i.isDefault;\n                    }) || {};\n            }\n            // and we add it to the reviews_params obj\n            reviews_params = _.extend(reviews_params, filter.params);\n\n            // same for sorting, if it comes as a parameter\n            if (options.sort) {\n                // we get it from the config file\n                sort =\n                    _.find(Configuration.get('productReviews.sortOptions'), function(i) {\n                        return i.id === options.sort;\n                    }) || {};\n            } else {\n                // otherwise we just get the default one\n                sort =\n                    _.find(Configuration.get('productReviews.sortOptions'), function(i) {\n                        return i.selected;\n                    }) || {};\n            }\n            if (Object.keys(sort).length === 0) {\n                sort =\n                    _.find(Configuration.get('productReviews.sortOptions'), function(i) {\n                        return i.isDefault;\n                    }) || {};\n            }\n            // and we add it to the reviews_params obj\n            const params =\n                options.order === 'inverse'\n                    ? { order: `${sort.params.order.split(':')[0]}:DESC` }\n                    : sort.params;\n            reviews_params = _.extend(reviews_params, params);\n        }\n\n        // If there's a specific page in the url, we pass that to\n        // if there isn't, we just get the first oen\n        reviews_params = _.extend(reviews_params, { page: (options && options.page) || 1 });\n\n        return reviews_params;\n    },\n\n    // @method update\n    // custom method called by ListHeader view  it receives the currently applied filter,\n    // currently applied sort and currently applied order\n    // @param options\n    update: function(options) {\n        const data = this.getReviewParams(this.parseOptions(options));\n\n        if (data.order) {\n            // check for inverse results\n            data.order =\n                options.order && options.order < 0\n                    ? data.order.replace('ASC', 'DESC')\n                    : data.order.replace('DESC', 'ASC');\n        }\n\n        this.fetch({\n            data: data,\n            reset: true,\n            killerId: options.killerId\n        });\n    }\n});\n"]}