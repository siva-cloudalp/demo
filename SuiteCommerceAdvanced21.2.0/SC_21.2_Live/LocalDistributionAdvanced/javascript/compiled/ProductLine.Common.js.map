{"version":3,"sources":["ProductLine.Common.ts"],"names":[],"mappings":"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","file":"ProductLine.Common.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ProductLine.Common\"/>\n\nimport * as _ from 'underscore';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport ProductLineCommonUrl = require('./ProductLine.Common.Url');\nimport ProductLineCommonImage = require('./ProductLine.Common.Image');\n\n// @class ProductLine.Common\nconst ProductLineCommon = {\n    // @method getSku Gets the SKU for the current line or product based on the current item\n    // @return {String}\n    getSku: function getSku() {\n        return this.getItem().getSku();\n    },\n\n    // @method getOption\n    // Returns an item option\n    // @param {String} cart_option_id\n    // @return {Item.Option.Model}\n    getOption: function getOption(cart_option_id) {\n        return this.get('options').findWhere({ cartOptionId: cart_option_id });\n    },\n    // @method getVisibleOptions If the property ItemOptions.showOnlyTheListedOptions is true return only the\n    // transactions item options and transaction column fields models configured in the property ItemOptions.optionsConfiguration,\n    // otherwise return all of them. The array is going to be ordered by \"index\"\n    // @return {Array<Product.Model|Transaction.Line.Model>}\n    getVisibleOptions: function getVisibleOptions() {\n        let collection;\n        if (Configuration.get('ItemOptions.showOnlyTheListedOptions')) {\n            collection = this.get('options').filter(function(option) {\n                return _.find(Configuration.get('ItemOptions.optionsConfiguration'), function(\n                    optionConfiguration: any\n                ) {\n                    return optionConfiguration.cartOptionId === option.get('cartOptionId');\n                });\n            });\n        } else {\n            collection = this.get('options').models;\n        }\n\n        return _.sortBy(collection, function(option: any) {\n            return option.get('index');\n        });\n    },\n    // @method extendOptionsFromItem Extend the options in the product or line passed in based on the option from the item.\n    // Notice that is the item who read from the configuration\n    // @param {Item.Model} item\n    // @param {Product.Model|Transaction.Line.Model} productline\n    // @return {void}\n    extendOptionsFromItem: function extendOptionsFromItem(item, productline) {\n        // Here we make sure that the options collection of the line always\n        // (event when the line is loaded from an already created transaction via SuiteScript) have all the properties\n        item.get('options').each(function(item_option) {\n            // IMPORTANT: The comparison here is done in lowercase because both the LiveOrder.Model and the Transaction.Model in\n            // the back-end send their option in lower case. However the search API returns some option (Gift certificate ones) in\n            // Uppercase and this case is require to be preserved so the Commerce API actually add the item into the cart.\n            const item_option_cartId = item_option.get('cartOptionId').toLowerCase();\n            const productline_option = productline.get('options').find(function(product_option) {\n                return product_option.get('cartOptionId').toLowerCase() === item_option_cartId;\n            });\n\n            if (productline_option) {\n                productline_option.attributes = _.extend(\n                    {},\n                    productline_option.attributes,\n                    item_option.attributes\n                );\n            }\n        });\n    },\n\n    // @method toJSON Override default method to send only require data to the back-end\n    // @return {Transaction.Line.Model.JSON}\n    toJSON: function toJSON() {\n        // @class Transaction.Line.Model.JSON Class used to send a transaction line representation to the back-end\n        // without sending all the heavy weight JSON that is not totally needed by the back-end\n        return {\n            // @property {Transaction.Line.Model.JSON.Item} item\n            // @class Transaction.Line.Model.JSON.Item\n            item: {\n                // @property {String} internalid\n                internalid: this.getItemId(),\n                // @property {String} type\n                type: this.attributes.item.get('itemtype')\n            },\n            // @class Transaction.Line.Model.JSON\n            // @property {Number} quantity\n            quantity: this.attributes.quantity,\n            // @property {String} internalid\n            internalid: this.attributes.internalid,\n            // @property {Array<ProductLine.Option.Model.JSON>} options\n            options: this.get('options').toJSON(),\n            // @property {Number} shipaddress\n            shipaddress: this.attributes.shipaddress,\n            // @property {Number} shipmethod\n            shipmethod: this.attributes.shipmethod,\n            // @property {Object} location\n            location:\n                (this.attributes.location &&\n                    this.attributes.location.attributes &&\n                    this.attributes.location.attributes.internalid) ||\n                '',\n            // @property {Object} fulfillmentChoice\n            fulfillmentChoice: this.attributes.fulfillmentChoice || 'ship'\n        };\n        // @class Transaction.Line.Model\n    }\n};\n\nexport = _.extend(ProductLineCommon, ProductLineCommonUrl, ProductLineCommonImage);\n"]}