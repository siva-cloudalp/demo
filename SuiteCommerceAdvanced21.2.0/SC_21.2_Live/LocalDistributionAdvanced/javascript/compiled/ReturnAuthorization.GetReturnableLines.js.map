{"version":3,"sources":["ReturnAuthorization.GetReturnableLines.ts"],"names":[],"mappings":"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","file":"ReturnAuthorization.GetReturnableLines.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ReturnAuthorization.GetReturnableLines\"/>\n// @mdoule ReturnAuthorization.GetReturnableLines\n\nimport * as _ from 'underscore';\n// Returnable lines calculator.\n// Constructor\n// model: Invoice or order model\nconst RetrunableLinesCalculator = function(model, options) {\n    const default_options = {\n        notConsiderFulfillments: false\n    };\n\n    this.options = _.extend(default_options, options);\n\n    // We calculate the the group of returnable lines from invoices and placed orders\n    this.createdFrom = model;\n\n    // hash containing the ids of the lines that are returnable\n    // The control over returnable lines is made based on the quantity of each line after the fullfiles lines and already returned lines is substracted\n    this.line_ids = {};\n};\n\n// @class ReturnAuthorization.GetReturnableLines\n_.extend(RetrunableLinesCalculator.prototype, {\n    // Initialize lines quantities to: 0 so the fullfilments are sumed or  to the quantity of each line\n    initialize: function() {\n        const lines = this.createdFrom.get('lines');\n        lines.each(function(line) {\n            this.line_ids[line.id] = this.options.notConsiderFulfillments\n                ? line.get('quantity')\n                : 0;\n        }, this);\n\n        return this;\n    },\n\n    // calculate from all fulfillments the quantity each line is fulfilled (SUM each quantity to the lines)\n    _setFulfilledQuantities: function() {\n        const created_from = this.createdFrom;\n        const lines = created_from.get('lines');\n        const self = this;\n        const fullfilments = created_from.get('fulfillments');\n\n        if (fullfilments) {\n            fullfilments.each(function(fulfillment) {\n                fulfillment.get('lines').each(function(line) {\n                    const same_line = lines.get(line.get('internalid'));\n\n                    if (same_line) {\n                        self.line_ids[same_line.id] = parseFloat(line.get('quantity'));\n                    }\n                });\n            });\n        }\n\n        return this;\n    },\n\n    // calculate for all returns already made the quantty per line that is already returned (SUBSTRACT each quantity to the line ids)\n    _setReturnedQuantities: function() {\n        const created_from = this.createdFrom;\n        const self = this;\n        const lines = created_from.get('lines');\n\n        created_from.get('returnauthorizations').each(function(sibling) {\n            if (sibling.get('status').internalid !== 'cancelled') {\n                sibling.get('lines').each(function(line) {\n                    const item_id = line.get('item').id;\n                    const same_item_line = lines.find(function(line) {\n                        return line.get('item').id === item_id;\n                    });\n\n                    // IMPORTANT: Here we sum quatities because the return authirization quantity is negative!\n                    // ans we parse it as the quantity come as a string from the server\n                    if (same_item_line && same_item_line.id && self.line_ids[same_item_line.id]) {\n                        self.line_ids[same_item_line.id] -= parseFloat(line.get('quantity'));\n                    }\n                });\n            }\n        });\n\n        return this;\n    },\n\n    // based on the current state of the line_ids (call this method last, after all above) removes lines that are not returnable\n    // Returns an object withj two properties; validLines: array of valid line models, and invalidLines: array of invalid line models\n    _setInvalidLines: function() {\n        const valid_lines = [];\n        const valid_line_ids_quantities = {};\n        const invalid_lines = [];\n        const created_from = this.createdFrom;\n        const self = this;\n        const lines = created_from.get('lines');\n\n        _.each(_.keys(this.line_ids), function(line_id) {\n            const original_line = lines.get(line_id);\n\n            // if the line quantity if greater than 0, it means that there are fulfillments made that are not returned (fulfillment quantity - returned quantity)\n            // item _isReturnable is controlled based on the item type in the itemkey mapping. To sum up:\n            // IF the line has quantity that can be retuned and the item's line is returnable THEN is a valid line to return\n            if (self.line_ids[line_id] && original_line.get('item').get('_isReturnable')) {\n                valid_lines.push(original_line);\n                valid_line_ids_quantities[line_id] = self.line_ids[line_id];\n            } else {\n                invalid_lines.push(original_line);\n            }\n        });\n\n        return {\n            validLines: valid_lines,\n            invalidLines: invalid_lines,\n            validLineIdsQuantities: valid_line_ids_quantities\n        };\n    },\n\n    // based on the current model generates an object with two array of model, valid (returnable) and invalid (nopn-returnable) lines\n    calculateLines: function() {\n        if (!this.options.notConsiderFulfillments) {\n            return this.initialize()\n                ._setFulfilledQuantities()\n                ._setReturnedQuantities()\n                ._setInvalidLines();\n        }\n\n        return this.initialize()\n            ._setReturnedQuantities()\n            ._setInvalidLines();\n    }\n});\n\nexport = RetrunableLinesCalculator;\n"]}