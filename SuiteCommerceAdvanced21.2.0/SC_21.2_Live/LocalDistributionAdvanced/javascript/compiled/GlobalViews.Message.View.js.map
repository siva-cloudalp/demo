{"version":3,"sources":["GlobalViews.Message.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAYW,QAAA,sBAAsB,GAAQ,YAAY,CAAC,MAAM,CAAC;QAC3D,QAAQ,EAAE,wBAAwB;QAElC,qBAAqB;QACrB,8DAA8D;QAC9D,iBAAiB;QACjB,KAAK,EAAE;YACH,qCAAqC,EAAE,cAAc;SACxD;QAED,IAAI,EAAE,SAAS,IAAI,CAAC,YAAY,EAAE,IAAI;YAClC,YAAY,CAAC,KAAK,EAAE,CAAC;YAErB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC,EAAE;gBAClB,UAAU,CAAC;oBACP,YAAY,CAAC,OAAO,CAAC;wBACjB,YAAY,CAAC,KAAK,EAAE,CAAC;oBACzB,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,IAAI,CAAC,CAAC;aACZ;QACL,CAAC;QAED,YAAY,EAAE,SAAS,YAAY,CAAC,CAAC;YACjC,OAAO,CACH,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CACxF,CAAC;QACN,CAAC;QAED,UAAU,EAAE;YACR,wCAAwC,EAAE;gBACtC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YAClC,CAAC;SACJ;QAED,qBAAqB;QACrB,6CAA6C;QAC7C,UAAU,EAAE,SAAS,UAAU;YAC3B,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;YAChF,IAAM,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YACrF,IAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;YAE9E,OAAO;gBACH,6BAA6B;gBAC7B,OAAO,EAAE,OAAO;gBAChB,mCAAmC;gBACnC,YAAY,EAAE,cAAc;gBAC5B,+BAA+B;gBAC/B,SAAS,EAAE,SAAS;gBACpB,+BAA+B;gBAC/B,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;gBACjC,0BAA0B;gBAC1B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,0BAAwB,IAAI,CAAC,OAAO,CAAC,IAAM,CAAC,CAAC,CAAC,EAAE;gBAC1E,0CAA0C;gBAC1C,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc;gBAC1E,6BAA6B;gBAC7B,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACrC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;oBACtB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC5B,wCAAwC;gBACxC,iBAAiB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;aAC7C,CAAC;YACF,mCAAmC;QACvC,CAAC;KACJ,CAAC,CAAC;;AAEH,oDAAoD;AACpD,+EAA+E;AAC/E,4EAA4E;AAC5E,0FAA0F;AAC1F,iFAAiF;AACjF,wEAAwE;AACxE,gEAAgE","file":"GlobalViews.Message.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"GlobalViews.Message.View\"/>\n/// <reference path=\"../../Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as _ from 'underscore';\nimport * as global_views_message_tpl from 'global_views_message.tpl';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class GlobalViews.Message.View @extends Backbone.View\nexport type GlobalViewsMessageView = any;\nexport const GlobalViewsMessageView: any = BackboneView.extend({\n    template: global_views_message_tpl,\n\n    // @method initialize\n    // @param {GlobalViews.Message.View.InitializeOptions} options\n    // @return {Void}\n    event: {\n        'click [data-action=\"close-message\"]': 'closeMessage'\n    },\n\n    show: function show($placeholder, time) {\n        $placeholder.empty();\n\n        this.render();\n        $placeholder.html(this.$el).show();\n\n        if (time && time > 0) {\n            setTimeout(function() {\n                $placeholder.fadeOut(function() {\n                    $placeholder.empty();\n                });\n            }, time);\n        }\n    },\n\n    closeMessage: function closeMessage(e) {\n        return (\n            _.isFunction(this.options.closeMessageHandler) && this.options.closeMessageHandler(e)\n        );\n    },\n\n    childViews: {\n        'global-views-message-childview-message': function() {\n            return this.options.childView;\n        }\n    },\n\n    // @method getContext\n    // @return {GlobalViews.Message.View.Context}\n    getContext: function getContext() {\n        const has_error_code = this.options.message && !!this.options.message.errorCode;\n        const message = has_error_code ? this.options.message.message : this.options.message;\n        const errorCode = has_error_code ? this.options.message.errorCode : undefined;\n\n        return {\n            // @property {String} message\n            message: message,\n            // @property {Boolean} hasErrorCode\n            hasErrorCode: has_error_code,\n            // @property {String} errorCode\n            errorCode: errorCode,\n            // @property {Boolean} closable\n            closable: !!this.options.closable,\n            // @property {String} type\n            type: this.options.type ? `global-views-message-${this.options.type}` : '',\n            // @property {Boolean} showMultipleMessage\n            showMultipleMessage: !!_.isObject(this.options.message) && !has_error_code,\n            // @property {Array} messages\n            messages: _.isArray(this.options.message)\n                ? this.options.message\n                : [this.options.message],\n            // @property {Boolean} showStringMessage\n            showStringMessage: !this.options.childView\n        };\n        // @class GlobalViewss.Message.View\n    }\n});\n\n// @class GlobalViews.Message.View.InitializeOptions\n// @property {String|Array<String>?} message Message or list of message to show\n// @property {Boolean} closable Indicate if the message can be closed or not\n// @property {String} type Optional class name of be added into the resulting HTML message\n// @property {Function} closeMessageHandler Optional handler for the close action\n// @property {SC.View} childView Optional view used to show the message,\n// When a view is specified the message property will be ignored\n"]}