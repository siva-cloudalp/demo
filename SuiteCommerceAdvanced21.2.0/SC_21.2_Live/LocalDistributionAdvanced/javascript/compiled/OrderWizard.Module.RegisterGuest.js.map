{"version":3,"sources":["OrderWizard.Module.RegisterGuest.ts"],"names":[],"mappings":"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","file":"OrderWizard.Module.RegisterGuest.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"OrderWizard.Module.RegisterGuest\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as order_wizard_register_guest_module_tpl from 'order_wizard_register_guest_module.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\n\nimport { WizardStepModule } from '../../Wizard/JavaScript/Wizard.StepModule';\nimport { GlobalViewsMessageView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Message.View';\nimport { ProfileModel } from '../../../Commons/Profile/JavaScript/Profile.Model';\n\nimport AccountRegisterModel = require('../../Account/JavaScript/Account.Register.Model');\nimport LoginRegisterRegisterView = require('../../LoginRegister/JavaScript/LoginRegister.Register.View');\nimport Tracker = require('../../../Commons/Tracker/JavaScript/Tracker');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// @class OrderWizard.Module.RegisterGuest @extends WizardModule.extend\nexport = WizardStepModule.extend({\n    // @property {Function} template\n    template: order_wizard_register_guest_module_tpl,\n\n    // @property {String} className\n    className: 'OrderWizard.Module.RegisterGuest',\n\n    // @property {Object} events\n    events: {\n        'submit form': 'saveForm',\n        'click [data-action=\"remove-button\"]': 'removeButton'\n    },\n\n    // @method initialize Defines this module as a composite view\n    initialize: function() {\n        WizardStepModule.prototype.initialize.apply(this, arguments);\n\n        const self = this;\n        this.model = new AccountRegisterModel();\n\n        (<any>Backbone).Validation.bind(this);\n\n        this.profileModel = this.profileModel || ProfileModel.getInstance();\n\n        // when user is successfully registered we re-render the header\n        this.profileModel.on('change', function(profileModel) {\n            if (profileModel.get('isLoggedIn') === 'T') {\n                self.wizard.application.getLayout().updateHeader();\n            }\n        });\n    },\n\n    destroy: function() {\n        WizardStepModule.prototype.destroy.apply(this, arguments);\n        this.profileModel.off(null, null, this);\n    },\n\n    // @method removeButton Removed the remove button\n    removeButton: function() {\n        this.$el.find('[data-action=\"remove-button\"]').remove();\n    },\n\n    // @property {Array<String>} errors List of errors handle by this module\n    errors: [\n        'AN_ACCOUNT_WITH_THAT_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS',\n        'ERR_WS_CUSTOMER_REGISTRATION',\n        'ERR_WS_INVALID_EMAIL',\n        'USER_ERROR'\n    ],\n\n    // @method showSuccess Method called when the save operation finish successfully to show a confirmation message\n    showSuccess: function() {\n        const global_view_message = new GlobalViewsMessageView({\n            message: Utils.translate('Account successfully created'),\n            type: 'success'\n        });\n\n        this.$('form')\n            .empty()\n            .html(global_view_message.render().$el.html());\n    },\n\n    // @method trackEvent Track the creation of a user account\n    // @param {Function} callback\n    trackEvent: function(callback: Function) {\n        Tracker.getInstance().trackEvent({\n            category: 'create-account',\n            action: 'click',\n            value: 1,\n            callback: callback\n        });\n    },\n\n    // @method saveForm Handle the submit event of the account form\n    // @param {HTMLEvent} e\n    saveForm: function(e) {\n        e.preventDefault();\n\n        this.clearError();\n\n        const self = this;\n        const $target = jQuery(e.target);\n        const user_data = (<any>$target).serializeObject();\n\n        this.model.set(user_data, { silent: true });\n\n        if (this.model.isValid(true)) {\n            this.profileModel = this.profileModel || ProfileModel.getInstance();\n            this.$savingForm = $target.closest('form');\n\n            const button = $target.find('button');\n\n            button && button.prop('disabled', true);\n\n            const promise = this.model.save(user_data);\n\n            if (promise) {\n                promise\n                    .done(function() {\n                        self.trackEvent();\n                        self.profileModel.set(self.model.get('user'));\n                        self.showSuccess();\n                    })\n                    .fail(function(jqXhr) {\n                        button && button.prop('disabled', false);\n                        jqXhr.preventDefault = true;\n                        self.wizard.manageError(JSON.parse(jqXhr.responseText));\n                    });\n            }\n        }\n    },\n\n    // @method saveForm Override default implementation to handle the case when the error code indicate duplicated user email\n    showError: function() {\n        if (\n            this.error &&\n            this.error.errorCode === 'AN_ACCOUNT_WITH_THAT_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS'\n        ) {\n            this.error.errorMessage = this.error.errorMessage.replace(\n                \"href='{1}'\",\n                'href=\"#\" data-touchpoint=\"login\"'\n            );\n        }\n\n        WizardStepModule.prototype.showError.apply(this, arguments);\n    },\n\n    // @method isActive Override default implementation to be active when the user is guest and registration type is not disabled\n    // @return {Boolean}\n    isActive: function(): boolean {\n        return (\n            this.profileModel.get('isGuest') === 'T' &&\n            Configuration.getRegistrationType() !== 'disabled'\n        );\n    },\n\n    // @property {Object} childViews\n    childViews: {\n        RegisterGuestForm: function() {\n            this.model.set(\n                {\n                    firstname: this.profileModel.get('firstname'),\n                    lastname: this.profileModel.get('lastname'),\n                    email: this.profileModel.get('email'),\n                    password: '',\n                    password2: ''\n                },\n                { silent: true }\n            );\n\n            return new LoginRegisterRegisterView({ showFormFieldsOnly: true, model: this.model });\n        }\n    }\n});\n"]}