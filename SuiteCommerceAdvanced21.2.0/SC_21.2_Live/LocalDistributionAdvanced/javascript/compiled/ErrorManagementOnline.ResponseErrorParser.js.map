{"version":3,"sources":["ErrorManagementOnline.ResponseErrorParser.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAOF,IAAM,mBAAmB,GAAQ,SAAS,0BAA0B,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO;QAC5F,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,WAAW,CAAC;QAEhB,IAAI;YACA,0FAA0F;YAC1F,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAChD,IAAI,QAAQ,EAAE;gBACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACzC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;wBACvB,OAAO,GAAG,KAAK,CAAC,oBAAoB,CAChC,QAAQ,CAAC,SAAS,IAAI,wBAAwB,EAC9C,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;4BAC5B,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;4BAC1B,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAC3B,EAAE,CACL,CAAC;wBACF,MAAM;qBACT;iBACJ;aACJ;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aACzF;YACD,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;SACrF;QACD,OAAO,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,OAAS,mBAAmB,CAAC","file":"ErrorManagementOnline.ResponseErrorParser.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"ErrorManagementOnline.ResponseErrorParser\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nconst ResponseErrorParser: any = function ErrorManagementErrorParser(jqXhr, messageKeys, options) {\n    let message = null;\n    let current_key;\n\n    try {\n        // Tries to parse the responseText and try to read the most common keys for error messages\n        const response = JSON.parse(jqXhr.responseText);\n        if (response) {\n            for (let i = 0; i < messageKeys.length; i++) {\n                current_key = messageKeys[i];\n                if (response[current_key]) {\n                    message = Utils.getTranslatedMessage(\n                        response.errorCode || 'ERR_WS_UNHANDLED_ERROR',\n                        _.isArray(response[current_key])\n                            ? response[current_key][0]\n                            : response[current_key],\n                        []\n                    );\n                    break;\n                }\n            }\n        }\n    } catch (err) {\n        if (options) {\n            console.error('Impossible to parse backend error - Request', JSON.stringify(options));\n        }\n        console.error('Impossible to parse backend error - Response', jqXhr.responseText);\n    }\n    return message;\n};\n\nexport = ResponseErrorParser;\n"]}