{"version":3,"sources":["SC.VisualComponent.ts"],"names":[],"mappings":"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","file":"SC.VisualComponent.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"SC.VisualComponent\"/>\n\nimport '../../BackboneExtras/JavaScript/Backbone.View.render';\nimport * as _ from 'underscore';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\nimport { SCBaseComponentChildViewsComponent } from './SC.BaseComponent.ChildViewsComponent';\nimport { isModuleLoaded } from '../../Core/JavaScript/ExportedModulesNames';\nimport { JSONObject } from '../../Utilities/JavaScript/Utils.Interfaces';\nimport { GlobalViewsMessageView } from '../../GlobalViews/JavaScript/GlobalViews.Message.View';\nimport { SCBaseComponent } from './SC.BaseComponent';\n\n// @module SC\n\nenum NotificationsTypes {\n    ERROR = 'error',\n    WARNING = 'warning',\n    SUCCESS = 'success',\n    INFO = 'info'\n}\n\n// @class SC.BaseComponent Base abstract class for front-end components. Use method @?method SC.SC.BaseComponent.extend to build concrete components.\n// Implements helper methods for Views manipulation\n// @extends SC.CancelableEvents\nconst visual_component = _.extend({}, SCBaseComponent, {\n    // @property {String} componentName The name which identify this kind of component. This name is used both for registering a new component and\n    // getting a component implementation with @?class SC.ComponentContainer\n    // @extlayer\n\n    // @property {ApplicationSkeleton} application\n\n    // @method extend Extends the current component to generate a child one\n    // @public @extlayer\n    // @param {Object} child_component Any object with properties/methods that will be used to generate the SC.Component that will be returned\n    // @return {SC.BaseComponent}\n    extend: function extend(child_component) {\n        if (\n            !child_component ||\n            (!child_component.componentName && !this.componentName) ||\n            !child_component.application\n        ) {\n            return this._reportError(\n                'INVALID_PARAM',\n                'Invalid SC.Component. Property \"componentName\" and \"application\" are required.'\n            );\n        }\n\n        this.application = child_component.application;\n\n        const new_component = _.extend({}, this, child_component);\n\n        new_component.application\n            .getLayout()\n            .getCancelableEmitter()\n            .on('beforeAppendView', view => new_component._onApplicationBeforeView(view));\n\n        new_component.application\n            .getLayout()\n            .on('afterAppendView', view => new_component._onApplicationAfterAppendView(view));\n\n        return new_component;\n    },\n\n    // @method _onApplicationBeforeView Internal method used to automatically notify when views of the current component are about to be shown (BEFORE append view)\n    // @private\n    // @param {Backbone.View} view The view that will be shown\n    // @return {jQuery.Deferred|Void}\n    _onApplicationBeforeView: function _onApplicationBeforeView(view) {\n        if (this._isViewFromComponent(view, true)) {\n            try {\n                const self = this;\n                this.viewToBeRendered = view;\n                // @event {Void} showContent Trigger after a PDP is rendered.\n                // @public\n                return this.cancelableTrigger(\n                    'beforeShowContent',\n                    this._getViewIdentifier(view)\n                ).always(function() {\n                    self.viewToBeRendered = null;\n                });\n            } catch (e) {\n                this.viewToBeRendered = null;\n                throw e;\n            }\n        }\n    },\n\n    // @method _onApplicationAfterAppendView Internal method used to automatically notify when views of the current component where shown (AFTER append view)\n    // @private\n    // @param {Backbone.View} view The view that was shown\n    // @return {Void}\n    _onApplicationAfterAppendView: function _onApplicationAfterAppendView(view) {\n        if (this._isViewFromComponent(view, true)) {\n            this.viewToBeRendered = null;\n            // @event {Void} afterShowContent Trigger after a PDP is rendered.\n            // @public\n            this.cancelableTrigger('afterShowContent', this._getViewIdentifier(view));\n        }\n    },\n\n    // @method _getViewIdentifier Given a view that belongs to the current component, returns the \"type\"/\"kind\" of view.\n    // This is used to determine what view among all the view of the current component is being shown\n    // @param {Backbone.View} view\n    // @return {String}\n    // @private\n    _getViewIdentifier: function _getViewIdentifier(view): string {\n        return view && view.attributes && view.attributes.id;\n    },\n\n    _isViewComponent: function _isViewComponent(viewIdentifier: string): boolean {\n        const componentIdentifiers = this._getComponentIdentifiers();\n        let isComponent = false;\n\n        _.each(componentIdentifiers, componentIdentifier => {\n            isComponent = isComponent || viewIdentifier === componentIdentifier;\n        });\n\n        return isComponent;\n    },\n\n    // This should be abstract in the future\n    _getComponentIdentifiers: function _getComponentIdentifiers(): string[] {\n        return [];\n    },\n\n    // @method _isViewFromComponent Indicate if the passed-in the View is a View of the current component.\n    // The aim of this method is to be overwritten\n    // @private\n    // @param {Backbone.View} view Any view of the system\n    // @param {Boolean} is_instance Indicate if the passed in view is an instance or a constructor function.\n    // @return {Boolean} True in case the passed in View is a view of the current Component, false otherwise\n    _isViewFromComponent: function _isViewFromComponent(): boolean {\n        return false;\n    },\n\n    _currentAddContextProperty: {},\n    _currentAddEventHandler: {},\n\n    // @method setChildViewIndex Change the position of a Child View inside a container\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will have the Child View to change the index\n    // @param {String} placeholder_selector Identifier of the location where the view is located inside the specified View (view_id)\n    // @param {String} view_name Identifier of an specific view into the placeholder\n    // @param {Number} index The new index to position the Child View\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    setChildViewIndex: function setChildViewIndex(\n        view_id: string,\n        placeholder_selector: string,\n        view_name: string,\n        // HEADS UP! we left this \"any\" to avoid an error in line 142 (index = view_name).\n        // Should be solved once we migrate this file by using two signatures for this method\n        index: any\n    ) {\n        if (arguments.length === 3 || arguments.length === 4) {\n            if (arguments.length === 3) {\n                index = view_name;\n                view_name = placeholder_selector;\n                placeholder_selector = view_id;\n                view_id = this._getDefaultView();\n            }\n\n            if (!_.isNumber(index)) {\n                return this._reportError('INVALID_PARAM', 'The specified index is not valid.');\n            }\n\n            this._setChildViewIndex(view_id, placeholder_selector, view_name, index);\n        } else {\n            return this._reportError('INVALID_PARAM_COUNT', 'Incorrect number of parameters');\n        }\n    },\n\n    _setChildViewIndex: function _setChildViewIndex(\n        viewId: string,\n        placeholderSelector: string,\n        viewName: string,\n        index: number\n    ) {\n        if (isModuleLoaded(viewId)) {\n            if (!this._isViewComponent(viewId)) {\n                console.warn(\n                    'INVALID_PARAM',\n                    `Invoking the method \"setChildViewIndex\" with an incorrect parameter: (${viewId}).\n\t\t\t\tIt will still work but it will be deprecated in the future. Please check the documentation.`\n                );\n            }\n            SCBaseComponentChildViewsComponent.setChildViewIndex(\n                viewId,\n                placeholderSelector,\n                viewName,\n                index\n            );\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    _getDefaultView: function _getDefaultView() {\n        if (this.DEFAULT_VIEW) {\n            return this.DEFAULT_VIEW;\n        }\n        return this._reportError(\n            'UNDEFINED_DEFAULTVIEW',\n            'The \"DEFAULT_VIEW\" was not defined in the Component'\n        );\n    },\n\n    // @method addChildView Add a child view in the data-view 'data_view' passed as parameter in the default view of the component\n    addChildView: function addChildView(data_view, view_constructor) {\n        const generator = {};\n        const view_id = _.uniqueId('view');\n\n        generator[data_view] = {};\n        generator[data_view][view_id] = {\n            childViewConstructor: view_constructor\n        };\n\n        this.addChildViews(this._getDefaultView(), generator);\n\n        return view_id;\n    },\n    // @method registerView adds a view to be used in any template within the child views hierarchy\n    registerView: function registerView(dataView: string, viewConstructor) {\n        const generator = {};\n        generator[dataView] = {};\n        generator[dataView][dataView] = {\n            childViewConstructor: viewConstructor\n        };\n        this.addChildViews(this._getDefaultView(), generator);\n    },\n\n    // Add a new contextData to the view of the component\n    // {String} (optional) viewId The id of the view to add the new contextData\n    // {String} name The name of the new contextData\n    // {Function} func The function that will called when requesting the new contextData\n    addContextData: function(viewId: string, name: string, func: any) {\n        if (arguments.length === 2) {\n            func = name;\n            name = viewId;\n            viewId = this._getDefaultView();\n        }\n\n        if (!_.isString(name)) {\n            this._reportError('INVALID_PARAM', 'The specified name is not valid.');\n        }\n\n        if (!_.isFunction(func)) {\n            this._reportError('INVALID_PARAM', 'The specified function is not valid.');\n        }\n\n        if (isModuleLoaded(viewId)) {\n            SCBaseComponentChildViewsComponent.addContextData(viewId, name, func);\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method addChildViews Adds a child view/child views given by the child_views parameter into the specified view of the current component\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will be extended with an extra/s child view/s\n    // @param {ChildViews} child_views Identifier of the location where the new view will be located inside the specified View (view_id)\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    addChildViews: function addChildViews(view_id: string, child_views: any) {\n        return this._addChildViews(view_id, child_views);\n    },\n\n    _addChildViews: function _addChildViews(viewId: string, childViews: any) {\n        if (isModuleLoaded(viewId)) {\n            if (!this._isViewComponent(viewId)) {\n                console.warn(\n                    'INVALID_PARAM',\n                    `Invoking the method \"addChildViews\" with an incorrect parameter: (${viewId}).\n\t\t\t\tIt will still work but it will be deprecated in the future. Please check the documentation.`\n                );\n            }\n            SCBaseComponentChildViewsComponent.addChildViews(viewId, childViews);\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method removeChildView Removes a child view for a given view id\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will be extended with an extra child view\n    // @param {String} placeholder_selector Identifier of the location where the new view will be located inside the specified View (view_id)\n    // @param {string} view_name Identifier of an specific view into the placeholder\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    removeChildView: function removeChildView(\n        view_id: string,\n        placeholder_selector: string,\n        view_name: string\n    ): void {\n        // If removeChildView is called with only 1 parameter, it will be the placeholder_selector only, and it will remove it from the default_view\n        if (arguments.length < 1 || arguments.length > 3) {\n            return this._reportError('INVALID_PARAM_COUNT', 'Incorrect number of parameters');\n        }\n        if (arguments.length === 2) {\n            view_name = placeholder_selector;\n            placeholder_selector = view_id;\n            view_id = this._getDefaultView();\n        } else if (arguments.length === 1) {\n            view_name = view_id;\n            placeholder_selector = view_id;\n            view_id = this._getDefaultView();\n        }\n\n        this._removeChildView(view_id, placeholder_selector, view_name);\n    },\n\n    _removeChildView: function removeChildView(\n        viewId: string,\n        placeholderSelector: string,\n        viewName: string\n    ): void {\n        if (isModuleLoaded(viewId)) {\n            if (!this._isViewComponent(viewId)) {\n                console.warn(\n                    'INVALID_PARAM',\n                    `Invoking the method \"removeChildView\" with an incorrect parameter: (${viewId}).\n\t\t\t\tIt will still work but it will be deprecated in the future. Please check the documentation.`\n                );\n            }\n            viewName = viewName || placeholderSelector;\n\n            SCBaseComponentChildViewsComponent.removeChildView(\n                viewId,\n                placeholderSelector,\n                viewName\n            );\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    isDataTypeValid: function(dataType: string | []): boolean {\n        const validDataTypes = ['number', 'string', 'object', 'array', 'boolean', 'null'];\n        if (_.isString(dataType)) {\n            return _.indexOf(validDataTypes, dataType) >= 0;\n        }\n        if (_.isArray(dataType)) {\n            return !_.difference(dataType, validDataTypes).length;\n        }\n        return false;\n    },\n\n    // @method addToViewContextDefinition Adds an extra property to the UI context of a view id to extend the interaction with its template\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will have its context extended.\n    // @param {String} property_name Name of the new property to be added\n    // @param {String} type Name of the type of the result of the callback (function that generates the value of the new property)\n    // @param {Function} callback Function in charge of generating the value for the new property.\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    addToViewContextDefinition: function addToViewContextDefinition(\n        viewId: string,\n        propertyName: string,\n        type: string,\n        callback: (safeContext: any) => any\n    ) {\n        if (!_.isFunction(callback)) {\n            this._reportError('INVALID_PARAM', 'The specified callback is not valid.');\n        }\n\n        if (!this.isDataTypeValid(type)) {\n            this._reportError(\n                'INVALID_DATA_TYPE',\n                'Invalid data type. Please check the json-schema documentation for valid data types.'\n            );\n        }\n\n        if (isModuleLoaded(viewId)) {\n            if (!this._currentAddContextProperty[viewId]) {\n                this._currentAddContextProperty[viewId] = {};\n            }\n\n            if (this._currentAddContextProperty[viewId][propertyName]) {\n                this._reportError(\n                    'DUPLICATED_CONTEXT_PROPERTY',\n                    'Duplicated propertyName. Trying to add more than one extra context property with the same name.'\n                );\n            }\n\n            SCBaseComponentChildViewsComponent.addToViewContextDefinition(\n                viewId,\n                propertyName,\n                type,\n                callback\n            );\n\n            this._currentAddContextProperty[viewId][propertyName] = true;\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method removeToViewContextDefinition Removes an extra property to the UI context of a view.\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will have its context extended.\n    // @param {String} property_name Name of the new property to be added\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    removeToViewContextDefinition: function removeToViewContextDefinition(\n        viewId: string,\n        propertyName: string\n    ) {\n        if (\n            !(\n                this._currentAddContextProperty[viewId] &&\n                this._currentAddContextProperty[viewId][propertyName]\n            )\n        ) {\n            this._reportError(\n                'INVALID_PARAM',\n                'The specified extra context property does not exists or is not custom.'\n            );\n        }\n\n        if (isModuleLoaded(viewId)) {\n            SCBaseComponentChildViewsComponent.removeToViewContextDefinition(viewId, propertyName);\n\n            this._currentAddContextProperty[viewId][propertyName] = false;\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method modifyViewJsonLd allows modify the JsonLd content for a given view.\n    // @public @extlayera\n    // @param {String} view_id The identifier of the view.\n    // @return {null} null if everything works as expected. An exception will be thrown otherwise.\n    modifyViewJsonLd: function modifyViewJsonLd(\n        viewId: string,\n        callback: (jsonLdResult: JSONObject) => JQuery.Deferred<JSONObject>\n    ) {\n        if (!_.isFunction(callback)) {\n            this._reportError('INVALID_PARAM', 'The specified callback is not valid.');\n        }\n\n        if (isModuleLoaded(viewId)) {\n            SCBaseComponentChildViewsComponent.modifyViewJsonLd(viewId, callback);\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    isEventSelectorValid: function(eventSelector: string) {\n        const eventName = [\n            'blur',\n            'change',\n            'click',\n            'contextmenu',\n            'dblclick',\n            'error',\n            'focus',\n            'focusin',\n            'focusout',\n            'keydown',\n            'keypress',\n            'keyup',\n            'load',\n            'mousedown',\n            'mousemove',\n            'mouseout',\n            'mouseover',\n            'mouseup',\n            'resize',\n            'scroll',\n            'select',\n            'submit',\n            'touchend',\n            'touchmove',\n            'touchstart',\n            'unload'\n        ];\n\n        const eventSelectorStructureRe = /([a-zA-Z]+) \\[data\\-action=\"([^\"]+)\"\\]/;\n        const matches = eventSelectorStructureRe.exec(eventSelector);\n\n        return matches && _.indexOf(eventName, matches[1]) >= 0 && !!matches[2].length;\n    },\n\n    // @method addToViewEventsDefinition Allows to add an extra event handler over a particular view for the given event selector\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component, that will be extended with an extra event handler.\n    // @param {String} event_selector\n    // @param {Function} callback Event handler function called when the specified event occurs\n    // @return {Void}\n    addToViewEventsDefinition: function addToViewEventsDefinition(\n        viewId: string,\n        eventSelector: string,\n        callback: any\n    ) {\n        if (!_.isFunction(callback)) {\n            this._reportError('INVALID_PARAM', 'The specified callback is not valid.');\n        }\n\n        if (!this.isEventSelectorValid(eventSelector)) {\n            this._reportError(\n                'INVALID_PARAM',\n                'The specified eventSelector parameter does not respect the required format.'\n            );\n        }\n\n        if (isModuleLoaded(viewId)) {\n            if (!this._currentAddEventHandler[viewId]) {\n                this._currentAddEventHandler[viewId] = {};\n            }\n\n            if (this._currentAddEventHandler[viewId][eventSelector]) {\n                this._reportError(\n                    'DUPLICATED_CONTEXT_PROPERTY',\n                    'Duplicated eventSelector. Trying to add more than one extra context property with the same name.'\n                );\n            }\n\n            SCBaseComponentChildViewsComponent.addToViewEventsDefinition(\n                viewId,\n                eventSelector,\n                callback\n            );\n\n            this._currentAddEventHandler[viewId][eventSelector] = true;\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method removeToViewEventsDefinition Allows to remove and an extra event handler added previously.\n    // @public @extlayer\n    // @param {String} view_id The identifier of the view, of the current component.\n    // @param {String} event_selector\n    // @return {Void}\n    removeToViewEventsDefinition: function removeToViewEventsDefinition(\n        viewId: string,\n        eventSelector: string\n    ) {\n        if (\n            !(\n                this._currentAddEventHandler[viewId] &&\n                this._currentAddEventHandler[viewId][eventSelector]\n            )\n        ) {\n            this._reportError(\n                'INVALID_PARAM',\n                'The specified event selector does not exists or is not custom.'\n            );\n        }\n\n        if (isModuleLoaded(viewId)) {\n            SCBaseComponentChildViewsComponent.removeToViewEventsDefinition(viewId, eventSelector);\n\n            this._currentAddEventHandler[viewId][eventSelector] = true;\n        } else {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified viewId (${viewId}) is not valid for the current component.`\n            );\n        }\n    },\n\n    // @method showMessage Allows to display a message with a type and timeout within an specific div.\n    // @public @extlayer\n    // @param {object} options The message options: {message: string, type: NotificationsTypes, selector?: string, timeout?: number}\n    // @return {string}\n    showMessage: function showMessage(options: {\n        message: string;\n        type: NotificationsTypes;\n        selector?: string;\n        timeout?: number;\n    }): string {\n        if (!options) {\n            return this._reportError('INVALID_PARAM', 'The specified options can not be null.');\n        }\n\n        options.type = options.type ? options.type : NotificationsTypes.INFO;\n\n        if (!(options.type.toUpperCase() in NotificationsTypes)) {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified notification type (${\n                    options.type\n                }) is not valid, the availables types are error, warning, info or success.'`\n            );\n        }\n\n        options.selector = options.selector || 'Notifications';\n        const selectedDiv = jQuery(\n            `[data-view=\"${options.selector}\"], [data-cms-area=\"${options.selector}\"]`\n        );\n\n        if (selectedDiv.length === 0) {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified selector (${options.selector}) does not exist.'`\n            );\n        }\n\n        const global_view_message = new GlobalViewsMessageView({\n            message: options.message,\n            type: options.type,\n            closable: true\n        });\n\n        const message_id = _.uniqueId(`${options.type}_message_`);\n\n        global_view_message.$el.attr('id', message_id);\n        selectedDiv.append(global_view_message.render().$el);\n\n        if (options.timeout) {\n            setTimeout(() => {\n                this.closeMessage(message_id);\n            }, options.timeout);\n        }\n\n        return message_id;\n    },\n\n    closeMessage: function closeMessage(message_id: string) {\n        const message = jQuery(`#${message_id}`);\n        if (!message_id || !message) {\n            return this._reportError(\n                'INVALID_PARAM',\n                `The specified message id (${message_id}) is not valid'`\n            );\n        }\n        message.fadeOut(function() {\n            message.remove();\n        });\n    }\n});\n\nexport = visual_component;\n"]}