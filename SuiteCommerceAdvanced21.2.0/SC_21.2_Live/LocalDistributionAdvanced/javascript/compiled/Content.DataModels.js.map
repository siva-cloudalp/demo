{"version":3,"sources":["Content.DataModels.ts"],"names":[],"mappings":"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","file":"Content.DataModels.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Content.DataModels\"/>\n\nimport * as _ from 'underscore';\nimport '../../../Commons/BackboneExtras/JavaScript/Backbone.CachedModel';\nimport '../../../Commons/BackboneExtras/JavaScript/Backbone.CachedCollection';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\nimport { AjaxRequestsKiller } from '../../../Commons/AjaxRequestsKiller/JavaScript/AjaxRequestsKiller';\n\nimport Singleton = require('../../../Commons/Main/JavaScript/Singleton');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\nconst Pages: any = {};\n\n// @class Pages.Model Represents the definition of a page.\n// Interact with the Content Delivery Service\n// BEWARE: If you change the URL Root of your \"Content Delivery Service\" SSP Application\n// you need to update the urlRoot of this model @extends Backbone.CachedModel\nPages.Model = Backbone.CachedModel.extend({\n    urlRoot: Utils.getAbsoluteUrl('../cds/services/page.ss')\n});\n\n// @class Pages.Collection Singleton containing a reference of all pages already loaded\n// Interact with the Content Delivery Service. BEWARE: If you change the URL Root of your \"Content Delivery Service\" SSP Application\n// you need to update the urlRoot of this model @extends Backbone.CachedCollection\nPages.Collection = Backbone.CachedCollection.extend(\n    {\n        url: Utils.getAbsoluteUrl('../cds/services/page.ss'),\n\n        // @property {Class<Pages.Model>} model\n        model: Pages.Model\n    },\n    Singleton\n);\n\nconst Urls: any = {};\n\n// @class Urls.Model Represents a single url and the page definition they point to @extends Backbone.Model\nUrls.Model = Backbone.Model.extend({\n    urlRoot: Utils.getAbsoluteUrl('../cds/services/url.ss')\n});\n\n// @class Urls.Collection Implements the url matching logic @extends Backbone.Collection\nUrls.Collection = Backbone.Collection.extend(\n    {\n        url: Utils.getAbsoluteUrl('../cds/services/url.ss'),\n\n        // @property {Class<Urls.Model>} model\n        model: Urls.Model,\n\n        initialize: function() {\n            this.regExpGraphRoot = new Urls.Model({ childs: [] });\n            this.regExpGraphHelper = [];\n            this.landingPages = [];\n            this.exactMatchHash = {};\n\n            this.on('reset', this.reseter);\n        },\n\n        // @method reseter\n        // Every-time this collection is reseted, this function generates a couple of helper structures:\n        // * URLs.Collection.landingPages: Array of all url pointing to a landing page\n        // * URLs.Collection.exactMatchHash: Hash table of all url that does not have in it\n        // * URLs.Collection.regExpGraphRoot: Graph were URLs are farther from the root when they are more specific.\n        reseter: function() {\n            this.regExpGraphRoot = new Urls.Model({ childs: [] });\n            this.regExpGraphHelper = [];\n            this.landingPages = [];\n            this.exactMatchHash = {};\n\n            const self = this;\n\n            // Iterates all urls\n            this.each(function(model) {\n                // If the URL is * and its and its not a Landing page, it will be set as Urls.Collection.defaultModel\n                if (model.get('query') === '*' && model.get('type') !== '1') {\n                    if (!Urls.Collection.defaultModel) {\n                        Urls.Collection.defaultModel = model;\n                    }\n                }\n                // If the url contains * and its and its not a Landing page,\n                // It gets translated to a regular expression and injected into the this.regExpGraphRoot\n                // By comparing one another with other regular expressions (this.insertInGraph)\n                else if (~model.get('query').indexOf('*') && model.get('type') !== '1') {\n                    // Creates the Regular Expression to match urls against\n                    const regular_expresion = new RegExp(\n                        `^${_.map(model.get('query').split('*'), function(token: string) {\n                            return token.replace(/\\//gi, '\\\\/').replace(/\\?/gi, '\\\\?');\n                        }).join('(.*?)')}$`\n                    );\n\n                    // Sets the proper attributes\n                    model.set({\n                        regexp: regular_expresion,\n                        childs: []\n                    });\n\n                    // Now we insert it in the graph\n                    self.insertInGraph(model, self.regExpGraphRoot);\n\n                    /// We will just check if the new node is parent of a previously added node\n                    _.each(self.regExpGraphHelper, function(currentNode: any) {\n                        if (\n                            !_.contains(model.get('childs'), currentNode) &&\n                            model.get('regexp').test(currentNode.get('query'))\n                        ) {\n                            model.get('childs').push(currentNode);\n                        }\n                    });\n                    self.regExpGraphHelper.push(model);\n                }\n                // Other way its an exact match then we add it to this.exactMatchHash\n                else {\n                    self.exactMatchHash[model.get('query')] = model;\n\n                    // if it's a landing page we should add it to the collection of URL we will be adding to the router\n                    if (model.get('type') === '1') {\n                        self.landingPages.push(model);\n                    }\n                }\n            });\n        },\n\n        // @method insertInGraph Given a node it tries to injected into the graph\n        // @param {Urls.Model} node @param {Urls.Model} root\n        insertInGraph: function(node, root) {\n            let isParent = true;\n            const self = this;\n\n            // walks all child nodes\n            _.each(root.get('childs'), function(branch: any) {\n                if (branch.get('query') !== node.get('query')) {\n                    // is it covered by a more broad expression?\n                    if (branch.get('regexp').test(node.get('query'))) {\n                        isParent = false;\n                        self.insertInGraph(node, branch);\n                    }\n                    // Is it broader than then current branch\n                    else if (node.get('regexp').test(branch.get('query'))) {\n                        node.get('childs').push(branch);\n                        root.set('childs', _.without(root.get('childs'), branch));\n                    }\n                }\n            });\n\n            // the node is not a child nor a parent is a brother\n            if (isParent && !~_.indexOf(root.get('childs'), node)) {\n                root.get('childs').push(node);\n            }\n        },\n\n        // @method findUrl For the passed in URL looks for the most appropriate Erl model to return\n        // @param {String} URL @return {String|false}\n        findUrl: function(url) {\n            // Here we do a table hash lookup (Super fast!)\n            const exact_match = this.exactMatchHash[url];\n\n            if (exact_match) {\n                return exact_match;\n            }\n            // lets do a lookup in our regexp graph\n            this.candidates = {}; // Here we will store URL_ID : Number of edges\n            this.walkRegExpGraph(url, this.regExpGraphRoot, 1);\n\n            const result = _.max(_.pairs(this.candidates), function(candidate) {\n                return candidate[1];\n            });\n\n            return result && typeof result === 'object' ? this.get(result[0]) : false;\n        },\n\n        // @method walkRegExpGraph Recursive function used by the findUrl to traverse the url graph\n        // @param {String} url @param {Urls.Model} branch @param {Number} deep\n        walkRegExpGraph: function(url, branch, deepth) {\n            const self = this;\n            // Walks all the childs of the current branch\n            _.each(branch.get('childs'), function(new_branch: any) {\n                if (new_branch.get('regexp').test(url)) {\n                    // if the current child (which is also a branch) passes the test it will go down the line\n                    // and it adds 1 edge to the candidates object\n                    self.candidates[new_branch.cid] = self.candidates[new_branch.cid]\n                        ? self.candidates[new_branch.cid] + deepth\n                        : deepth;\n                    self.walkRegExpGraph(url, new_branch, deepth + 1);\n                }\n            });\n        }\n    },\n    Singleton\n);\n\n// This is a private variable that will holds all the requests we have made, tho it's public you should try to avoid using it, and call Content.load instead\nconst currentRequests = [];\n\n// loadPage:\n// This Function takes care of loading the content for the passed URL.\n// if a done function is passed it will be called whenever we have content,\n// if no content is provided for the current URL,\n// the done function will be called right away with false as a parameter\nfunction loadPage(url: string, donefn = <any>jQuery.noop) {\n    if (url) {\n        // Looks in the array of registered urls\n        const foundUrl = Urls.Collection.getInstance().findUrl(url);\n\n        // The URL is registered in the collection\n        if (foundUrl) {\n            // Gets the page for the URL\n            const page_id = foundUrl.get('pageid');\n            let page = Pages.Collection.getInstance().get(page_id);\n\n            if (page) {\n                donefn(page);\n            }\n            // We don't have it need to be fetched\n            else {\n                // Fetches the page\n                new Pages.Model({ internalid: page_id, id: page_id })\n                    .fetch({\n                        data: {\n                            cache: Configuration.get('cache.contentPageCdn'),\n                            ttl: Configuration.get('cache.contentPageTtl')\n                        },\n                        killerId: AjaxRequestsKiller.getKillerId(),\n                        reset: true\n                    })\n                    .done(function(loaded_page) {\n                        Pages.Collection.getInstance().add(loaded_page);\n                        page = Pages.Collection.getInstance().get(page_id);\n                        donefn(page);\n                    });\n            }\n        }\n        // No URL is found\n        else {\n            donefn(false);\n        }\n    }\n    // No URL is passed\n    else {\n        donefn(false);\n    }\n}\n\nexport = {\n    Urls: Urls,\n    Pages: Pages,\n    currentRequests: currentRequests,\n    loadPage: loadPage,\n    Application: null\n};\n"]}