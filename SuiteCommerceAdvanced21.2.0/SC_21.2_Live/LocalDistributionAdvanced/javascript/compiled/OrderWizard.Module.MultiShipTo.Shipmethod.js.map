{"version":3,"sources":["OrderWizard.Module.MultiShipTo.Shipmethod.ts"],"names":[],"mappings":"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","file":"OrderWizard.Module.MultiShipTo.Shipmethod.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"OrderWizard.Module.MultiShipTo.Shipmethod\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as _ from 'underscore';\nimport * as order_wizard_msr_shipmethod_module_tpl from 'order_wizard_msr_shipmethod_module.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { WizardStepModule } from '../../Wizard/JavaScript/Wizard.StepModule';\n\nimport BackboneCollectionView = require('../../../Commons/Backbone.CollectionView/JavaScript/Backbone.CollectionView');\nimport OrderWizardModuleMultiShipToShipmethodPackageView = require('./OrderWizard.Module.MultiShipTo.Shipmethod.Package.View');\nimport TransactionShipmethodCollection = require('../../../Commons/Transaction/JavaScript/Transaction.Shipmethod.Collection');\n\n// @class OrderWizard.Module.MultiShipTo.Shipmethod @extends Wizard.Module\nexport = WizardStepModule.extend({\n    // @property {Function} template\n    template: order_wizard_msr_shipmethod_module_tpl,\n\n    // @property\n    events: {\n        'click [data-action=\"items-expander\"]': 'changeExpandedState',\n        'change [data-type=\"address-selector\"]': 'selectDeliveryMethodComboHandler'\n    },\n\n    // @property {Array} errors\n    errors: ['ERR_MST_NOT_SET_SHIPPING_METHODS'],\n\n    // @property {Object} shipmethoIsRequireErrorMessage\n    shipmethoIsRequireErrorMessage: {\n        errorMessage: Utils.translate('Please select a delivery method for each package'),\n        errorCode: 'ERR_MST_NOT_SET_SHIPPING_METHODS'\n    },\n\n    // @method initialize\n    initialize: function(options) {\n        WizardStepModule.prototype.initialize.apply(this, arguments);\n\n        this.packages_items_collapsed = {};\n        this.is_read_only = _.isBoolean(options.is_read_only) ? options.is_read_only : true;\n        this.submit_promise = null;\n\n        this.profile = this.wizard.options.profile;\n\n        const self = this;\n\n        this.model.get('lines').on('change', function() {\n            if (self.isValid() && self.state === 'past') {\n                self.error = null;\n            }\n        });\n        this.eventHandlersOn();\n    },\n\n    // @method present\n    present: function() {\n        this.eventHandlersOn();\n    },\n\n    // @method future\n    // Detect when is not require attach to events\n    future: function() {\n        this.eventHandlersOff();\n    },\n\n    // @method past\n    // Detect when is not require attach to events\n    past: function() {\n        this.eventHandlersOff();\n    },\n\n    // @method eventHandlersOn\n    // Attach to events that keep the current state updated\n    eventHandlersOn: function() {\n        this.eventHandlersOff();\n\n        this.profile.get('addresses').on('change', this.shippingAddressChange, this);\n\n        this.model.on('change:multishipmethods', this.render, this);\n    },\n\n    // @method eventHandlersOff\n    // Detach from any event\n    eventHandlersOff: function() {\n        this.model.off('change:multishipmethods', null, this);\n\n        this.profile.get('addresses').off('change', null, this);\n    },\n\n    // @method shippingAddressChange\n    // Handle on shipping address change\n    shippingAddressChange: function(updated_address) {\n        const addrress_model = this.wizard.model.get('addresses').get(updated_address.id);\n\n        // If the address is not in the order we omit it\n        if (addrress_model) {\n            const change_zip = addrress_model.get('zip') !== updated_address.get('zip');\n            const change_country = addrress_model.get('country') !== updated_address.get('country');\n            const change_state = addrress_model.get('state') !== updated_address.get('state');\n\n            if (change_zip || change_country || change_state) {\n                this.reloadShppingMethodForAddress(updated_address.id);\n            } else {\n                this.render();\n            }\n        }\n    },\n\n    // @method reloadShppingMethodForAddress\n    // Reload the group of available shipping method for a package (loading the entire model - of course)\n    reloadShppingMethodForAddress: function(address_id) {\n        // This only remove the current selected shipping method and save the model, doing this the template when rendering\n        // will offer select a new shipping method if any, or display an error if there is none.\n        const affected_lines = this.wizard.model.get('lines').where({ shipaddress: address_id });\n\n        if (affected_lines.length) {\n            _.each(affected_lines, function(line: any) {\n                line.unset('shipmethod');\n            });\n\n            this.wizard.model.save();\n        }\n    },\n    // @method getDefaultCollapseItem\n    getDefaultCollapseItem: function() {\n        const { sca } = this.wizard.application.getConfig();\n        return _.isBoolean(this.options.collapse_items)\n            ? this.options.collapse_items\n            : sca.collapseElements || false;\n    },\n\n    // @method changeExpandedState\n    // Update the state of the items accordion, remembering if it is expanded or collapsed\n    changeExpandedState: function(e) {\n        const selected_address_id = jQuery(e.target)\n            .closest('[data-type=\"package\"]')\n            .data('address-id');\n\n        this.packages_items_collapsed[selected_address_id] = !_.isUndefined(\n            this.packages_items_collapsed[selected_address_id]\n        )\n            ? !this.packages_items_collapsed[selected_address_id]\n            : !this.getDefaultCollapseItem();\n    },\n\n    // @method isActive\n    // Determines if the current module is valid to be shown, all items have set a ship address id\n    isActive: function() {\n        const shipping_methods = this.wizard.model.get('multishipmethods');\n        let result =\n            this.wizard.model.get('ismultishipto') &&\n            this.wizard.model.getIfThereAreDeliverableItems() &&\n            _.keys(shipping_methods).length;\n\n        if (result) {\n            const all_item_has_shipping_address_selected = this.wizard.model\n                .get('lines')\n                .all(function(line) {\n                    return !line.get('item').isshippable || line.get('shipaddress');\n                });\n            result = all_item_has_shipping_address_selected;\n\n            if (this.is_read_only) {\n                const all_item_has_shipping_method_selected = this.wizard.model\n                    .get('lines')\n                    .all(function(line) {\n                        return !line.get('item').isshippable || line.get('shipmethod');\n                    });\n\n                result = result && all_item_has_shipping_method_selected;\n            }\n        }\n        return result;\n    },\n\n    // @method selectDeliveryMethodComboHandler\n    // Handle the delivery method selection when this action is caused by a combo box\n    selectDeliveryMethodComboHandler: function(e) {\n        const $selected_combo = jQuery(e.target);\n        const selected_delivery_mehtod_id = $selected_combo.val();\n        const selected_address_id = $selected_combo.data('address-id');\n\n        this.selectDeliveryMethod(selected_delivery_mehtod_id, selected_address_id, true);\n    },\n\n    // @method selectDeliveryMethod\n    // Unset the specified package (address id) and for that address id, mark the specified delivery method\n    selectDeliveryMethod: function(\n        selected_delivery_method_id,\n        selected_address_id,\n        save_changes: boolean\n    ) {\n        if (this.canSaveChanges()) {\n            const items_per_address = this.wizard.model.get('lines').groupBy(function(line) {\n                return line.get('shipaddress');\n            });\n            const delivery_methods = this.wizard.model.get('multishipmethods')[selected_address_id];\n\n            _.each(items_per_address[selected_address_id], function(item: any) {\n                item.unset('shipmethod');\n            });\n\n            _.each(delivery_methods.where({ check: true }), function(delivery_method: any) {\n                delivery_method.unset('check');\n            });\n\n            delivery_methods.get(selected_delivery_method_id).set('check', true);\n\n            if (save_changes) {\n                this.step.disableNavButtons();\n                jQuery('[data-type=\"shipments-list\"] input[type=\"radio\"]').attr(\n                    'disabled',\n                    'disabled'\n                );\n                this.saveChanges(true)\n                    .then(function() {\n                        jQuery('[data-type=\"shipments-list\"] input[type=\"radio\"]').removeAttr(\n                            'disabled'\n                        );\n                    })\n                    .then(_.bind(this.step.enableNavButtons, this.step));\n            }\n        }\n    },\n\n    // @method submit\n    // Set for each line the selected shipmethod of the continaer package\n    submit: function() {\n        // If the view is being displayed in review mode (after place order)\n        if (this.is_read_only || this.state !== 'present' || !this.isActive()) {\n            return jQuery.Deferred().resolve();\n        }\n\n        // The real action of submitting a shipping method for a package is made when you select an options, clicking continue (which call this method) just validate\n        // the current state.\n        return this.isValid();\n    },\n\n    // @method canSaveChanges\n    // Determine if not previous save operation is in progress\n    canSaveChanges: function(): boolean {\n        return !this.submit_promise || this.submit_promise.state() !== 'pending';\n    },\n\n    // @method saveChanges\n    // Actually submit the selected shipping method to the server\n    // @param {Boolean} submit_server\n    // @return {jQuery.Deferred}\n    saveChanges: function(submit_server) {\n        this.clearError();\n        if (this.canSaveChanges()) {\n            const lines = this.wizard.model.get('lines');\n            const shipping_methods = this.wizard.model.get('multishipmethods');\n\n            lines.each(function(line) {\n                const ship_address = line.get('shipaddress');\n                if (ship_address) {\n                    const selected_ship_method = shipping_methods[ship_address].findWhere({\n                        check: true\n                    });\n                    if (selected_ship_method) {\n                        line.set('shipmethod', selected_ship_method.id);\n                    }\n                }\n            }, this);\n\n            if (submit_server) {\n                this.submit_promise = this.wizard.model.save();\n                return this.submit_promise;\n            }\n\n            return jQuery.Deferred().resolve();\n        }\n    },\n    // @method isValid\n    // Check that all packages have a shipping method selected\n    // @return {jQuery.Deferred}\n    isValid: function() {\n        const lines = this.wizard.model.getSetLines();\n        let has_error = false;\n\n        has_error = !!_.find(lines, function(line: any) {\n            return !line.get('shipmethod');\n        });\n\n        if (!has_error) {\n            this.error = null;\n        }\n\n        return has_error\n            ? jQuery.Deferred().reject(this.shipmethoIsRequireErrorMessage)\n            : jQuery.Deferred().resolve();\n    },\n\n    // @method getPackages\n    // Returns the lists of packages (items grouped by address) created\n    getPackages: function() {\n        if (this.isActive() && this.state === 'present') {\n            const result = [];\n            const self = this;\n            const items_per_address = this.wizard.model.get('lines').groupBy(function(line) {\n                return line.get('shipaddress');\n            });\n            const addresses = this.profile.get('addresses'); // Get the addresses from profile because when updating just the user's address are updated\n            let selected_delivery_methods = [];\n            const shipping_methods = this.wizard.model.get('multishipmethods');\n\n            _.each(_.keys(items_per_address), function(address_id) {\n                if (address_id === 'null' || !shipping_methods[address_id]) {\n                    return;\n                }\n                if (!self.is_read_only) {\n                    const item_set = _.find(items_per_address[address_id], function(item: any) {\n                        return !!item.get('shipmethod');\n                    });\n\n                    // If in this package there is any item already set (this occur when in a next step press back) use that as selected delivery method\n                    if (item_set) {\n                        shipping_methods[address_id]\n                            .get(item_set.get('shipmethod'))\n                            .set('check', true);\n                    }\n\n                    selected_delivery_methods = shipping_methods[address_id];\n                } else {\n                    // Get THE selected ship method for the entire package\n                    const ship_method_group_id = (<any>_.first(items_per_address[address_id])).get(\n                        'shipmethod'\n                    );\n                    const ship_method = shipping_methods[address_id].get(ship_method_group_id);\n\n                    if (ship_method) {\n                        ship_method.set('check', true);\n                        selected_delivery_methods = new TransactionShipmethodCollection([\n                            ship_method\n                        ]);\n                    }\n                }\n\n                result.push({\n                    lines: items_per_address[address_id],\n                    address:\n                        addresses.get(address_id) ||\n                        self.wizard.model.get('addresses').get(address_id),\n                    collapse_elements: self.packages_items_collapsed[address_id],\n                    summary: {},\n                    deliveryMethods: selected_delivery_methods\n                });\n            });\n            return result;\n        }\n\n        return [];\n    },\n\n    childViews: {\n        'Packages.Collection': function() {\n            return new BackboneCollectionView({\n                collection: this.getPackages(),\n                viewsPerRow: 1,\n                childView: OrderWizardModuleMultiShipToShipmethodPackageView,\n                childViewOptions: {\n                    hide_items: this.options.hide_items,\n                    hide_accordion: this.options.hide_accordion,\n                    show_edit_address_url: this.options.show_edit_address_url,\n                    edit_url: this.options.edit_shipment_address_url,\n                    show_combo: this.options.show_combo,\n                    edit_shipment_url: this.options.edit_shipment_url,\n                    is_read_only: this.is_read_only,\n                    hide_item_link: this.options.hide_item_link,\n                    general_collapse_elements: this.getDefaultCollapseItem()\n                }\n            });\n        }\n    },\n\n    // @method getContext @returns OrderWizard.Module.MultiShipTo.Shipmethod.Context\n    getContext: function() {\n        // @class OrderWizard.Module.MultiShipTo.Shipmethod.Context\n        return {\n            // @property {Boolean} showPackages\n            showPackages: !!this.getPackages().length\n        };\n    }\n});\n"]}