{"version":3,"sources":["Subscriptions.AddOn.Summary.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAWF,IAAM,6BAA6B,GAAQ,YAAY,CAAC,MAAM,CAAC;QAC3D,QAAQ,EAAE,0BAA0B;QAEpC,UAAU,EAAE,UAAS,OAAO;YAAhB,iBAQX;YAPG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,EAAE;gBAC7B,KAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,kCAAkC,EAAE;gBAC9C,KAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,CAAC,CAAC;QACP,CAAC;QAED,eAAe,EAAE;YACL,IAAA,SAAS,GAAK,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,UAAlD,CAAmD;YACpE,IAAM,eAAe,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACzE,IAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC;iBAC9B,KAAK,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;iBAChD,SAAS,CAAC,GAAG,CAAC;iBACd,OAAO,CAAC,SAAS,CAAC,CAAC;YACxB,IAAM,YAAY,GAAG,IAAI,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3F,IAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE1E,OAAO;gBACH,YAAY,EAAE,YAAY;gBAC1B,UAAU,EAAE,UAAU;aACzB,CAAC;QACN,CAAC;QAED,6DAA6D;QAC7D,UAAU,EAAE;YACR,IAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YACzD,IAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEjD,sCAAsC;YACtC,OAAO;gBACH,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC;gBACxC,YAAY,EAAE,YAAY;gBAC1B,SAAS,EAAE,WAAW;oBAClB,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,YAAY,CAAC;oBAC3D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC;gBACjD,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC;gBAC3D,WAAW,EAAE,WAAW;gBACxB,eAAe,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,UAAU,CAAC;oBACxD,CAAC,CAAC,MAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,UAAU,CAAG;oBAC/D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC;gBAChC,QAAQ,EAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,MAAG;gBAC1C,oBAAoB,EAAE,YAAY,IAAI,WAAW;aACpD,CAAC;QACN,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,6BAA6B,CAAC","file":"Subscriptions.AddOn.Summary.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Subscriptions.AddOn.Summary.View\"/>\nimport * as subscription_addon_summary from 'subscriptions_addon_summary.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as _ from 'underscore';\n\nimport BigNumber = require('../../../Commons/Utilities/JavaScript/BigNumber');\n\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\n\nconst SubscriptionsAddOnSummaryView: any = BackboneView.extend({\n    template: subscription_addon_summary,\n\n    initialize: function(options) {\n        this.model = options.model;\n        this.model.on('change:quantity', () => {\n            this.render();\n        });\n        this.model.on('change:recurringAmount_formatted', () => {\n            this.render();\n        });\n    },\n\n    getInitialPrice: function(): object {\n        const { precision } = SC.CONFIGURATION.siteSettings.shopperCurrency;\n        const recurringAmount = new BigNumber(this.model.get('recurringAmount'));\n        const discount = new BigNumber(100)\n            .minus(new BigNumber(this.model.get('discount')))\n            .dividedBy(100)\n            .toFixed(precision);\n        const initialPrice = new BigNumber(recurringAmount.dividedBy(discount).toFixed(precision));\n        const discounted = initialPrice.minus(recurringAmount).toFixed(precision);\n\n        return {\n            initialPrice: initialPrice,\n            discounted: discounted\n        };\n    },\n\n    // @method getContext @returns {Overview.Banner.View.Context}\n    getContext: function() {\n        const hasItemPrice = !!this.model.get('recurringAmount');\n        const hasDiscount = !!this.model.get('discount');\n\n        // @class Overview.Banner.View.Context\n        return {\n            itemQuantity: this.model.get('quantity'),\n            hasItemPrice: hasItemPrice,\n            itemPrice: hasDiscount\n                ? Utils.formatCurrency(this.getInitialPrice().initialPrice)\n                : this.model.get('recurringAmount_formatted'),\n            itemPriceTotal: this.model.get('recurringAmount_formatted'),\n            hasDiscount: hasDiscount,\n            discountedValue: !_.isNaN(this.getInitialPrice().discounted)\n                ? `-${Utils.formatCurrency(this.getInitialPrice().discounted)}`\n                : this.model.get('discount'),\n            discount: `${this.model.get('discount')}%`,\n            showSummaryContainer: hasItemPrice || hasDiscount\n        };\n    }\n});\n\nexport = SubscriptionsAddOnSummaryView;\n"]}