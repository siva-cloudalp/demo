{"version":3,"sources":["RequestQuoteWizard.Module.Confirmation.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAYF,OAAS,oCAAgB,CAAC,MAAM,CAAC;QAC7B,gCAAgC;QAChC,QAAQ,EAAE,2CAA2C;QAErD,uIAAuI;QACvI,iBAAiB;QACjB,OAAO,EAAE;YACL,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC1D,6FAA6F;YAC7F,IAAM,OAAO,GAAG,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE;gBAC5D,OAAO,EAAE,YAAY,CAAC,UAAU;aACnC,CAAC,CAAC;YAEH,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE;gBAC/B,OAAO,EAAE,KAAK;aACjB,CAAC,CAAC;QACP,CAAC;QAED,qBAAqB;QACrB,2DAA2D;QAC3D,UAAU,EAAE;YACR,wDAAwD;YACxD,OAAO;gBACH,+BAA+B;gBAC/B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,6BAA6B;gBAC7B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,UAAU;gBAClD,iCAAiC;gBACjC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM;gBAClD,gDAAgD;gBAChD,0BAA0B,EAAE,6BAAa,CAAC,GAAG,CAAC,kCAAkC,EAAE,EAAE,CAAC;gBACrF,gCAAgC;gBAChC,UAAU,EAAE,6BAAa,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC;gBACrD,yCAAyC;gBACzC,mBAAmB,EACf,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,mBAAmB;aAC/E,CAAC;YACF,qDAAqD;QACzD,CAAC;KACJ,CAAC,CAAC","file":"RequestQuoteWizard.Module.Confirmation.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"RequestQuoteWizard.Module.Confirmation\"/>\n\nimport * as requestquote_wizard_module_confirmation_tpl from 'requestquote_wizard_module_confirmation.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\nimport { WizardStepModule } from '../../Wizard/JavaScript/Wizard.StepModule';\n\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// @class RequestQuoteWizard.Module.Confirmation @extends Wizard.Module\nexport = WizardStepModule.extend({\n    // @property {Function} template\n    template: requestquote_wizard_module_confirmation_tpl,\n\n    // @method present Override default implementation so when the modules is being rendered we set the salesorderid parameter into the url\n    // @return {Void}\n    present: function() {\n        const confirmation = this.model.get('confirmation') || {};\n        // store current order id in the hash so it is available even when the checkout process ends.\n        const newHash = Utils.addParamsToUrl(Backbone.history.fragment, {\n            quoteid: confirmation.internalid\n        });\n\n        Backbone.history.navigate(newHash, {\n            trigger: false\n        });\n    },\n\n    // @method getContext\n    // @return {RequestQuoteWizard.Module.Confirmation.Context}\n    getContext: function() {\n        // @class RequestQuoteWizard.Module.Confirmation.Context\n        return {\n            // property {Model.Model} model\n            model: this.model,\n            // @property {String} quoteId\n            quoteId: this.model.get('confirmation').internalid,\n            // @property {String} quoteTranId\n            quoteTranId: this.model.get('confirmation').tranid,\n            // @property {String} contactBusinessDaysMessage\n            contactBusinessDaysMessage: Configuration.get('quote.contactBusinessDaysMessage', ''),\n            // @property {String} disclaimer\n            disclaimer: Configuration.get('quote.disclaimer', ''),\n            // @property {String} confirmationMessage\n            confirmationMessage:\n                this.options.message || this.wizard.getCurrentStep().confirmationMessage\n        };\n        // @class QuoteToSalesOrderWizard.Module.Confirmation\n    }\n});\n"]}