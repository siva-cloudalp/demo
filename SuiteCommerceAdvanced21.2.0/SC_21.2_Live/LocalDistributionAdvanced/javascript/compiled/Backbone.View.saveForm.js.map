{"version":3,"sources":["Backbone.View.saveForm.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IASF;;;;;MAKE;IACF,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,EAAE;QAC7B,yDAAyD;QACzD,4EAA4E;QAC5E,8GAA8G;QAC9G,4BAA4B;QAC5B,+CAA+C;QAC/C,QAAQ,EAAE,UAAS,CAAC,EAAE,KAAK,EAAE,KAAK;YAC9B,CAAC,CAAC,cAAc,EAAE,CAAC;YAEnB,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;YAE5B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEpD,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;gBACzB,gEAAgE;gBAChE,IAAI,CAAC,WAAW;qBACX,IAAI,CAAC,6CAA6C,CAAC;qBACnD,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAC5B,0BAA0B;gBAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC,IAAI,EAAE,CAAC;aAC7E;YAED,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,IAAM,IAAI,GAAG,IAAI,CAAC;YAElB,uDAAuD;YACvD,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,EAAE;gBAC3D,IAAI,EAAE,IAAI;gBAEV,uEAAuE;gBACvE,2CAA2C;gBAC3C,OAAO,EAAE,UAAS,KAAK,EAAE,QAAQ;oBAC7B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,EAAE;wBACtC,IAAI,CAAC,eAAe;6BACf,WAAW,CAAC,MAAM,CAAC;6BACnB,KAAK,CAAC,MAAM,CAAC;6BACb,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAC/B;oBAED,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;wBACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACjC,IAAI,CAAC,WAAW;6BACX,IAAI,CAAC,iCAAiC,CAAC;6BACvC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;wBAC7B,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;qBAC1C;gBACL,CAAC;gBAED,mDAAmD;gBACnD,KAAK,EAAE,UAAS,KAAK,EAAE,QAAQ;oBAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBAE/E,IAAI,QAAQ,CAAC,YAAY,EAAE;wBACvB,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC;qBAC7E;gBACL,CAAC;aACJ,CAAC,CAAC;QACP,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC","file":"Backbone.View.saveForm.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Backbone.View.saveForm\"/>\n\nimport * as _ from 'underscore';\nimport * as jQuery from '../../Core/JavaScript/jQuery';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n/*\n@module BackboneExtras\n#Backbone.View.saveForm\nextends native Backbone.View with a custom saveForm function to be called when forms are submited\n@obsolete please use Backbone.FormView\n*/\n_.extend(BackboneView.prototype, {\n    // @module Backbone @class Backbone.View @method saveForm\n    // will serialize the input of some form and save() the given model using it\n    // @param {HTMLEvent} e @param {Backbone.Model} model @param {Object} props properties to pass to model.save()\n    // @return {jQuery.Deferred}\n    // @obsolete Please use @?ref Backbone.FormView\n    saveForm: function(e, model, props) {\n        e.preventDefault();\n\n        model = model || this.model;\n\n        this.$savingForm = jQuery(e.target).closest('form');\n\n        if (this.$savingForm.length) {\n            // Disables all for submit buttons, to prevent double submitions\n            this.$savingForm\n                .find('input[type=\"submit\"], button[type=\"submit\"]')\n                .attr('disabled', true);\n            // and hides reset buttons\n            this.$savingForm.find('input[type=\"reset\"], button[type=\"reset\"]').hide();\n        }\n\n        this.hideError();\n\n        const self = this;\n\n        // Returns the promise of the save acction of the model\n        return model.save(props || this.$savingForm.serializeObject(), {\n            wait: true,\n\n            // Hides error messages, re enables buttons and triggers the save event\n            // if we are in a modal this also closes it\n            success: function(model, response) {\n                if (self.inModal && self.$containerModal) {\n                    self.$containerModal\n                        .removeClass('fade')\n                        .modal('hide')\n                        .data('bs.modal', null);\n                }\n\n                if (self.$savingForm.length) {\n                    self.hideError(self.$savingForm);\n                    self.$savingForm\n                        .find('[type=\"submit\"], [type=\"reset\"]')\n                        .attr('disabled', false);\n                    model.trigger('save', model, response);\n                }\n            },\n\n            // Re enables all button and shows an error message\n            error: function(model, response) {\n                self.$savingForm.find('*[type=submit], *[type=reset]').attr('disabled', false);\n\n                if (response.responseText) {\n                    model.trigger('error', jQuery.parseJSON(response.responseText || 'null'));\n                }\n            }\n        });\n    }\n});\n\nexport = BackboneView.prototype.saveForm;\n"]}