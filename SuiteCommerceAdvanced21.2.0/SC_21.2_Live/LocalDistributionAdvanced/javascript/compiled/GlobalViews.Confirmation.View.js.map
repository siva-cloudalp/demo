{"version":3,"sources":["GlobalViews.Confirmation.View.ts"],"names":[],"mappings":"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","file":"GlobalViews.Confirmation.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"GlobalViews.Confirmation.View\"/>\n\nimport * as _ from 'underscore';\nimport * as global_views_confirmation_tpl from 'global_views_confirmation.tpl';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\n\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class GlobalViews.Confirmation.View @extends Backbone.View\nconst GlobalViewsConfirmationView: any = BackboneView.extend({\n    template: global_views_confirmation_tpl,\n\n    title: Utils.translate('Confirm'),\n\n    page_header: Utils.translate('Confirm'),\n\n    events: {\n        'click [data-action=\"confirm\"]': 'confirm',\n        'click [data-action=\"cancel\"]': 'cancel'\n    },\n\n    // @method initialize\n    // @param {GlobalViews.Confirmation.Initialize.Options} options\n    // @return {Void}\n    initialize: function(options) {\n        this.callBack = options.callBack;\n        this.callBackParameters = options.callBackParameters;\n\n        this.cancelCallBack = options.cancelCallBack;\n        this.cancelCallBackParameters = options.cancelCallBackParameters;\n\n        this.title = options.title || this.title;\n        this.page_header = options.title || this.page_header;\n        this.className = options.className || '';\n        this.class = options.class || '';\n        this.body = options.body;\n        this.showBodyMessage = !options.view;\n        this.childViewMessage = options.view;\n        this.childViewMessageParameters = options.viewParameters;\n\n        this.autohide = !!options.autohide;\n\n        this.confirmLabel = options.confirmLabel;\n        this.cancelLabel = options.cancelLabel;\n\n        this.once(\n            'afterViewRender',\n            function() {\n                const self = this;\n                self.$containerModal.on('shown.bs.modal', function() {\n                    self.$containerModal.off('shown.bs.modal');\n                    self.$('[data-action=\"confirm\"]').focus();\n                });\n            },\n            this\n        );\n    },\n\n    // @property {Object} childViews\n    childViews: {\n        ChildViewMessage: function() {\n            return new this.childViewMessage(this.childViewMessageParameters || {});\n        }\n    },\n\n    // @method confirm Invokes callBack function\n    // @return {Void}\n    confirm: function confirm() {\n        _.isFunction(this.callBack) && this.callBack.call(this, this.callBackParameters);\n\n        if (this.autohide) {\n            this.$containerModal\n                .removeClass('fade')\n                .modal('hide')\n                .data('bs.modal', null);\n        }\n    },\n\n    // @method cancel Invokes cancelCallBack function\n    // @return {Void}\n    cancel: function cancel() {\n        _.isFunction(this.cancelCallBack) &&\n            this.cancelCallBack.call(this, this.cancelCallBackParameters);\n\n        if (this.autohide) {\n            this.$containerModal\n                .removeClass('fade')\n                .modal('hide')\n                .data('bs.modal', null);\n        }\n    },\n\n    // @method getTitle This method returns the name the current browser window will have.\n    // This is called by Content.EnhancedViews\n    // @return {String}\n    getTitle: function getTitle() {\n        return Utils.translate('Confirmation');\n    },\n\n    // @method getContext\n    // @return {GlobalViews.Confirmation.View.Context}\n    getContext: function getContext() {\n        // @class GlobalViews.Confirmation.View.Context\n        return {\n            // @property {String} body\n            body: this.body,\n            // @property {Boolean} hasConfirmLabel\n            hasConfirmLabel: !!this.confirmLabel,\n            // @property {String} confirmLabel\n            confirmLabel: this.confirmLabel,\n            // @property {Boolean} hasCancelLabel\n            hasCancelLabel: !!this.cancelLabel,\n            // @property {String} cancelLabel\n            cancelLabel: this.cancelLabel,\n            // @property {Boolean} showBodyMessage\n            showBodyMessage: this.showBodyMessage,\n            // @property {String} className\n            className: this.className,\n            // @property {String} class\n            class: this.class\n        };\n        // @class GlobalViews.Confirmation.View\n    }\n});\n\nexport = GlobalViewsConfirmationView;\n\n// @class GlobalViews.Confirmation.Initialize.Options\n// @property {Function?} callBack Optional function called in case the user confirm the current prompt\n// @property {Any?} callBackParameters Any optional object used as parameter of the callBack parameters function\n// @property {String?} title Optional modal title\n// @property {String?} body String message to display. This value is optional as you can specify a child view as\n// the body of the modal\n// @property {Backbone.View?} view Optional view used to specify a body when you need a rich body that a simple body property\n// is not enough\n// @property {String?} confirmLabel Label used in the confirmation button. 'Yes' is used when no data is provided\n// @property {Boolean} autohide Indicate if after confirming the windows should auto-close\n// @property {String?} cancelLabel Optional label used for the cancel button. If no value is provided Cancel will be used.\n// @property {Any?} viewParameters Optional Object with the parameters used to instantiate the passed in View\n"]}