{"version":3,"sources":["QuantityPricing.Utils.ts"],"names":[],"mappings":"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","file":"QuantityPricing.Utils.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"QuantityPricing.Utils\"/>\n\nimport * as _ from 'underscore';\n\n// @class QuantityPricing.Utils\nconst QuantityPricingUtils: any = {\n    // @method rearrangeQuantitySchedule override first minimumquantity from 0 to 1, and sets the maximum to a lower value\n    // @param {Item.Model} item\n    // @param {Array<Item.Model>} children_selection Collection of child items that based on the current selection of the parent can be selected\n    // return {Array<QuantityPricing.PriceRange>}\n    rearrangeQuantitySchedule: function rearrangeQuantitySchedule(item, children_selection) {\n        const price_schedule_exists_in_matrix_child = _.find(children_selection, function(\n            child_item: any\n        ) {\n            return child_item.get('_priceDetails') && child_item.get('_priceDetails').priceschedule;\n        });\n        const price_schedule_exists_in_matrix_parent =\n            item &&\n            item.get('_priceDetails') &&\n            item.get('_priceDetails').priceschedule &&\n            item.get('_priceDetails').priceschedule.length;\n\n        if (price_schedule_exists_in_matrix_parent || price_schedule_exists_in_matrix_child) {\n            const parent_quantity_schedule = item.get('_priceDetails').priceschedule;\n            let result_quantity_pricing = [];\n\n            if (children_selection && children_selection.length === 1) {\n                const first_children_section: any = _.first(children_selection);\n                result_quantity_pricing = first_children_section.get('_priceDetails').priceschedule;\n            } else if (children_selection && children_selection.length > 1) {\n                const children_quantity_pricing = _.map(children_selection, function(child: any) {\n                    return (\n                        (child.get('_priceDetails') && child.get('_priceDetails').priceschedule) ||\n                        []\n                    );\n                });\n                const reference_quantity_pricing = _.first(children_quantity_pricing);\n                const self = this;\n                const all_children_are_equal = _.every(children_quantity_pricing, function(\n                    child_quantity_pricing\n                ) {\n                    return self.areQuantityPricingEqual(\n                        reference_quantity_pricing,\n                        child_quantity_pricing\n                    );\n                });\n\n                result_quantity_pricing = all_children_are_equal\n                    ? self.computeRanges(children_quantity_pricing)\n                    : [];\n            } else {\n                result_quantity_pricing = parent_quantity_schedule;\n            }\n            const quantityPricingTiersAmount = result_quantity_pricing.length;\n            if (quantityPricingTiersAmount > 0) {\n                result_quantity_pricing = _.map(result_quantity_pricing, function(\n                    price_range,\n                    index\n                ) {\n                    return {\n                        maximumquantity:\n                            item &&\n                            item.get('maximumquantity') &&\n                            (quantityPricingTiersAmount - 1 === index &&\n                                item.get('maximumquantity') === price_range.maximumquantity)\n                                ? price_range.maximumquantity\n                                : (price_range.maximumquantity &&\n                                      price_range.maximumquantity - 1) ||\n                                  price_range.maximumquantity,\n                        minimumquantity: price_range.minimumquantity,\n                        price: price_range.price,\n                        price_formatted: price_range.price_formatted,\n                        price_range: price_range.price_range,\n                        is_range: !!price_range.is_range,\n                        notShowQuantityRange:\n                            price_range.maximumquantity &&\n                            price_range.minimumquantity &&\n                            price_range.maximumquantity === price_range.minimumquantity\n                    };\n                });\n\n                _.first(result_quantity_pricing).minimumquantity =\n                    _.first(result_quantity_pricing).minimumquantity || 1;\n            }\n\n            return result_quantity_pricing;\n        }\n\n        return [];\n    },\n\n    // @method computeRanges compute price if they are different and make a range\n    // @param {Array<OnlineCustomerPriceDetail>} quantity_pricings\n    // @return {Array<QuantityPricing.PriceRange>}\n    computeRanges: function computeRanges(quantity_pricings) {\n        let ranges = [];\n\n        _.each(quantity_pricings, function(quantity_pricing) {\n            ranges = ranges.concat(quantity_pricing);\n        });\n\n        const grouped_ranges = _.groupBy(ranges, function(range) {\n            return range.minimumquantity;\n        });\n\n        const result = [];\n\n        _.each(grouped_ranges, function(ranges) {\n            const max = _.max(_.pluck(ranges, 'price'));\n            const min = _.min(_.pluck(ranges, 'price'));\n            const is_range = min !== max;\n            // @class QuantityPricing.PriceRange\n            const range = {\n                // @property {Number} maximumquantity\n                maximumquantity: _.first(ranges).maximumquantity,\n                // @property {Number} minimumquantity\n                minimumquantity: _.first(ranges).minimumquantity,\n                // @property {Number} price\n                price: is_range ? -1 : _.first(ranges).price,\n                // @property {String} price_formatted\n                price_formatted: is_range ? '' : _.first(ranges).price_formatted,\n                // @property {Boolean} is_range\n                is_range: is_range,\n                // @property {QuantityPricing.PriceRange.Range} price_range\n                // @class QuantityPricing.PriceRange.Range\n                price_range: is_range\n                    ? {\n                          // @property {Number} max\n                          max: max,\n                          // @property {Number} min\n                          min: min,\n                          // @property {String} max_formatted\n                          max_formatted: _.findWhere(ranges, { price: max }).price_formatted,\n                          // @property {String} min_formatted\n                          min_formatted: _.findWhere(ranges, { price: min }).price_formatted\n                      }\n                    : null\n            };\n\n            result.push(range);\n            // @class QuantityPricing.Utils\n        });\n\n        return result;\n    },\n\n    // @method areQuantityPricingEqual compare price between childs\n    // @param {OnlineCustomerPriceDetail} quantity_pricing_original\n    // @param {OnlineCustomerPriceDetail} quantity_pricing_to_compare\n    // return {Boolean}\n    areQuantityPricingEqual: function areQuantityPricingEqual(\n        quantity_pricing_original,\n        quantity_pricing_to_compare\n    ) {\n        if (\n            quantity_pricing_to_compare &&\n            quantity_pricing_original &&\n            quantity_pricing_original.length === quantity_pricing_to_compare.length\n        ) {\n            let are_equal = true;\n\n            for (let i = 0; i < quantity_pricing_original.length; i++) {\n                if (\n                    quantity_pricing_original[i].maximumquantity !==\n                        quantity_pricing_to_compare[i].maximumquantity ||\n                    quantity_pricing_original[i].minimumquantity !==\n                        quantity_pricing_to_compare[i].minimumquantity\n                ) {\n                    are_equal = false;\n                }\n            }\n            return are_equal;\n        }\n        return false;\n    }\n};\n\nexport = QuantityPricingUtils;\n"]}