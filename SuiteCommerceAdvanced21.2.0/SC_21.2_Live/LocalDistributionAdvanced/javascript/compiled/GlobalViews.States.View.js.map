{"version":3,"sources":["GlobalViews.States.View.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAWF,wDAAwD;IACxD,IAAM,qBAAqB,GAAQ,YAAY,CAAC,MAAM,CAAC;QACnD,QAAQ,EAAE,uBAAuB;QAEjC,8DAA8D;QAC9D,UAAU,EAAE;YACR,IAAM,OAAO,GACT,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YACzF,IAAM,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;YACzC,IAAM,IAAI,GAAG,IAAI,CAAC;YAElB,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAS,KAAU;gBAC9B,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;YACjE,CAAC,CAAC,CAAC;YAEH,yCAAyC;YACzC,OAAO;gBACH,+CAA+C;gBAC/C,wBAAwB,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC;gBAC/C,4BAA4B;gBAC5B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE;gBACjC,kCAAkC;gBAClC,MAAM,EAAE,MAAM;gBACd,mCAAmC;gBACnC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;gBACzC,gCAAgC;gBAChC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,cAAc;aACtD,CAAC;QACN,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,qBAAqB,CAAC","file":"GlobalViews.States.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"GlobalViews.States.View\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended\" />\n\nimport * as _ from 'underscore';\n\nimport * as global_views_states_tpl from 'global_views_states.tpl';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class GlobalViews.States.View @extends Backbone.View\nconst GlobalViewsStatesView: any = BackboneView.extend({\n    template: global_views_states_tpl,\n\n    // @method getContext @returns GlobalViews.States.View.Context\n    getContext: function() {\n        const country =\n            this.options.selectedCountry && this.options.countries[this.options.selectedCountry];\n        const states = country && country.states;\n        const self = this;\n\n        _.each(states, function(state: any) {\n            state.isSelected = state.code === self.options.selectedState;\n        });\n\n        // @class GlobalViews.States.View.Context\n        return {\n            // @property {Boolean} isCountryAndStatePresent\n            isCountryAndStatePresent: !!(country && states),\n            // @property {String} manage\n            manage: this.options.manage || '',\n            // @property {Array<Object>} sates\n            states: states,\n            // @property {String} selectedState\n            selectedState: this.options.selectedState,\n            // @property {String} inputClass\n            inputClass: this.options.cssclass || 'input-xlarge'\n        };\n    }\n});\n\nexport = GlobalViewsStatesView;\n"]}