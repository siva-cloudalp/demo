{"version":3,"sources":["Backbone.Model.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAUF,CAAC,CAAC,MAAM,CACJ,QAAQ,CAAC,KAAK,CAAC,SAAS,EACxB;QACI,wDAAwD;QACxD,4DAA4D;QAC5D,GAAG,EAAE;YACD,IAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAE3E,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE;gBACd,OAAO,IAAI,CAAC;aACf;YACD,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACjD,OAAO,IAAI,GAAG,GAAG,GAAG,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpE,CAAC;QAED,QAAQ,EAAE,SAAS,QAAQ;YACvB,OAAO,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;QACjC,CAAC;QAED,kEAAkE;QAClE,4DAA4D;QAC5D,WAAW,EAAE,YAAY;QAEzB,IAAI,EAAE;YAAS,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YAClB,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,CACzC,CAAC,CAAC,IAAI,CAAC,UAAS,IAAI,EAAE,MAAM,EAAE,GAAG;gBAC7B,IAAI;oBACA,IAAI,GAAG,CAAC,iBAAiB,EAAE;wBACvB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBACjE;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;iBAC7D;YACL,CAAC,EAAE,IAAI,CAAC,CACX,CAAC;QACN,CAAC;QAED,cAAc,EAAE,UAAS,GAAG;YACxB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBACzD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;aAC1B;YAED,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACrD;iBAAM;gBACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC/B;QACL,CAAC;QAED,eAAe,EAAE;YACb,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;QACD,qBAAqB,EAAE,UAAS,oBAAoB;YAChD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAC9D,CAAC;KACJ,EACD,wCAAkB,CACrB,CAAC;IAEF,IAAM,aAAa,GAAQ,QAAQ,CAAC,KAAK,CAAC;IAC1C,OAAS,aAAa,CAAC","file":"Backbone.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Backbone.Model\"/>\nimport '../../Utilities/JavaScript/backbone.validation';\nimport * as _ from 'underscore';\n\nimport { SCCancelableEvents } from '../../SC/JavaScript/SC.CancelableEvents';\n\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n_.extend(\n    Backbone.Model.prototype,\n    {\n        // @method url SCA Overrides @?method Backbone.Model.url\n        // to add model's 'internalid' as parameter @return {String}\n        url: function() {\n            const base = _.result(this, 'urlRoot') || _.result(this.collection, 'url');\n\n            if (this.isNew()) {\n                return base;\n            }\n            const sep = base.indexOf('?') === -1 ? '?' : '&';\n            return base + sep + 'internalid=' + encodeURIComponent(this.id);\n        },\n\n        deepCopy: function deepCopy() {\n            return this.attributes || {};\n        },\n\n        // @method url SCA Overrides @?property Backbone.Model.idAttribute\n        // to add model's 'internalid' as parameter @return {String}\n        idAttribute: 'internalid',\n\n        sync: function(...args) {\n            return Backbone.sync.apply(this, args).always(\n                _.bind(function(body, status, xhr) {\n                    try {\n                        if (xhr.getResponseHeader) {\n                            this.addOperationId(xhr.getResponseHeader('x-n-operationid'));\n                        }\n                    } catch (e) {\n                        console.error('Error fetching Operation Id from header.');\n                    }\n                }, this)\n            );\n        },\n\n        addOperationId: function(ids) {\n            if (!this.operationIds || !Array.isArray(this.operationIds)) {\n                this.operationIds = [];\n            }\n\n            if (Array.isArray(ids)) {\n                this.operationIds = this.operationIds.concat(ids);\n            } else {\n                this.operationIds.push(ids);\n            }\n        },\n\n        getOperationIds: function() {\n            return this.operationIds;\n        },\n        getLatestOperationIds: function(lastOperationIdIndex) {\n            return this.getOperationIds().slice(lastOperationIdIndex);\n        }\n    },\n    SCCancelableEvents\n);\n\nconst BackboneModel: any = Backbone.Model;\nexport = BackboneModel;\n"]}