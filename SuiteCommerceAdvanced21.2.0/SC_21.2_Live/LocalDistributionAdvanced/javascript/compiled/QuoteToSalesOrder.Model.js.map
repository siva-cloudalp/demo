{"version":3,"sources":["QuoteToSalesOrder.Model.ts"],"names":[],"mappings":"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","file":"QuoteToSalesOrder.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"QuoteToSalesOrder.Model\"/>\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\n\nimport TransactionModel = require('../../../Commons/Transaction/JavaScript/Transaction.Model');\nimport OrderHistoryModel = require('../../OrderHistory/JavaScript/OrderHistory.Model');\nimport Tracker = require('../../../Commons/Tracker/JavaScript/Tracker');\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\n\n// @module QuoteToSalesOrder\n\n// @class QuoteToSalesOrder.Model @extend Transaction.Model\nexport = TransactionModel.extend({\n    initialize: function(attributes) {\n        // call the initialize of the parent object, equivalent to super()\n        TransactionModel.prototype.initialize.apply(this, arguments);\n\n        this.on('change:confirmation', function(model, confirmation) {\n            if (!(model.get('confirmation') && model.get('summary'))) {\n                this.set('summary', { total: 0 });\n            }\n            model.set('confirmation', new OrderHistoryModel(confirmation), { silent: true });\n        });\n        this.trigger('change:confirmation', this, (attributes && attributes.confirmation) || {});\n    },\n    // @method urlRoot Property implemented as a\n    // function to add in all server calls the quote id parameter\n    // @return {String}\n    urlRoot: function(): string {\n        let url = `${Utils.getAbsoluteUrl('services/QuoteToSalesOrder.Service.ss?quoteid=') +\n            this.get('quoteid')}&salesorderid=${this.get('salesorderid')}`;\n        if (Utils.parseUrlOptions((<any>Backbone.history).location.search).externalPayment) {\n            url = Utils.addParamsToUrl(url, { skipvalidation: 'true' });\n        }\n\n        return url;\n    },\n\n    /// ///////////////////////////////////////////////////\n    //\t\t\tCOPIED METHODS\t\t\t\t\t\t\t//\n    //\tThe following method have been copied from \t\t//\n    //\tthe LiveOrder.Model as the idea is make\t \t\t//\n    //\tparity with the standard checkout process \t\t//\n    //\tin the future when the LiveOrder.Model \t\t\t//\n    //\tstart inherit from Transaction.Model we will\t//\n    //\tbe able to unify this two models \t\t\t\t//\n    /// ///////////////////////////////////////////////////\n\n    // @method getNonShippableLines Returns the order's line that are NON Shippable\n    // @returns {Array<Transaction.Line.Model>}\n    getNonShippableLines: function(): any[] {\n        return this.get('lines').filter(function(line) {\n            return !line.get('item').get('_isfulfillable');\n        });\n    },\n\n    // @method getIfThereAreDeliverableItems Determines if at least one item is shippable\n    // @return {Boolean}\n    getIfThereAreDeliverableItems: function getIfThereAreDeliverableItems(): boolean {\n        return (\n            this.get('lines').length -\n                this.getNonShippableLines().length -\n                this.getPickupInStoreLines().length >\n            0\n        );\n    },\n    // @method getShippableLines\n    // @returns {Array<Transaction.Line.Model>} the order's line that are shippable without taking into account if their have or not set a shipaddress\n    getShippableLines: function getShippableLines(): any[] {\n        return this.get('lines').filter(function(line) {\n            return (\n                line.get('item').get('_isfulfillable') &&\n                line.get('fulfillmentChoice') !== 'pickup' &&\n                line.get('quantity')\n            );\n        });\n    },\n    getPickupInStoreLines: function getPickupInStoreLines() {\n        const lines = [];\n        this.get('lines').each(function(line) {\n            if (line.get('fulfillmentChoice') === 'pickup') {\n                lines.push(line);\n            }\n        });\n\n        return lines;\n    },\n    // @method shippingAddressIsRequired Checks if the shipping address is require and if all items in the order are nonshippable\n    // @return {Boolean}\n    shippingAddressIsRequired: function(): boolean {\n        return (\n            this.getIfThereAreDeliverableItems() &&\n            Configuration.get('siteSettings.requireshippinginformation', 'F') === 'T'\n        );\n    },\n\n    // @method save Override default save method to just return a resolved promise when the cart have already been saved.\n    // @return {jQuery.Deferred}\n    save: function() {\n        if (this.get('confirmation') && this.get('confirmation').get('internalid')) {\n            return jQuery.Deferred().resolve();\n        }\n\n        const payment_method_external = this.get('paymentmethods').findWhere({ isexternal: 'T' });\n        let original_type;\n\n        if (payment_method_external) {\n            original_type = payment_method_external.get('type');\n            payment_method_external.set('type', 'external', { silent: true });\n        }\n\n        return TransactionModel.prototype.save.apply(this, arguments).fail(function() {\n            if (original_type) {\n                payment_method_external.set('type', original_type, { silent: true });\n            }\n        });\n    },\n\n    // @method submit Method invoked when the user a new sales order want to be created from a quote\n    // @return {jQuery.Deferred}\n    submit: function() {\n        const self = this;\n\n        return this._submit\n            .apply(this, arguments)\n            .done(function() {\n                // Converting the Transaction.Model into Track.Transaction.Model until we unified it with the LiveOrder.Model\n                const confirmation = self.get('confirmation');\n                const summary = self.get('summary');\n                const transaction = {\n                    confirmationNumber: confirmation.get('confirmationnumber'),\n                    subTotal: summary.subtotal,\n                    total: summary.total,\n                    taxTotal: summary.taxtotal,\n                    shippingCost: summary.shippingcost,\n                    handlingCost: summary.handlingcost,\n                    products: new Backbone.Collection()\n                };\n                const transactionModel = new Backbone.Model(transaction);\n\n                self.get('lines').each(function(line) {\n                    const item = line.get('item');\n\n                    transactionModel.get('products').add(\n                        new Backbone.Model({\n                            sku: item.get('_sku', true),\n                            name: item.get('displayname'),\n                            category: item.get('category'),\n                            rate: line.get('rate'),\n                            quantity: line.get('quantity'),\n                            options: line\n                                .get('options')\n                                .map(function(option) {\n                                    return option.get('value').label;\n                                })\n                                .sort()\n                                .join(', ')\n                        })\n                    );\n                });\n\n                Tracker.getInstance().trackTransaction(transactionModel, {\n                    category: 'quote-order',\n                    action: 'button',\n                    label: '',\n                    value: 1\n                });\n            })\n            .fail(function(jqXhr) {\n                jqXhr.preventDefault = true;\n            });\n    }\n});\n"]}