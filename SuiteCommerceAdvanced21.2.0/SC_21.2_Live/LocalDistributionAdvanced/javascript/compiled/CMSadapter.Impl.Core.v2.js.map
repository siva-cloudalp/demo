{"version":3,"sources":["CMSadapter.Impl.Core.v2.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAQF,uBAAuB;IACvB;;;;MAIE;IAEF,IAAM,mBAAmB,GAAG,UAAS,WAAW,EAAE,GAAG;QACjD,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;IACpD,CAAC,CAAC;IAEF,mBAAmB,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAE5E,mBAAmB,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI;QAC9C,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,iBAAiB,EAAE;YAC/C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,mBAAmB,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,YAAY;QAC9D,oEAAoE;QACpE,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;YAC7B,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,yGAAyG;YAE/I,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,qBAAqB,EAAE;YAC/B,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAErC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,mBAAmB,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,eAAe;QACpE,OAAO;YACH,qBAAqB,EAAE,6BAAa,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;YACzE,QAAQ,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,wBAAwB,CAAC;SACrE,CAAC;IACN,CAAC,CAAC;IAEF,OAAS,mBAAmB,CAAC","file":"CMSadapter.Impl.Core.v2.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"CMSadapter.Impl.Core.v2\"/>\n\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\n\nimport CMSadapterImplCore = require('./CMSadapter.Impl.Core');\n\n/* global CMS: false */\n/*\n\n@module CMSadapter\n@class CMSadapter.Impl.Core.v2 the class that has the core integration using the CMS API v2.\n*/\n\nconst CMSadapterImplCore2 = function(application, CMS) {\n    CMSadapterImplCore.call(this, application, CMS);\n};\n\nCMSadapterImplCore2.prototype = Object.create(CMSadapterImplCore.prototype);\n\nCMSadapterImplCore2.prototype.init = function init() {\n    const self = this;\n\n    this.application.getLayout().on('afterAppendView', function() {\n        self.CMS.trigger('adapter:page:changed');\n    });\n\n    this.CMS.trigger('adapter:ready');\n};\n\nCMSadapterImplCore2.prototype.listenForCMS = function listenForCMS() {\n    // CMS listeners - CMS tells us to do something, could fire anytime.\n    const self = this;\n\n    self.CMS.on('adapter:get:setup', function() {\n        const setup = self.getSetupOptions(); // Config values the adapter can give the cms on startup. Currently nothing is used (cms ignores values).\n\n        self.CMS.trigger('adapter:got:setup', setup);\n    });\n\n    self.CMS.on('adapter:get:context', function() {\n        const context = self.getCmsContext();\n\n        self.CMS.trigger('adapter:got:context', context);\n    });\n};\n\nCMSadapterImplCore2.prototype.getSetupOptions = function getSetupOptions() {\n    return {\n        esc_to_login_disabled: Configuration.get('cms.escToLoginDisabled', false),\n        features: ['landingPages', 'categories', 'customerSegmentPreview']\n    };\n};\n\nexport = CMSadapterImplCore2;\n"]}