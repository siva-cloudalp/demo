{"version":3,"sources":["OrderWizard.Module.PaymentMethod.External.ts"],"names":[],"mappings":"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","file":"OrderWizard.Module.PaymentMethod.External.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"OrderWizard.Module.PaymentMethod.External\"/>\n\nimport * as _ from 'underscore';\nimport * as order_wizard_paymentmethod_external_module_tpl from 'order_wizard_paymentmethod_external_module.tpl';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { Configuration } from '../../SCA/JavaScript/Configuration';\n\nimport OrderWizardModulePaymentMethod = require('./OrderWizard.Module.PaymentMethod');\nimport TransactionPaymentmethodModel = require('../../../Commons/Transaction/JavaScript/Transaction.Paymentmethod.Model');\n\n// @class OrderWizard.Module.PaymentMethod.External @extends OrderWizard.Module.PaymentMethod\nconst OrderWizardModulePaymentMethodExternal: any = OrderWizardModulePaymentMethod.extend({\n    template: order_wizard_paymentmethod_external_module_tpl,\n\n    render: function render() {\n        const options = this.options.model && this.options.model.get('options');\n\n        if (options) {\n            _.extend(this.options, options);\n        }\n\n        this.setPaymentMethod();\n\n        this._render();\n    },\n\n    setPaymentMethod: function() {\n        const n = Configuration.get('siteSettings.id');\n        const status_accept_value = Configuration.get(\n            'siteSettings.externalCheckout.' +\n                this.options.record_type.toUpperCase() +\n                '.statusAcceptValue',\n            'ACCEPT'\n        );\n        const status_reject_value = Configuration.get(\n            'siteSettings.externalCheckout.' +\n                this.options.record_type.toUpperCase() +\n                '.statusRejectValue',\n            'REJECT'\n        );\n        const status_parameter_name = Configuration.get(\n            'siteSettings.externalCheckout.' +\n                this.options.record_type.toUpperCase() +\n                '.statusParameterName',\n            'status'\n        );\n        const url = Utils.getAbsoluteUrl('external_payment.ssp');\n        const current_touchpoint = Configuration.get('currentTouchpoint');\n        const thankyouurl_parameters = {\n            n: n,\n            externalPaymentDone: 'T',\n            touchpoint: current_touchpoint,\n            recordType: this.options.record_type || 'salesorder'\n        };\n        const errorurl_parameters = {\n            n: n,\n            externalPaymentDone: 'T',\n            touchpoint: current_touchpoint,\n            recordType: this.options.record_type || 'salesorder'\n        };\n        const returnurl_parameters = {\n            n: n,\n            externalPaymentDone: 'T',\n            touchpoint: current_touchpoint,\n            recordType: this.options.record_type || 'salesorder'\n        };\n\n        thankyouurl_parameters[status_parameter_name] = status_accept_value;\n        errorurl_parameters[status_parameter_name] = status_reject_value;\n\n        if (this.options.prevent_default) {\n            const prevent_default_parameter_name = Configuration.get(\n                'siteSettings.externalCheckout.' +\n                    this.options.record_type.toUpperCase() +\n                    '.preventDefaultParameterName',\n                'preventDefault'\n            );\n            const prevent_default_value = Configuration.get(\n                'siteSettings.externalCheckout.' +\n                    this.options.record_type.toUpperCase() +\n                    '.preventDefaultValue',\n                'T'\n            );\n\n            thankyouurl_parameters[prevent_default_parameter_name] = prevent_default_value;\n            errorurl_parameters[prevent_default_parameter_name] = prevent_default_value;\n            returnurl_parameters[prevent_default_parameter_name] = prevent_default_value;\n        }\n        this.paymentMethod = new TransactionPaymentmethodModel({\n            type: 'external_checkout_' + this.options.paymentmethod.key,\n            isexternal: 'T',\n            internalid: this.options.paymentmethod.internalid,\n            merchantid: this.options.paymentmethod.merchantid,\n            key: this.options.paymentmethod.key,\n            thankyouurl: Utils.addParamsToUrl(url, thankyouurl_parameters), // Commerce API\n            errorurl: Utils.addParamsToUrl(url, errorurl_parameters), // Commerce API\n            returnurl: Utils.addParamsToUrl(url, returnurl_parameters) // SuiteScript\n        });\n    },\n\n    submit: function submit() {\n        this.setPaymentMethod();\n        OrderWizardModulePaymentMethod.prototype.submit.apply(this);\n    },\n\n    getContext: function getContext() {\n        return {\n            // @property {String} imageUrl\n            imageUrl: this.options.paymentmethod.imagesrc[0],\n            // @property {String} name\n            name: this.options.paymentmethod.name,\n            // @property {String} description\n            description:\n                this.options.description ||\n                Utils.translate(\n                    'You will be redirected to your external payment site after reviewing your order on next step. Once your order is placed, you will return to our site to see the confirmation of your purchase.'\n                ),\n            // @property {String} type\n            type: this.paymentMethod.get('type'),\n            isSelected: this.paymentMethod.get('type') === this.options.selectedExternalId\n        };\n    }\n});\n\nexport = OrderWizardModulePaymentMethodExternal;\n"]}