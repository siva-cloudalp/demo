{"version":3,"sources":["Transaction.Line.Views.Option.View.ts"],"names":[],"mappings":"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","file":"Transaction.Line.Views.Option.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Transaction.Line.Views.Option.View\"/>\n\nimport * as _ from 'underscore';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\nconst TransactionLineViewsOptionView: any = BackboneView.extend({\n    // @initialize initialize Set the option template and values availability\n    // @param {Transaction.Line.Views.Option.View.initialize} options\n    // @return {Void}\n    initialize: function() {\n        this.config = _.findWhere(Configuration.get('ItemOptions.optionsConfiguration', []), {\n            cartOptionId: this.model.get('cartOptionId')\n        }) || { templates: {} };\n        this.config.templates = this.config.templates || {};\n        this.line_model = this.options.line;\n\n        const item_options_default_templates = Configuration.get(\n            'ItemOptions.defaultTemplates',\n            {}\n        );\n\n        if (item_options_default_templates && item_options_default_templates.selectorByType) {\n            // Sets templates for this option\n            if (!this.config.templates.selector) {\n                const option_selector_template =\n                    item_options_default_templates.selectorByType[this.model.get('type')];\n                const default_option_selector_template =\n                    item_options_default_templates.selectorByType.default;\n\n                this.config.templates.selector =\n                    option_selector_template || default_option_selector_template;\n            }\n            if (!this.config.templates.selected) {\n                const selected_option_template =\n                    item_options_default_templates.selectedByType[this.model.get('type')];\n                const default_selected_option_template =\n                    item_options_default_templates.selectedByType.default;\n\n                this.config.templates.selected =\n                    selected_option_template || default_selected_option_template;\n            }\n        }\n\n        this.options.templateName = this.options.templateName || 'selector';\n        this.template = this.config.templates[this.options.templateName];\n    },\n\n    render: function() {\n        if (!this.model.get('value') || !this.model.get('value').internalid) {\n            return this;\n        }\n        return this._render();\n    },\n\n    // @method getContext\n    // @returns {Transaction.Line.Views.Option.View.Context}\n    getContext: function() {\n        const self = this;\n        let selected_value = this.model.get('value') || {};\n        const values = _.map(this.model.get('values') || [], function(value) {\n            let color = '';\n            let is_color_tile = false;\n            let image = {};\n            let is_image_tile = false;\n\n            if (self.model.get('colors')) {\n                color =\n                    self.model.get('colors')[(<any>value).label] ||\n                    self.model.get('colors').defaultColor;\n                if (_.isObject(color)) {\n                    image = color;\n                    color = '';\n                    is_image_tile = true;\n                } else {\n                    is_color_tile = true;\n                }\n            }\n\n            // @class ItemOptions.Option.View.Value\n            return {\n                // @property {String} internalid\n                internalid: (<any>value).internalid,\n                // @property {Boolean} isAvailable\n                isAvailable: (<any>value).isAvailable,\n                // @property {String} label\n                label: (<any>value).label,\n                // @property {Boolean} isActive\n                isActive: (<any>value).internalid === selected_value.internalid,\n                // @property {String} color\n                color: color,\n                // @property {Boolean} isColorTile\n                isColorTile: is_color_tile,\n                // @property {Boolean} isImageTile\n                isImageTile: is_image_tile,\n                // @property {Object} image\n                image: image,\n                // @property {Boolean} isLightColor\n                isLightColor: _.contains(\n                    Configuration.get('layout.lightColors', []),\n                    (<any>value).label\n                )\n            };\n            // @class Transaction.Line.Views.Option.View\n        });\n\n        selected_value = _.extend(\n            {},\n            selected_value,\n            _.findWhere(values, { internalid: selected_value.internalid }) || {}\n        );\n\n        selected_value.label = selected_value.label || selected_value.internalid;\n\n        // @class Transaction.Line.Views.Option.View.Context\n        return {\n            // @property {Transaction.Line.Option.Model} model\n            model: this.model,\n            // @property {Array<ItemOptions.Option.View.Value>} values\n            values: values,\n            // @property {Boolean} showSelectedValue\n            showSelectedValue: !!selected_value,\n            // @property {Boolean} isMandatory\n            isMandatory: this.model.get('isMandatory'),\n            // @property {String} itemOptionId\n            itemOptionId: this.model.get('itemOptionId'),\n            // @property {String} cartOptionId\n            cartOptionId: this.model.get('cartOptionId'),\n            // @property {String} label\n            label: (this.config && this.config.label) || this.model.get('label'),\n            // @property {ItemViews.Option.View.Option} selectedValue\n            selectedValue: selected_value,\n            // @property {Boolean} isTextArea\n            isTextArea: this.model.get('type') === 'textarea',\n            // @property {Boolean} isEmail\n            isEmail: this.model.get('type') === 'email',\n            // @property {Boolean} isText\n            isText: this.model.get('type') === 'text',\n            // @property {Boolean} isSelect\n            isSelect: this.model.get('type') === 'select',\n            // @property {Boolean} isCheckbox\n            isCheckbox: this.model.get('type') === 'checkbox',\n            // @property {Boolean} idDate\n            isDate: this.model.get('type') === 'date',\n            // @property {String} htmlId\n            htmlId: 'option-' + this.model.get('cartOptionId'),\n            // @property {String} htmlIdContainer\n            htmlIdContainer: this.model.get('cartOptionId') + '-container'\n        };\n        // @class Transaction.Line.Views.Option.View\n    }\n});\n\nexport = TransactionLineViewsOptionView;\n"]}