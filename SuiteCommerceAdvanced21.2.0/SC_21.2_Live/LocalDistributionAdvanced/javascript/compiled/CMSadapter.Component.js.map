{"version":3,"sources":["CMSadapter.Component.ts"],"names":[],"mappings":"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","file":"CMSadapter.Component.js","sourcesContent":["/*\n\t© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"CMSadapter.Component\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\n\nimport CustomContentTypeContainerView = require('../../CustomContentType/JavaScript/CustomContentType.Container.View');\nimport { SCBaseComponent } from '../../../Commons/SC/JavaScript/SC.BaseComponent';\nimport { SCBaseComponentChildViewsComponent } from '../../../Commons/SC/JavaScript/SC.BaseComponent.ChildViewsComponent';\nimport { ChildViewGenerator } from '../../../Commons/Core/JavaScript/View';\n\ninterface RawCCT {\n    id: string;\n    instance_id: string;\n    selector: {\n        'data-cms-area': string;\n    };\n    settings: {};\n    render_settings: {\n        position: string;\n        classes: string;\n    };\n}\n\nlet rawCCTs: { [cctInstanceId: string]: RawCCT } = null;\nlet procecedCCTs: RawCCT[] = [];\n\nlet customContentTypesViews = {};\n\nexport = function CMSadapterComponentGenerator(application) {\n    // @class CMSComponent Allows the user to interact with CMS related\n    // concepts like enhanced content, landing pages, commerce categories,\n    // custom content types, etc.\n    // @extends SC.BaseComponent\n    const CMSAdapterComponent = SCBaseComponent.extend({\n        componentName: 'CMS',\n\n        application: application,\n\n        // @property {CMSadapter.Component.CustomContentTypeStore}\n        // _customContentTypes Custom content type store\n        // @private\n        _customContentTypes: {},\n\n        // @method _createError Internal error to centralize the generation of errors\n        // @param {String} error_code Code of the error (Capitalized word)\n        // @param {String} error_message Details error message\n        // @return {CMSadapter.Component.Error}\n        _createError: function _createError(error_code, error_message) {\n            // @class CMSadapter.Component.Error\n            return {\n                // @property {String} code\n                title: error_code,\n                // @property {String} message\n                message: error_message\n            };\n            // @class CMSadapterComponent\n        },\n\n        // @method _installContent Internal method to handle the\n        // installation of a CCT (call the install method)\n        // @private\n        // @param {CustomContentType.Base.View} cct A CCT instance\n        // @param {Object} cct_settings Any object to be sent to the cct instance\n        // @return {jQuery.Deferred}\n        _installContent: function _installContent(cct, cct_settings, context_data) {\n            const self = this;\n\n            return jQuery.when(cct.install(cct_settings, context_data)).then(\n                function() {\n                    return jQuery.Deferred().resolve();\n                },\n                function(e) {\n                    const message =\n                        (e && _.isFunction(e.toString) && e.toString()) ||\n                        Utils.translate(\n                            'Unknown error installing CCT. CCT Instance Id: $(0)',\n                            cct.instanceId\n                        );\n                    return jQuery\n                        .Deferred()\n                        .reject(self._createError('ERR_INSTALLING_CCT', message));\n                }\n            );\n        },\n\n        // @method _updateSettings Internal method to handle the\n        // update of the CCT settings (call the update method)\n        // @private\n        // @param {CustomContentType.Base.View} cct A CCT instance\n        // @param {Object} cct_settings Any object to be sent to the cct instance\n        // @return {jQuery.Deferred}\n        _updateSettings: function _updateSettings(cctContainer, cct_settings) {\n            const self = this;\n            const cct = cctContainer.getChildViewInstance('CCT-View');\n\n            return jQuery.when(cct.update(cct_settings)).then(\n                function() {\n                    cct.render();\n                    return jQuery.Deferred().resolve();\n                },\n                function(e) {\n                    const message =\n                        (e && _.isFunction(e.toString) && e.toString()) ||\n                        Utils.translate(\n                            'Unknown error updating CCT. CCT Instance Id: $(0)',\n                            cct.instanceId\n                        );\n                    return jQuery.Deferred().reject(self._createError('ERR_UPDATING_CCT', message));\n                }\n            );\n        },\n\n        setRawCCTs: function setRawCCTs(ccts: RawCCT[]) {\n            rawCCTs = {};\n\n            _.each(ccts, cct => {\n                rawCCTs[cct.instance_id] = cct;\n            });\n        },\n\n        // @method registerCustomContentType Register a new CCT for the running application\n        // @public\n        // @param {CustomContentType.Base.View} cct Custom Content Type View constructor\n        // @return {Void}\n        registerCustomContentType: function registerCustomContentType(cct) {\n            this._customContentTypes[cct.id.toLowerCase()] = cct;\n        },\n\n        // @method addContents Add multiple CCTs.\n        // If the CCT was already added, then it just will attach the\n        // previous CCT view instance again\n        // (that means that new settings or render_settings will be ignored)\n        // Otherwise it will create a new CCT and add it to the current view\n        // @public\n        // @return {jQuery.Deferred}\n        addContents: function addContents() {\n            const old_instances = _.keys(customContentTypesViews);\n            const new_instances = [];\n\n            SCBaseComponentChildViewsComponent.resetViewsToRerender();\n\n            let ccts = [];\n\n            if (rawCCTs) {\n                ccts = _.values(rawCCTs);\n            } else {\n                ccts = procecedCCTs;\n            }\n\n            ccts = this._sortCCTs(ccts);\n\n            // Calculate what ccts needs to be preserved and what ccts are new\n            _.each(ccts, function(cct: any) {\n                const index = _.indexOf(old_instances, cct.instance_id);\n\n                if (\n                    index >= 0 &&\n                    customContentTypesViews[cct.instance_id] &&\n                    (customContentTypesViews[cct.instance_id].dataCmsArea ===\n                        cct.selector['data-cms-area'] &&\n                        customContentTypesViews[cct.instance_id].position ===\n                            cct.render_settings.position)\n                ) {\n                    old_instances.splice(index, 1);\n                }\n\n                new_instances.push(cct);\n            });\n\n            procecedCCTs = ccts;\n            rawCCTs = null;\n\n            // Remove old instances\n            if (!this.application.getLayout().getCurrentView().inModal) {\n                _.each(old_instances, old_instance_id => {\n                    this.removeContent(old_instance_id, true);\n                });\n            }\n\n            customContentTypesViews = {};\n\n            _.each(new_instances, cct => {\n                this.addContent(\n                    cct.id,\n                    cct.instance_id,\n                    cct.selector,\n                    cct.settings,\n                    cct.render_settings\n                );\n            });\n        },\n\n        // @method addContent Adds a new CCT into the specified placeholder\n        // @public\n        // @param {String} cct_id Id of the CCT constructor. This value\n        // must have been registered previously\n        // @param {String} cct_instance_id. Unique identifier of the new CCT\n        // @param {Selector} cct_selector Where the cct should be inserted\n        // @param {Object} cct_settings Any setting that will be sent to the new cct instance\n        // @param {CMSadapter.Component.addContent.RenderSettings} render_settings\n        // Setting on how the rendering should be done\n        // @return {jQuery.Deferred}\n        addContent: function addContent(\n            cctId: string,\n            cctInstanceId: string,\n            cctSelector,\n            cctSettings,\n            renderSettings\n        ) {\n            if (rawCCTs) {\n                if (!rawCCTs[cctInstanceId]) {\n                    rawCCTs[cctInstanceId] = {\n                        id: cctId,\n                        instance_id: cctInstanceId,\n                        selector: cctSelector,\n                        settings: cctSettings,\n                        render_settings: renderSettings\n                    };\n                    return jQuery.Deferred().resolve();\n                } else {\n                    return jQuery\n                        .Deferred()\n                        .reject(\n                            this._createError(\n                                'ERR_INVALID_INSTANCE_ID',\n                                Utils.translate(\n                                    `Invalid content type instance id: ${cctInstanceId}, already exists`\n                                )\n                            )\n                        );\n                }\n            } else {\n                if (!customContentTypesViews[cctInstanceId]) {\n                    const selector = SCBaseComponentChildViewsComponent.getPlaceholder(cctSelector);\n                    const container = selector\n                        ? SCBaseComponentChildViewsComponent.getPlaceholderViews(\n                              this.selectorToString(selector)\n                          )\n                        : null;\n                    const asyncOperations = [];\n\n                    cctId = cctId.toLowerCase();\n\n                    if (\n                        !selector ||\n                        !container.views ||\n                        !container.views.length ||\n                        !this._customContentTypes[cctId]\n                    ) {\n                        return jQuery.Deferred().resolve();\n                    }\n\n                    const cctGenerator = {\n                        cctId: cctId,\n                        cctInstanceId: cctInstanceId,\n                        cctConstructor: this._customContentTypes[cctId].view,\n                        cctConstructorOptions: this._customContentTypes[cctId].options || {},\n                        cctContainerConstructor: CustomContentTypeContainerView,\n                        cctRenderSettings: renderSettings,\n                        cctSelector: container.selector,\n                        cctSettings: cctSettings,\n                        cctErrorContextNotFound: this._createError(\n                            'ERR_CONTEXTNOTFOUND_CCT',\n                            Utils.translate(\n                                `Context for CCT not found. CCT Instance Id: ${cctInstanceId}`\n                            )\n                        )\n                    };\n\n                    customContentTypesViews[cctInstanceId] = {\n                        position: renderSettings.position,\n                        dataCmsArea: cctSelector['data-cms-area']\n                    };\n\n                    _.each(container.views, function(parentViewInstance: any) {\n                        const cctContainer = parentViewInstance.getChildViewInstance(\n                            cctSelector['data-cms-area'],\n                            cctInstanceId\n                        );\n\n                        if (!cctContainer) {\n                            const generatorConstructor = (\n                                parentView,\n                                asyncOperations?\n                            ): ChildViewGenerator<object, object> => {\n                                const childViewConstructor = () => {\n                                    const cctInstance = new cctGenerator.cctConstructor(\n                                        _.extend(cctGenerator.cctConstructorOptions, {\n                                            id: cctGenerator.cctId,\n                                            instanceId: cctGenerator.cctInstanceId\n                                        })\n                                    );\n\n                                    const cctContainerInstance = new cctGenerator.cctContainerConstructor(\n                                        {\n                                            innerCustomContentType: cctInstance,\n                                            instanceId: cctGenerator.cctInstanceId,\n                                            classes: cctGenerator.cctRenderSettings.classes\n                                        }\n                                    );\n\n                                    const contextData = parentView.getContextData(\n                                        cctInstance.getContextDataRequest()\n                                    );\n\n                                    if (cctInstance.validateContextDataRequest(contextData)) {\n                                        const installPromise = cctInstance.install(\n                                            cctGenerator.cctSettings,\n                                            contextData\n                                        );\n\n                                        if (asyncOperations) {\n                                            asyncOperations.push(installPromise);\n                                        }\n\n                                        cctContainerInstance.parentView = parentView;\n                                        cctContainerInstance.hasParent = true;\n\n                                        return cctContainerInstance;\n                                    } else if (asyncOperations) {\n                                        asyncOperations.push(cctGenerator.cctErrorContextNotFound);\n                                    }\n                                };\n\n                                return {\n                                    childViewConstructor: childViewConstructor,\n                                    childViewInstance: childViewConstructor(),\n                                    childViewIndex:\n                                        1000 +\n                                        parseInt(cctGenerator.cctRenderSettings.position, 10),\n                                    childViewSelector: cctGenerator.cctSelector,\n                                    childViewIsExternal: true\n                                };\n                            };\n\n                            const childViewInstancesGenerator = {};\n                            childViewInstancesGenerator[`cms:${cctSelector['data-cms-area']}`] = {};\n                            childViewInstancesGenerator[`cms:${cctSelector['data-cms-area']}`][\n                                cctInstanceId\n                            ] = generatorConstructor;\n\n                            const generator = generatorConstructor(\n                                parentViewInstance,\n                                asyncOperations\n                            );\n\n                            const childViewInstances = {};\n                            childViewInstances[`cms:${cctSelector['data-cms-area']}`] = {};\n                            childViewInstances[`cms:${cctSelector['data-cms-area']}`][\n                                cctInstanceId\n                            ] = generator;\n\n                            parentViewInstance.addChildViewInstances(childViewInstances, true);\n\n                            SCBaseComponentChildViewsComponent.addViewsToRerender(\n                                parentViewInstance,\n                                childViewInstancesGenerator\n                            );\n                        }\n                    });\n\n                    return jQuery.when.apply(jQuery, asyncOperations);\n                } else {\n                    return jQuery\n                        .Deferred()\n                        .reject(\n                            this._createError(\n                                'ERR_INVALID_INSTANCE_ID',\n                                Utils.translate(\n                                    `Invalid content type instance id: ${cctInstanceId}, already exists`\n                                )\n                            )\n                        );\n                }\n            }\n        },\n\n        // @method updateContent Updates a CCT settings and\n        // its render settings\n        // @public\n        // @param {String} cct_id Id of the CCT constructor.\n        // This value must have been registered previously\n        // @param {String} cctInstanceId. Unique identifier\n        // of the new CCT\n        // @param {Selector} cct_selector Where the cct should be inserted\n        // @param {Object} cct_settings Any setting that will be sent to the new cct instance\n        // @param {CMSadapter.Component.addContent.RenderSettings} render_settings\n        // Setting on how the rendering should be done\n        // @return {jQuery.Deferred}\n        updateContent: function updateContent(\n            cctId: string,\n            cctInstanceId: string,\n            cctSelector,\n            cctSettings,\n            renderSettings\n        ) {\n            if (rawCCTs) {\n                if (rawCCTs[cctInstanceId]) {\n                    rawCCTs[cctInstanceId] = {\n                        id: cctId,\n                        instance_id: cctInstanceId,\n                        selector: cctSelector,\n                        settings: cctSettings,\n                        render_settings: renderSettings\n                    };\n                    return jQuery.Deferred().resolve();\n                } else {\n                    return jQuery\n                        .Deferred()\n                        .reject(\n                            this._createError(\n                                'ERR_INVALID_INSTANCE_ID',\n                                Utils.translate(\n                                    `Invalid content type instance id: ${cctInstanceId}, does not exists`\n                                )\n                            )\n                        );\n                }\n            } else {\n                const self = this;\n                const dataCmsArea =\n                    customContentTypesViews[cctInstanceId] &&\n                    customContentTypesViews[cctInstanceId].dataCmsArea;\n                const asyncOperations = [];\n\n                if (dataCmsArea) {\n                    if (\n                        renderSettings.position === customContentTypesViews[cctInstanceId].position\n                    ) {\n                        const placeholder = SCBaseComponentChildViewsComponent.getPlaceholderViews(\n                            `[data-cms-area=\"${dataCmsArea}\"]`\n                        );\n                        const views = placeholder && placeholder.views;\n\n                        _.each(views, (view: any) => {\n                            const cctContainerView = view.getChildViewInstance(\n                                dataCmsArea,\n                                cctInstanceId\n                            );\n\n                            if (cctContainerView) {\n                                asyncOperations.push(\n                                    this._updateSettings(cctContainerView, cctSettings)\n                                );\n                            }\n                        });\n\n                        return jQuery.when.apply(jQuery, asyncOperations);\n                    } else {\n                        self.removeContent(cctInstanceId, true);\n\n                        return self.addContent(\n                            cctId,\n                            cctInstanceId,\n                            cctSelector,\n                            cctSettings,\n                            renderSettings\n                        );\n                    }\n                }\n\n                return jQuery\n                    .Deferred()\n                    .reject(\n                        self._createError(\n                            'ERR_INVALID_INSTANCE_ID',\n                            Utils.translate(\n                                `Invalid content type instance id: ${cctInstanceId}, does not exists`\n                            )\n                        )\n                    );\n            }\n        },\n\n        // @method _sortCCTs Internal method to sort a list of cct to be rendered\n        // @param {Array<CustomContentType.Base.View>} ccts List of ccts to be sorted\n        // @private\n        // @return {Array<CustomContentType.Base.View>}\n        _sortCCTs: function _sortCCTs(ccts) {\n            const self = this;\n\n            // sort first by placeholder and then by position\n            ccts.sort(function(cct_a, cct_b) {\n                const cct_a_selector = SCBaseComponentChildViewsComponent.getPlaceholder(\n                    cct_a.selector\n                );\n                const cct_b_selector = SCBaseComponentChildViewsComponent.getPlaceholder(\n                    cct_b.selector\n                );\n\n                const cct_a_key = cct_a_selector ? self.selectorToString(cct_a_selector) : '';\n                const cct_b_key = cct_b_selector ? self.selectorToString(cct_b_selector) : '';\n\n                if (cct_a_key === cct_b_key) {\n                    return (\n                        parseInt(cct_a.render_settings.position, 10) -\n                        parseInt(cct_b.render_settings.position, 10)\n                    );\n                }\n                return cct_a_key < cct_b_key ? 1 : 0;\n            });\n\n            return ccts;\n        },\n\n        // @method removeContent Removes a CCT from its location\n        // @public\n        // @param {String} cct_instance_id Unique CCT identifier\n        // @param {Boolean} skip_destroy_call Indicate if should destroy the instance or not\n        // @return {jQuery.Deferred}\n        removeContent: function removeContent(cctInstanceId: string, destroyCall: boolean) {\n            if (rawCCTs) {\n                if (rawCCTs[cctInstanceId]) {\n                    delete rawCCTs[cctInstanceId];\n                    return jQuery.Deferred().resolve();\n                } else {\n                    return jQuery\n                        .Deferred()\n                        .reject(\n                            this._createError(\n                                'ERR_INVALID_INSTANCE_ID',\n                                Utils.translate(\n                                    `The specified instance id is not registered. Instance Id: ${cctInstanceId}`\n                                )\n                            )\n                        );\n                }\n            } else {\n                const dataCmsArea =\n                    customContentTypesViews[cctInstanceId] &&\n                    customContentTypesViews[cctInstanceId].dataCmsArea;\n                const placeholder = SCBaseComponentChildViewsComponent.getPlaceholderViews(\n                    `[data-cms-area=\"${dataCmsArea}\"]`\n                );\n                const views = placeholder && placeholder.views;\n                const async_operations = [];\n\n                if (views) {\n                    _.each(views, function(view: any) {\n                        async_operations.push(\n                            view.removeChildViewInstance(dataCmsArea, cctInstanceId, destroyCall)\n                        );\n                    });\n\n                    if (destroyCall) {\n                        delete customContentTypesViews[cctInstanceId];\n                    }\n\n                    return jQuery.when.apply(jQuery, async_operations);\n                }\n\n                return jQuery\n                    .Deferred()\n                    .reject(\n                        this._createError(\n                            'ERR_INVALID_INSTANCE_ID',\n                            Utils.translate(\n                                `The specified instance id is not registered. Instance Id: ${cctInstanceId}`\n                            )\n                        )\n                    );\n            }\n        },\n\n        getContentIds: function getContentIds() {\n            return _.keys(this._customContentTypes);\n        },\n\n        // @method selectorToString returns the string key for a json selector\n        // @param {Selector} placeholder\n        // @return {String} the string key for a json selector\n        selectorToString: function selectorToString(placeholder) {\n            let str = '';\n\n            _.each(placeholder, function(value, key) {\n                str += '[' + key + '=\"' + value + '\"]';\n            });\n\n            return str;\n        }\n    });\n\n    return CMSAdapterComponent;\n};\n\n// @class Selector an obj with the form\n// { data-cms-attr1: \"placeholder1\", data-cms-attr2: \"placeholder2\" }\n// @class PlaceholderViews an obj with the form\n// { \"selector_key\": selector: {Selector}, views: Array<Backbone.View>}\n\n// @class CMSadapter.Component.CustomContentTypeStore\n// A dictionary by custom content type id of all CCTs register for the running application\n// @extend Dictionary<String, CustomContentType.Base.View>\n\n// @class CMSadapter.Component.CustomerContentTypeInstance.Store\n// A dictionary to store the generated CCT instances\n// @extend Dictionary<String, CMSadapter.Component.CustomerContentTypeInstance.Container>\n\n// @class CMSadapter.Component.addContent.RenderSettings\n// @property {Number} position Indicate where the CCT should be inserted\n"]}