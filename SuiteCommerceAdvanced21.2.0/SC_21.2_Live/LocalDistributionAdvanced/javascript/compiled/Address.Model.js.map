{"version":3,"sources":["Address.Model.ts"],"names":[],"mappings":"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","file":"Address.Model.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Address.Model\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\n\nimport Backbone = require('../../Utilities/JavaScript/backbone.custom');\n\n// @method isCompanyRequired\n// Check if company field is mandatory.\nfunction isCompanyRequired() {\n    return (\n        SC &&\n        SC.ENVIRONMENT &&\n        SC.ENVIRONMENT.siteSettings &&\n        SC.ENVIRONMENT.siteSettings.registration &&\n        SC.ENVIRONMENT.siteSettings.registration.companyfieldmandatory === 'T'\n    );\n}\n\n// @method isPhoneRequired\n// Check if phone field is mandatory.\nfunction isPhoneRequired() {\n    return (\n        SC &&\n        SC.CONFIGURATION &&\n        SC.CONFIGURATION.addresses &&\n        SC.CONFIGURATION.addresses.isPhoneMandatory\n    );\n}\n\nexport type AddressModel = any;\n// @class Address.Model @extend Backbone.Model\nexport const AddressModel: any = Backbone.Model.extend({\n    // @property {String} urlRoot\n    urlRoot: 'services/Address.Service.ss',\n\n    // @property validation\n    // Backbone.Validation attribute used for validating the form before submit.\n    validation: {\n        fullname: { required: true, msg: Utils.translate('Full Name is required') },\n        addr1: { required: true, msg: Utils.translate('Address is required') },\n        company: { required: isCompanyRequired(), msg: Utils.translate('Company is required') },\n        country: { required: true, msg: Utils.translate('Country is required') },\n        state: { fn: Utils.validateState },\n        city: { required: true, msg: Utils.translate('City is required') },\n        zip: { fn: Utils.validateZipCode },\n        phone: { fn: Utils.validatePhone, required: isPhoneRequired() }\n    },\n\n    // @method getInvalidAttributes\n    // Returns an array of localized attributes that are invalid for the current address.\n    getInvalidAttributes: function() {\n        // As this model is not always used inside a model's view, we need to check that the validation is attached\n        const attributes_to_validate = _.keys(this.validation);\n        let attribute_name;\n        const invalid_attributes = [];\n\n        this.get('isvalid') !== 'T' &&\n            this.isValid(true) &&\n            _.extend(this, Backbone.Validation.mixin);\n\n        _.each(\n            attributes_to_validate,\n            function(attribute) {\n                if (!this.isValid(attribute)) {\n                    attribute_name = null;\n                    switch (attribute) {\n                        case 'fullname':\n                            attribute_name = Utils.translate('Full Name');\n                            break;\n                        case 'addr1':\n                            attribute_name = Utils.translate('Address');\n                            break;\n                        case 'city':\n                            attribute_name = Utils.translate('City');\n                            break;\n                        case 'zip':\n                            attribute_name = Utils.translate('Zip Code');\n                            break;\n                        case 'country':\n                            attribute_name = Utils.translate('Country');\n                            break;\n                        case 'phone':\n                            attribute_name = Utils.translate('Phone Number');\n                            break;\n                        case 'state':\n                            attribute_name = Utils.translate('State');\n                            break;\n                    }\n\n                    if (attribute_name) {\n                        invalid_attributes.push(attribute_name);\n                    }\n                }\n            },\n            this\n        );\n\n        return invalid_attributes;\n    }\n});\n"]}