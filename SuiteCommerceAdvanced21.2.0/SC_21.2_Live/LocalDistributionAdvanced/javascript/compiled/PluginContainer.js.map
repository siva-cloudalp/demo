{"version":3,"sources":["PluginContainer.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IAOF,qGAAqG;IACrG,oGAAoG;IACpG,kGAAkG;IAClG,4GAA4G;IAC5G;QAGI;YAFA,YAAO,GAAU,EAAE,CAAC;YAGhB,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;QAED,qBAAqB;QACrB,oCAAU,GAAV;YACI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QACtB,CAAC;QAED,2EAA2E;QAC3E,8EAA8E;QAC9E,gFAAgF;QAChF,mCAAmC;QACnC,oCAAU,GAAV;YAAW,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YACd,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAS,CAAC;gBAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;QAED,sFAAsF;QACtF,gFAAgF;QAChF,oFAAoF;QACpF,mCAAmC;QACnC,+CAAqB,GAArB,UAAsB,OAAO;YAAE,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,6BAAO;;YAClC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAS,CAAC;gBAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;QAED,wCAAc,GAAd,UAAe,MAAM;YACjB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;QACvD,CAAC;QAED,mCAAmC;QACnC,yBAAyB;QACzB,iBAAiB;QACjB,iCAAO,GAAP,UAAQ,MAAM;YACV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC;gBAC7C,OAAO,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACP,CAAC;QAED,+CAA+C;QAC/C,gCAAgC;QAChC,iBAAiB;QACjB,mCAAS,GAAT,UAAU,MAAM;YACZ,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAS,CAAC;gBAC5C,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC;QACL,sBAAC;IAAD,CA3DA,AA2DC,IAAA;IAED,OAAS,eAAe,CAAC;;AAEzB,uGAAuG;AACvG,2HAA2H;AAC3H,+EAA+E;AAC/E,6FAA6F;AAC7F,0HAA0H","file":"PluginContainer.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"PluginContainer\"/>\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport * as _ from 'underscore';\n\n// @class PluginContainer The PluginContainer pattern is very similar to events listeners pattern but\n// designed to let listeners hook more appropiately into some processing. One or more Plugin objects\n// are installed into a PluginContainer and the owner of the container runs container.executeAll()\n// Registered plugins will be then executed by priority order and if any input is passed it will transformed\nclass PluginContainer {\n    plugins: any[] = [];\n\n    constructor() {\n        this.initialize();\n    }\n\n    // @method initialize\n    initialize() {\n        this.plugins = [];\n    }\n\n    // @method executeAll execute all registered plugins The first param is the\n    // input and the rest of the params will be passed to Plugin's execute method.\n    // @param {Any} input. Optional. The input that plugins will take and transform.\n    // @return {Any} the output, if any\n    executeAll(...args) {\n        _(this.plugins).each(function(p) {\n            args[0] = p.execute.apply(p, args) || args[0];\n        });\n\n        return args[0];\n    }\n\n    // @method executeAllWithContext execute all registered plugins The first param is the\n    // context and the rest of the params will be passed to Plugin's execute method.\n    // @param {Any} context. Optional. The context that plugins will take and transform.\n    // @return {Any} the output, if any\n    executeAllWithContext(context, ...args) {\n        _(this.plugins).each(function(p) {\n            args[0] = p.execute.apply(context || p, args) || args[0];\n        });\n\n        return args[0];\n    }\n\n    _getPluginName(plugin) {\n        return _(plugin).isString() ? plugin : plugin.name;\n    }\n\n    // @method install add a new plugin\n    // @param {Plugin} plugin\n    // @return {Void}\n    install(plugin) {\n        this.plugins.push(plugin);\n        this.plugins = _(this.plugins).sort(function(a, b) {\n            return a.priority < b.priority ? 1 : -1;\n        });\n    }\n\n    // @method uninstall Remove an installed plugin\n    // @param {Plugin|String} plugin\n    // @return {Void}\n    uninstall(plugin) {\n        const name = this._getPluginName(plugin);\n        this.plugins = _(this.plugins).reject(function(p) {\n            return p.name === name;\n        });\n    }\n}\n\nexport = PluginContainer;\n\n// @class Plugin installable in a PluginContainer. There is no concrete API, only an execute method and\n// It's up to the users to define de Plugin semantics @property {String} name used to identify the plugins in the container\n// @property {Number} priority lower numbers will execute before higher numbers\n// @method {Function} execute @param {Any} input @return {Any} pugins have the possibility of\n// @return {Any} will do some modifications to any passed object and will return these modifications - implementer freedom\n"]}