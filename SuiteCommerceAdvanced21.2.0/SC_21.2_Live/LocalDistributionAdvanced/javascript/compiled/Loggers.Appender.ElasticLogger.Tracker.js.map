{"version":3,"sources":["Loggers.Appender.ElasticLogger.Tracker.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAEF,+DAA+D;IAC/D;;;OAGG;IACH;QAqBI;;;WAGG;QACH,iBAAmB,UAAkB;YACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACxE,CAAC;QAED;;WAEG;QACW,kBAAU,GAAxB;YACI,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,CAAS;gBAC7E,sCAAsC;gBACtC,IAAM,CAAC,GAAW,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;gBAC3C,sCAAsC;gBACtC,IAAM,CAAC,GAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;gBAElD,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC;QAED;;WAEG;QACI,uBAAK,GAAZ;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAED;;WAEG;QACI,8BAAY,GAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;QAED;;WAEG;QACI,+BAAa,GAApB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;QAED;;;WAGG;QACI,0BAAQ,GAAf,UAAgB,SAAkB;YAC9B,IAAI,CAAC,KAAK,GAAG,SAAS,IAAI,WAAW,CAAC,MAAM,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACjF,OAAO,IAAI,CAAC;QAChB,CAAC;QAED;;;WAGG;QACI,6BAAW,GAAlB,UAAmB,OAAgB;YAC/B,IAAM,GAAG,GACG,OAAO,IAAY,WAAW,CAAC,MAAM,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACtF,IAAM,KAAK,GAAW,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC;YAE/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEnC,OAAO,IAAI,CAAC;QAChB,CAAC;QACL,cAAC;IAAD,CAxFA,AAwFC,IAAA;IAxFY,0BAAO","file":"Loggers.Appender.ElasticLogger.Tracker.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Loggers.Appender.ElasticLogger.Tracker\"/>\n/**\n * Represents a time span being logged.\n * Provides functionality for tracking manipulation.\n */\nexport class Tracker {\n    /**\n     * Unique local action identifier\n     */\n    private readonly actionId: string;\n\n    /**\n     * Name of the log (component area)\n     */\n    private readonly actionName: string;\n\n    /**\n     * Start date/time\n     */\n    private begin: number;\n\n    /**\n     * Total tracked time\n     */\n    private totalTime: number;\n\n    /**\n     * Tracker constructor\n     * @param actionName Name of the action to be tracked\n     */\n    public constructor(actionName: string) {\n        this.actionName = actionName;\n        this.actionId = Tracker.createGuid();\n        this.begin = performance.timing.navigationStart + performance.now();\n    }\n\n    /**\n     * Creates a version 4 uuid\n     */\n    public static createGuid(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c: string): string {\n            // eslint-disable-next-line no-bitwise\n            const r: number = (Math.random() * 16) | 0;\n            // eslint-disable-next-line no-bitwise\n            const v: number = c === 'x' ? r : (r & 0x3) | 0x8;\n\n            return v.toString(16);\n        });\n    }\n\n    /**\n     * Id getter\n     */\n    public getId(): string {\n        return this.actionId;\n    }\n\n    /**\n     * Total time getter\n     */\n    public getTotalTime(): number {\n        return this.totalTime;\n    }\n\n    /**\n     * Action name getter\n     */\n    public getActionName(): string {\n        return this.actionName;\n    }\n\n    /**\n     * Overrides the start time for the tracker. Useful for backdating.\n     * @param startTime Start time/date to be overriden.\n     */\n    public setBegin(startTime?: number): Tracker {\n        this.begin = startTime || performance.timing.navigationStart + performance.now();\n        return this;\n    }\n\n    /**\n     * Ends the tracking. If no endTime is provided, the present time will be used.\n     * @param endTime End time/date to be overriden.\n     */\n    public endTracking(endTime?: number): Tracker {\n        const end: number =\n            <number>endTime || <number>performance.timing.navigationStart + performance.now();\n        const delay: number = end - <number>this.begin;\n\n        this.totalTime = Math.round(delay);\n\n        return this;\n    }\n}\n"]}