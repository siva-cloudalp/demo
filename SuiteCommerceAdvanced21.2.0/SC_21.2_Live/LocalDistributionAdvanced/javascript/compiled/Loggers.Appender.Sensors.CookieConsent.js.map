{"version":3,"sources":["Loggers.Appender.Sensors.CookieConsent.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;;;IAoBF,SAAgB,aAAa;QACzB,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE;YAChB,OAAO,IAAI,CAAC;SACf;QACD,IAAM,aAAa,GAAkB,MAAM,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE;YACjF,OAAO,IAAI,CAAC;SACf;QACD,IAAM,aAAa,GAAG,mBAAmB,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACzE,IAAM,uBAAuB,GAAG;YAC5B,EAAE,EAAE,aAAa,CAAC,EAAE;YACpB,SAAS,EAAE,aAAa,CAAC,SAAS;YAClC,eAAe,EAAE,aAAa;SACjC,CAAC;QACF,OAAO,uBAAuB,CAAC;IACnC,CAAC;IAhBD,sCAgBC;IAED,SAAS,MAAM,CAAI,UAAkB;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,SAAS,mBAAmB,CAAC,aAA4B;QACrD,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,UAAA,MAAM;YACtC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC,CAAC;QACJ,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC","file":"Loggers.Appender.Sensors.CookieConsent.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Loggers.Appender.Sensors.CookieConsent\"/>\n\nimport Cookies = require('../../../Commons/Utilities/JavaScript/js.cookie');\n\ninterface CookieConsent {\n    id: string;\n    timestamp: number;\n    consentSettings: CookieOptions;\n}\n\nexport interface CookieConsentFormatted extends Omit<CookieConsent, 'consentSettings'> {\n    consentSettings: string;\n}\n\ninterface CookieOptions {\n    (key: string): string;\n}\n\nexport function cookieConsent(): CookieConsentFormatted {\n    const consentCookie = Cookies.get('trackingConsentCookie');\n    if (!consentCookie) {\n        return null;\n    }\n    const decodedCookie: CookieConsent = decode(consentCookie);\n    if (!decodedCookie.id || !decodedCookie.timestamp || !decodedCookie.consentSettings) {\n        return null;\n    }\n    const cookieoptions = formatCookieOptions(decodedCookie.consentSettings);\n    const shopperAnalyticsConsent = {\n        id: decodedCookie.id,\n        timestamp: decodedCookie.timestamp,\n        consentSettings: cookieoptions\n    };\n    return shopperAnalyticsConsent;\n}\n\nfunction decode<T>(cookieData: string): T {\n    return JSON.parse(atob(cookieData));\n}\n\nfunction formatCookieOptions(cookieOptions: CookieOptions): string {\n    let options = [];\n    Object.keys(cookieOptions).forEach((option => {\n        options.push(option + '|' + (cookieOptions[option] ? 'T' : 'F'));\n    }));\n    return options.join(',');\n}\n"]}