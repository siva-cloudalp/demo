{"version":3,"sources":["Quote.List.View.ts"],"names":[],"mappings":"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","file":"Quote.List.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Quote.List.View\"/>\n/// <reference path=\"../../Utilities/JavaScript/GlobalDeclarations.d.ts\" />\n/// <reference path=\"../../Utilities/JavaScript/UnderscoreExtended.d.ts\" />\n\nimport './Quote.ListExpirationDate.View';\nimport * as _ from 'underscore';\nimport * as quote_list_tpl from 'quote_list.tpl';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\nimport { ListHeaderView } from '../../ListHeader/JavaScript/ListHeader.View';\nimport { RecordViewsView } from '../../Utilities/JavaScript/RecordViewsView';\n\nimport TransactionListView = require('../../Transaction/JavaScript/Transaction.List.View');\nimport QuoteCollection = require('./Quote.Collection');\nimport Backbone = require('../../Utilities/JavaScript/backbone.custom');\nimport BackboneCollectionView = require('../../Backbone.CollectionView/JavaScript/Backbone.CollectionView');\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\n\n// @class Quote.List.View @extends Backbone.View\nexport = TransactionListView.extend({\n    // @property {Function} template\n    template: quote_list_tpl,\n\n    // @property {String} className\n    className: 'QuoteListView',\n\n    // @property {String} title\n    title: Utils.translate('Quotes'),\n\n    // @property {String} page_header\n    page_header: Utils.translate('Quotes'),\n\n    // @property {Object} attributes\n    attributes: {\n        id: 'QuotesHistory',\n        class: 'QuoteListView'\n    },\n\n    // @method initialize\n    // @param {application:AplpicationSkeleton} options\n    // @return {Void}\n    initialize: function(options): void {\n        this.application = options.application;\n        this.collection = new QuoteCollection();\n\n        this.listenCollection();\n        this.setupListHeader();\n        this.collection.on('reset', this.showContent, this);\n    },\n\n    // @method listenCollection Attaches to the current collection events request and reset to indicate if it is loading data or not\n    // @return {Void}\n    listenCollection: function(): void {\n        this.setLoading(true);\n\n        this.collection.on({\n            request: _.bind(this.setLoading, this, true),\n            reset: _.bind(this.setLoading, this, false)\n        });\n    },\n\n    // @method setupListHeader Initialize the list header component\n    // @return {Void}\n    setupListHeader: function(): void {\n        // manges sorting and filtering of the collection\n        // remove columns that are not in configuration\n        const config: {\n            enableQuote: boolean;\n            quote: { id: string; label: string }[];\n        } = Configuration.get().transactionListColumns;\n\n        if (config.enableQuote) {\n            const configOptions: string[] = _.pluck(config.quote, 'id');\n            this.sortOptions = _.filter(\n                this.sortOptions,\n                (column: { value: string; name: string; selected?: boolean }): boolean =>\n                    configOptions.indexOf(column.value) >= 0 || column.selected\n            );\n        }\n\n        this.listHeader = new ListHeaderView({\n            view: this,\n            application: this.application,\n            collection: this.collection,\n            filters: this.filterOptions,\n            sorts: this.sortOptions,\n            allowEmptyBoundaries: true\n        });\n    },\n\n    // @method setLoading Set the loading status of the current view\n    // @param {Boolean} is_loading\n    // @return {Void}\n    setLoading: function(is_loading): void {\n        // @property {Boolean} isLoading\n        this.isLoading = is_loading;\n    },\n\n    // @property {Array<ListHeader.View.FilterOption>} filterOptions\n    filterOptions: [\n        { value: 'ALL', name: Utils.translate('Show all statuses'), selected: true },\n        {\n            value: '14',\n            name: Utils.translate('Closed Lost')\n        },\n        {\n            value: '8',\n            name: Utils.translate('In Discussion')\n        },\n        {\n            value: '9',\n            name: Utils.translate('Identified Decision Makers')\n        },\n        {\n            value: '10',\n            name: Utils.translate('Proposal')\n        },\n        {\n            value: '11',\n            name: Utils.translate('In Negotiation')\n        },\n        {\n            value: '12',\n            name: Utils.translate('Purchasing')\n        }\n    ],\n\n    // @property {Array<ListHeader.View.SortOption>} sortOptions\n    sortOptions: [\n        {\n            value: 'tranid',\n            name: Utils.translate('by Number'),\n            selected: true\n        },\n        {\n            value: 'trandate',\n            name: Utils.translate('by Request date')\n        },\n        {\n            value: 'duedate',\n            name: Utils.translate('by Expiration date')\n        },\n        {\n            value: 'total',\n            name: Utils.translate('by Amount')\n        }\n    ],\n\n    // @method getSelectedMenu Indicates what my account menu is selected when this view is being rendered\n    // @return {String}\n    getSelectedMenu: function() {\n        return 'quotes';\n    },\n\n    // @method getBreadcrumbPages\n    // @return {BreadcrumbPage}\n    getBreadcrumbPages: function() {\n        return {\n            text: this.title,\n            href: '/quotes'\n        };\n    },\n\n    // @property {ChildViews} childViews\n    childViews: {\n        'Quote.List.Items': function() {\n            return this._resultsView;\n        },\n        'List.Header': function() {\n            return this.listHeader;\n        }\n    },\n\n    _buildResultsView: function() {\n        const self = this;\n        const records_collection = new Backbone.Collection(\n            this.collection.map(function(quote) {\n                const quote_internalid = quote.get('internalid');\n                let selectedColumns = [];\n\n                if (!Configuration.get().transactionListColumns.enableQuote) {\n                    selectedColumns.push({\n                        label: 'Request date:',\n                        type: 'request-date',\n                        name: 'request-date',\n                        id: 'trandate'\n                    });\n                    selectedColumns.push({\n                        label: 'Amount:',\n                        type: 'currency',\n                        name: 'amount-date',\n                        id: 'total_formatted',\n                        visible:\n                            quote.get('status').internalid !== 'open' ||\n                            quote.get('entitystatus').name !== '',\n                        message: Utils.translate('Price to be determined')\n                    });\n                    selectedColumns.push({\n                        label: 'Expiration date:',\n                        type: 'expiration-date',\n                        name: 'expiration-date',\n                        compositeKey: 'QuoteListExpirationDateView',\n                        composite: 'Quote.ListExpirationDate.View'\n                    });\n                    selectedColumns.push({\n                        label: 'Status:',\n                        type: 'status',\n                        name: 'status',\n                        id: 'status'\n                    });\n                } else {\n                    selectedColumns = Configuration.get().transactionListColumns.quote;\n                }\n\n                return new Backbone.Model({\n                    touchpoint: 'customercenter',\n                    title: Utils.translate('Quote #$(0)', quote.get('tranid')),\n                    detailsURL: `#/quotes/${quote_internalid}`,\n                    id: quote_internalid,\n                    internalid: quote_internalid,\n                    columns: self._buildColumns(selectedColumns, quote)\n                });\n            })\n        );\n\n        return new BackboneCollectionView({\n            childView: RecordViewsView,\n            collection: records_collection,\n            viewsPerRow: 1\n        });\n    },\n\n    // @method destroy Override default method to  from collection events\n    // @return {Void}\n    destroy: function() {\n        this.collection.off('request reset');\n\n        (<any>BackboneView.prototype).destroy.apply(this, arguments);\n    },\n\n    // @method getContext\n    // @return {Quote.List.View.Context}\n    getContext: function() {\n        this._resultsView = this._buildResultsView();\n        let columns = [];\n        if (this._resultsView.collection.length > 0) {\n            columns = this._resultsView.collection.at(0).get('columns');\n        }\n        // @class Quote.List.View.Context\n        return {\n            // @property {String} pageHeader\n            pageHeader: this.page_header,\n            // @property {Array} collection\n            collection: this.collection,\n            // @property {Boolean} collectionLength\n            collectionLength: this.collection.length,\n            // @property {Boolean} isLoading\n            isLoading: this.isLoading,\n            // @property {Boolean} showBackToAccount\n            showBackToAccount: Configuration.get('siteSettings.sitetype') === 'STANDARD',\n            // @property {Array<{}>} columns\n            columns: columns\n        };\n        // @class Quote.List.View\n    }\n});\n"]}