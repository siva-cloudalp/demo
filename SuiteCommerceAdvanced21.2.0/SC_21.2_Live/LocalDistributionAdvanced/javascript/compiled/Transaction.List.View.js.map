{"version":3,"sources":["Transaction.List.View.ts"],"names":[],"mappings":"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","file":"Transaction.List.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Transaction.List.View\"/>\n\nimport * as _ from 'underscore';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport BackboneView = require('../../BackboneExtras/JavaScript/Backbone.View');\nimport Backbone = require('../../Utilities/JavaScript/backbone.custom');\n\nconst TransactionListView: any = BackboneView.extend({\n    _buildColumns: function(selectedColumns, transaction) {\n        function createColumn(transaction, column) {\n            switch (column.id) {\n                case 'origin':\n                    return {\n                        label: Utils.translate(column.label),\n                        type: 'origin',\n                        name: 'origin',\n                        value: (<any>_.findWhere(\n                            Configuration.get('transactionRecordOriginMapping'),\n                            {\n                                origin: transaction.get('origin')\n                            }\n                        )).name\n                    };\n                case 'status':\n                    var value;\n                    if (!transaction.get('status')) {\n                        value = transaction.get('entitystatus').name;\n                    } else {\n                        value = transaction.get('status').name;\n                    }\n                    return {\n                        label: Utils.translate(column.label),\n                        type: 'status',\n                        name: 'status',\n                        value: value\n                    };\n                case 'amount':\n                    return {\n                        label: Utils.translate(column.label),\n                        type: 'currency',\n                        name: 'amount',\n                        value: transaction.get('amount_formatted')\n                    };\n                case 'entitystatus':\n                    return {\n                        label: Utils.translate(column.label),\n                        type: 'status',\n                        name: 'entitystatus',\n                        value: transaction.get('entitystatus').name\n                    };\n                default:\n                    var init: any = {\n                        label: Utils.translate(column.label),\n                        value: transaction.get(column.id)\n                    };\n\n                    if (column.type) {\n                        init.type = column.type;\n                    } else {\n                        init.type = 'custom';\n                    }\n\n                    if (column.name) {\n                        init.name = column.name;\n                    } else {\n                        init.name = column.id;\n                    }\n\n                    if (column.visible === false) {\n                        init.value = column.message;\n                    }\n\n                    return init;\n            }\n        }\n        const initializedColumns = [];\n\n        _.each(selectedColumns, function(column: any) {\n            if (!column.composite) {\n                initializedColumns.push(createColumn(transaction, column));\n            } else {\n                const composite = Utils.requireModules(column.composite);\n                let model;\n\n                if (column.fields) {\n                    const modelFields = {};\n                    _.each(column.fields, function(field: any) {\n                        const transactionField =\n                            transaction.get(field.toLowerCase()) || transaction.get(field); // Some attributes can be returned from the services in camelcase format\n                        modelFields[field] = transactionField;\n                    });\n                    model = new Backbone.Model(modelFields);\n                } else {\n                    model = transaction;\n                }\n\n                const initialized = {\n                    label: _(column.label),\n                    type: column.type,\n                    name: column.id,\n                    compositeKey: column.compositeKey,\n                    composite: new composite({ model: model })\n                };\n\n                initializedColumns.push(initialized);\n            }\n        });\n\n        return initializedColumns;\n    }\n});\n\nexport = TransactionListView;\n"]}