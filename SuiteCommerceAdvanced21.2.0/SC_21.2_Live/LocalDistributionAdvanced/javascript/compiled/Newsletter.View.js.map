{"version":3,"sources":["Newsletter.View.ts"],"names":[],"mappings":"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","file":"Newsletter.View.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Newsletter.View\"/>\n// @Typescript-full\nimport * as newsletter_tpl from 'newsletter.tpl';\nimport { Newsletter, NewsletterModel } from './Newsletter.Model';\nimport {\n    FormFieldsError,\n    FormFieldValue,\n    FormView\n} from '../../../Commons/Core/JavaScript/FormView';\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\nimport { ChildViews, EventsHash } from '../../../Commons/Core/JavaScript/View';\nimport {\n    InferModelEntity,\n    InferModelServiceContract\n} from '../../../Commons/Core/JavaScript/backbone/backbone';\nimport { Errors } from '../../../Commons/Core/JavaScript/Error';\n\nimport { GlobalViewsMessageView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Message.View';\n\ninterface NewsletterViewState {\n    code: string; // The answer string code\n    message: string; // The text we need to show as feedback\n    messageType: string; // The kind of message we need to display as feedback (error, warning or success)\n}\ninterface NewsletterViewContext {\n    isFeedback: boolean;\n    model: NewsletterModel;\n}\nexport class NewsletterView extends FormView<NewsletterModel, NewsletterViewContext> {\n    protected template = newsletter_tpl;\n\n    protected getEvents(): EventsHash | null {\n        return {\n            'submit form': 'saveForm',\n            'blur [name=\"email\"]': 'onFormFieldChange'\n        };\n    }\n\n    // @property {Object} feedback Keeps the text and kind of message we need to show as feedback\n    private feedback = {\n        OK: {\n            type: 'success',\n            message: Utils.translate('Thank you! Welcome to our newsletter')\n        },\n        ERR_USER_STATUS_ALREADY_SUBSCRIBED: {\n            type: 'warning',\n            message: Utils.translate('Sorry, the specified email is already subscribed.')\n        },\n        ERR_USER_STATUS_DISABLED: {\n            type: 'error',\n            message: Utils.translate('Sorry, the specified email cannot be subscribed.')\n        },\n        ERROR: {\n            type: 'error',\n            message: Utils.translate('Sorry, subscription cannot be done. Try again later.')\n        }\n    };\n\n    private state: NewsletterViewState;\n\n    public constructor() {\n        super(new NewsletterModel());\n        this.state = {\n            code: '',\n            message: '',\n            messageType: ''\n        };\n    }\n\n    protected saveForm(\n        e: JQuery.TriggeredEvent\n    ): JQuery.jqXHR<InferModelServiceContract<NewsletterModel>> | false {\n        e.preventDefault();\n\n        const promise = super.saveForm(e);\n\n        if (promise) {\n            promise\n                .fail((jqXhr: JQuery.jqXHR<InferModelServiceContract<NewsletterModel>>) => {\n                    (<any>jqXhr).preventDefault = true;\n                    const errorCode =\n                        jqXhr &&\n                        jqXhr.responseJSON &&\n                        jqXhr.responseJSON.errorCode &&\n                        this.feedback[jqXhr.responseJSON.errorCode]\n                            ? jqXhr.responseJSON.errorCode\n                            : 'ERROR';\n\n                    this.state.code = errorCode;\n                    this.state.message = this.feedback[errorCode].message;\n                    this.state.messageType = this.feedback[errorCode].type;\n                })\n                .done(() => {\n                    this.state.code = this.formModel.get('code');\n                    this.state.message = this.feedback[this.formModel.get('code')].message;\n                    this.state.messageType = this.feedback[this.formModel.get('code')].type;\n\n                    this.formModel.set('email', '');\n                })\n                .always(() => {\n                    this.render();\n                });\n        }\n        return promise;\n    }\n\n    protected getChildViews(): ChildViews {\n        return {\n            GlobalMessageFeedback: () => {\n                return new GlobalViewsMessageView({\n                    message: this.state.message,\n                    type: this.state.messageType,\n                    closable: true\n                });\n            }\n        };\n    }\n\n    protected getFormValues(\n        $savingForm: JQuery<HTMLElement>\n    ):\n        | Partial<InferModelEntity<NewsletterModel>>\n        | FormFieldsError<InferModelEntity<NewsletterModel>> {\n        const formValues = $savingForm.serializeObject();\n        if ('email' in formValues && typeof formValues.email === 'string') {\n            return {\n                email: formValues.email\n            };\n        }\n        return {\n            errorCode: Errors.FormValidation,\n            errors: {\n                email: Utils.translate('Please provide a valid email')\n            }\n        };\n    }\n\n    protected getFormFieldValue(changedInput: JQuery<HTMLElement>): FormFieldValue<Newsletter> {\n        const newVal = changedInput.val();\n        const fieldName = changedInput.attr('name');\n        if (fieldName === 'email' && typeof newVal === 'string') {\n            return {\n                name: fieldName,\n                value: newVal\n            };\n        }\n        return {\n            name: fieldName || '',\n            error: Utils.translate('Please provide a valid email')\n        };\n    }\n\n    public getContext(): NewsletterViewContext {\n        return {\n            isFeedback: !!this.state.code,\n            model: this.formModel\n        };\n    }\n}\n"]}