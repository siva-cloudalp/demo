{"version":3,"sources":["OrderHistory.Collection.ts"],"names":[],"mappings":"AAAA;;;;;EAKE;;;IASF,gEAAgE;IAChE,IAAM,sBAAsB,GAAQ,qBAAqB,CAAC,MAAM,CAAC;QAC7D,uCAAuC;QACvC,KAAK,EAAE,iBAAiB;QACxB,kGAAkG;QAClG,YAAY,EAAE,KAAK;QACnB,yBAAyB;QACzB,GAAG,EAAE,KAAK,CAAC,cAAc,CAAC,kCAAkC,CAAC;QAE7D,UAAU,EAAE,UAAS,MAAM,EAAE,OAAO;YAChC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAElE,IAAI,CAAC,aAAa,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QACpD,CAAC;QAED,mGAAmG;QACnG,mEAAmE;QACnE,qEAAqE;QACrE,KAAK,EAAE,UAAS,QAAQ;YACpB,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YACpD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;YAE9C,OAAO,QAAQ,CAAC,OAAO,CAAC;QAC5B,CAAC;QAED,2FAA2F;QAC3F,qCAAqC;QACrC,iBAAiB;QACjB,MAAM,EAAE,UAAS,OAAO;YACpB,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YAClC,IAAM,IAAI,GAAG;gBACT,MAAM,EAAE,IAAI,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;gBACtE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;gBACxB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,EAAE,EAAE,KAAK,CAAC,EAAE;gBACZ,IAAI,EAAE,OAAO,CAAC,IAAI;aACrB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC;gBACP,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC7B,CAAC,CAAC;QACP,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,sBAAsB,CAAC","file":"OrderHistory.Collection.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"OrderHistory.Collection\"/>\n\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\n\nimport TransactionCollection = require('../../../Commons/Transaction/JavaScript/Transaction.Collection');\nimport OrderHistoryModel = require('./OrderHistory.Model');\n\n// @class OrderHistory.Collection @extend Transaction.Collection\nconst OrderHistoryCollection: any = TransactionCollection.extend({\n    // @property {OrderHistory.Model} model\n    model: OrderHistoryModel,\n    // @property {Boolean} cacheSupport enable or disable the support for cache (Backbone.CachedModel)\n    cacheSupport: false,\n    // @property {String} url\n    url: Utils.getAbsoluteUrl('services/OrderHistory.Service.ss'),\n\n    initialize: function(models, options) {\n        TransactionCollection.prototype.initialize.apply(this, arguments);\n\n        this.customFilters = options && options.filters;\n    },\n\n    // @method parse Handle the response from the back-end to properly manage total records found value\n    // @param {Object} response JSON Response from the back-end service\n    // @return {Array<Object>} List of returned records from the back-end\n    parse: function(response) {\n        this.totalRecordsFound = response.totalRecordsFound;\n        this.recordsPerPage = response.recordsPerPage;\n\n        return response.records;\n    },\n\n    // @method update Method called by ListHeader.View when applying new filters and constrains\n    // @param {Collection.Filter} options\n    // @return {Void}\n    update: function(options) {\n        const range = options.range || {};\n        const data = {\n            filter: this.customFilters || (options.filter && options.filter.value),\n            sort: options.sort.value,\n            order: options.order,\n            from: range.from,\n            to: range.to,\n            page: options.page\n        };\n\n        this.fetch({\n            data: data,\n            reset: true,\n            killerId: options.killerId\n        });\n    }\n});\n\nexport = OrderHistoryCollection;\n"]}