/** Used at the top-level node to indicate the context for the JSON-LD objects used. The context provided in this type is compatible with the keys and URLs in the rest of this generated file. */
export declare type WithContext<T extends Thing> = T & {
    "@context": "https://schema.org";
};
/** Boolean: True or False. */
export declare type Boolean = true | false | "https://schema.org/True" | "https://schema.org/False";
export declare const Boolean: {
    True: "https://schema.org/True";
    False: "https://schema.org/False";
};
/** A date value in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
export declare type Date = string;
/** A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601). */
export declare type DateTime = string;
/** Data type: Number. */
export declare type Number = number;
/** Data type: Text. */
export declare type Text = string;
/** DateTime represented in string, e.g. 2017-01-04T17:10:00-05:00. */
export declare type Time = string;
/** The basic data types such as Integers, Strings, etc. */
export declare type DataType = Text | Number | Time | Date | DateTime | Boolean;
declare type _3DModelBase = CreativeWorkBase & {
    /** Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality. */
    "isResizable"?: Boolean | readonly Boolean[];
};
/** A 3D model represents some kind of 3D content, which may have {@link http://schema.org/encoding encoding}s in one or more {@link http://schema.org/MediaObject MediaObject}s. Many 3D formats are available (e.g. see {@link https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats Wikipedia}); specific encoding formats can be represented using the {@link http://schema.org/encodingFormat encodingFormat} property applied to the relevant {@link http://schema.org/MediaObject MediaObject}. For thecase of a single file published after Zip compression, the convention of appending '+zip' to the {@link http://schema.org/encodingFormat encodingFormat} can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using {@link http://schema.org/3DModel 3DModel}. */
export declare type _3DModel = {
    "@type": "3DModel";
} & _3DModelBase;
declare type AboutPageBase = WebPageBase;
/** Web page type: About page. */
export declare type AboutPage = {
    "@type": "AboutPage";
} & AboutPageBase;
declare type AcceptActionBase = AllocateActionBase;
/**
 * The act of committing to/adopting an object.
 *
 * Related actions:
 *
 * - {@link http://schema.org/RejectAction RejectAction}: The antonym of AcceptAction.
 */
export declare type AcceptAction = {
    "@type": "AcceptAction";
} & AcceptActionBase;
declare type AccommodationBase = PlaceBase & {
    /** Category of an {@link http://schema.org/Accommodation Accommodation}, following real estate conventions e.g. RESO (see {@link https://ddwiki.reso.org/display/DDW17/PropertySubType+Field PropertySubType}, and {@link https://ddwiki.reso.org/display/DDW17/PropertyType+Field PropertyType} fields  for suggested values). */
    "accommodationCategory"?: Text | readonly Text[];
    /** A floorplan of some {@link http://schema.org/Accommodation Accommodation}. */
    "accommodationFloorPlan"?: FloorPlan | readonly FloorPlan[];
    /** An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs. */
    "amenityFeature"?: LocationFeatureSpecification | readonly LocationFeatureSpecification[];
    /** The floor level for an {@link http://schema.org/Accommodation Accommodation} in a multi-storey building. Since counting  systems {@link https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations vary internationally}, the local system should be used where possible. */
    "floorLevel"?: Text | readonly Text[];
    /** The size of the accommodation, e.g. in square meter or squarefoot.Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard */
    "floorSize"?: QuantitativeValue | readonly QuantitativeValue[];
    /** Length of the lease for some {@link http://schema.org/Accommodation Accommodation}, either particular to some {@link http://schema.org/Offer Offer} or in some cases intrinsic to the property. */
    "leaseLength"?: (Duration | QuantitativeValue) | readonly (Duration | QuantitativeValue)[];
    /** The total integer number of bathrooms in a some {@link http://schema.org/Accommodation Accommodation}, following real estate conventions as {@link https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field documented in RESO}: "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also {@link http://schema.org/numberOfRooms numberOfRooms}. */
    "numberOfBathroomsTotal"?: Integer | readonly Integer[];
    /** Number of full bathrooms - The total number of full and \u00BE bathrooms in an {@link http://schema.org/Accommodation Accommodation}. This corresponds to the {@link https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field BathroomsFull field in RESO}. */
    "numberOfFullBathrooms"?: Number | readonly Number[];
    /** Number of partial bathrooms - The total number of half and \u00BC bathrooms in an {@link http://schema.org/Accommodation Accommodation}. This corresponds to the {@link https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field BathroomsPartial field in RESO}. */
    "numberOfPartialBathrooms"?: Number | readonly Number[];
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** Indications regarding the permitted usage of the accommodation. */
    "permittedUsage"?: Text | readonly Text[];
    /** Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value. */
    "petsAllowed"?: (Boolean | Text) | readonly (Boolean | Text)[];
    /** The year an {@link http://schema.org/Accommodation Accommodation} was constructed. This corresponds to the {@link https://ddwiki.reso.org/display/DDW17/YearBuilt+Field YearBuilt field in RESO}. */
    "yearBuilt"?: Number | readonly Number[];
};
/**
 * An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.For more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Accommodation = ({
    "@type": "Accommodation";
} & AccommodationBase) | (Apartment | CampingPitch | House | Room | Suite | string);
declare type AccountingServiceBase = FinancialServiceBase;
/**
 * Accountancy business.
 *
 * As a {@link http://schema.org/LocalBusiness LocalBusiness} it can be described as a {@link http://schema.org/provider provider} of one or more {@link http://schema.org/Service Service}(s).
 */
export declare type AccountingService = ({
    "@type": "AccountingService";
} & AccountingServiceBase) | string;
declare type AchieveActionBase = ActionBase;
/** The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process. */
export declare type AchieveAction = ({
    "@type": "AchieveAction";
} & AchieveActionBase) | (LoseAction | TieAction | WinAction);
declare type ActionBase = ThingBase & {
    /** Indicates the current disposition of the Action. */
    "actionStatus"?: ActionStatusType | readonly ActionStatusType[];
    /** The direct performer or driver of the action (animate or inanimate). e.g. _John_ wrote a book. */
    "agent"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to _December_. For media, including audio and video, it's the time offset of the end of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "endTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** For failed actions, more information on the cause of the failure. */
    "error"?: Thing | readonly Thing[];
    /** The object that helped the agent perform the action. e.g. John wrote a book with _a pen_. */
    "instrument"?: Thing | readonly Thing[];
    /** The location of for example where the event is happening, an organization is located, or where an action takes place. */
    "location"?: (Place | PostalAddress | Text) | readonly (Place | PostalAddress | Text)[];
    /** The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read _a book_. */
    "object"?: Thing | readonly Thing[];
    /** Other co-agents that participated in the action indirectly. e.g. John wrote a book with _Steve_. */
    "participant"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The result produced in the action. e.g. John wrote _a book_. */
    "result"?: Thing | readonly Thing[];
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from _January_ to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "startTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** Indicates a target EntryPoint for an Action. */
    "target"?: EntryPoint | readonly EntryPoint[];
};
/**
 * An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.
 *
 * See also {@link http://blog.schema.org/2014/04/announcing-schemaorg-actions.html blog post} and {@link http://schema.org/docs/actions.html Actions overview document}.
 */
export declare type Action = ({
    "@type": "Action";
} & ActionBase) | (AchieveAction | AssessAction | ConsumeAction | ControlAction | CreateAction | FindAction | InteractAction | MoveAction | OrganizeAction | PlayAction | SearchAction | TradeAction | TransferAction | UpdateAction);
declare type ActionAccessSpecificationBase = IntangibleBase & {
    /** The end of the availability of the product or service included in the offer. */
    "availabilityEnds"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** The beginning of the availability of the product or service included in the offer. */
    "availabilityStarts"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.
     *
     * See also {@link http://schema.org/ineligibleRegion ineligibleRegion}.
     */
    "eligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it. */
    "expectsAcceptanceOf"?: Offer | readonly Offer[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.
     *
     * See also {@link http://schema.org/eligibleRegion eligibleRegion}.
     */
    "ineligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** Indicates if use of the media require a subscription  (either paid or free). Allowed values are `true` or `false` (note that an earlier version had 'yes', 'no'). */
    "requiresSubscription"?: (Boolean | MediaSubscription) | readonly (Boolean | MediaSubscription)[];
};
/** A set of requirements that a must be fulfilled in order to perform an Action. */
export declare type ActionAccessSpecification = {
    "@type": "ActionAccessSpecification";
} & ActionAccessSpecificationBase;
declare type ActionStatusTypeBase = EnumerationBase;
/** The status of an Action. */
export declare type ActionStatusType = "http://schema.org/ActiveActionStatus" | "http://schema.org/CompletedActionStatus" | "http://schema.org/FailedActionStatus" | "http://schema.org/PotentialActionStatus" | ({
    "@type": "ActionStatusType";
} & ActionStatusTypeBase);
export declare const ActionStatusType: {
    /** An in-progress action (e.g, while watching the movie, or driving to a location). */
    ActiveActionStatus: "http://schema.org/ActiveActionStatus";
    /** An action that has already taken place. */
    CompletedActionStatus: "http://schema.org/CompletedActionStatus";
    /** An action that failed to complete. The action's error property and the HTTP return code contain more information about the failure. */
    FailedActionStatus: "http://schema.org/FailedActionStatus";
    /** A description of an action that is supported. */
    PotentialActionStatus: "http://schema.org/PotentialActionStatus";
};
declare type ActivateActionBase = ControlActionBase;
/** The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight). */
export declare type ActivateAction = {
    "@type": "ActivateAction";
} & ActivateActionBase;
declare type AddActionBase = UpdateActionBase;
/** The act of editing by adding an object to a collection. */
export declare type AddAction = ({
    "@type": "AddAction";
} & AddActionBase) | InsertAction;
declare type AdministrativeAreaBase = PlaceBase;
/** A geographical region, typically under the jurisdiction of a particular government. */
export declare type AdministrativeArea = ({
    "@type": "AdministrativeArea";
} & AdministrativeAreaBase) | (City | Country | State | string);
declare type AdultEntertainmentBase = EntertainmentBusinessBase;
/** An adult entertainment establishment. */
export declare type AdultEntertainment = ({
    "@type": "AdultEntertainment";
} & AdultEntertainmentBase) | string;
declare type AdvertiserContentArticleBase = ArticleBase;
/** An {@link http://schema.org/Article Article} that an external entity has paid to place or to produce to its specifications. Includes {@link https://en.wikipedia.org/wiki/Advertorial advertorials}, sponsored content, native advertising and other paid content. */
export declare type AdvertiserContentArticle = {
    "@type": "AdvertiserContentArticle";
} & AdvertiserContentArticleBase;
declare type AggregateOfferBase = OfferBase & {
    /**
     * The highest price of all offers available.
     *
     * Usage guidelines:
     *
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "highPrice"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * The lowest price of all offers available.
     *
     * Usage guidelines:
     *
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "lowPrice"?: (Number | Text) | readonly (Number | Text)[];
    /** The number of offers for the product. */
    "offerCount"?: Integer | readonly Integer[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
};
/**
 * When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.
 *
 * Note: AggregateOffers are normally expected to associate multiple offers that all share the same defined {@link http://schema.org/businessFunction businessFunction} value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
 */
export declare type AggregateOffer = {
    "@type": "AggregateOffer";
} & AggregateOfferBase;
declare type AggregateRatingBase = RatingBase & {
    /** The item that is being reviewed/rated. */
    "itemReviewed"?: Thing | readonly Thing[];
    /** The count of total number of ratings. */
    "ratingCount"?: Integer | readonly Integer[];
    /** The count of total number of reviews. */
    "reviewCount"?: Integer | readonly Integer[];
};
/** The average rating based on multiple ratings or reviews. */
export declare type AggregateRating = ({
    "@type": "AggregateRating";
} & AggregateRatingBase) | EmployerAggregateRating;
declare type AgreeActionBase = ReactActionBase;
/** The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants. */
export declare type AgreeAction = {
    "@type": "AgreeAction";
} & AgreeActionBase;
declare type AirlineBase = OrganizationBase & {
    /** The type of boarding policy used by the airline (e.g. zone-based or group-based). */
    "boardingPolicy"?: BoardingPolicyType | readonly BoardingPolicyType[];
    /** IATA identifier for an airline or airport. */
    "iataCode"?: Text | readonly Text[];
};
/** An organization that provides flights for passengers. */
export declare type Airline = ({
    "@type": "Airline";
} & AirlineBase) | string;
declare type AirportBase = CivicStructureBase & {
    /** IATA identifier for an airline or airport. */
    "iataCode"?: Text | readonly Text[];
    /** ICAO identifier for an airport. */
    "icaoCode"?: Text | readonly Text[];
};
/** An airport. */
export declare type Airport = ({
    "@type": "Airport";
} & AirportBase) | string;
declare type AlignmentObjectBase = IntangibleBase & {
    /** A category of alignment between the learning resource and the framework node. Recommended values include: 'assesses', 'teaches', 'requires', 'textComplexity', 'readingLevel', 'educationalSubject', and 'educationalLevel'. */
    "alignmentType"?: Text | readonly Text[];
    /** The framework to which the resource being described is aligned. */
    "educationalFramework"?: Text | readonly Text[];
    /** The description of a node in an established educational framework. */
    "targetDescription"?: Text | readonly Text[];
    /** The name of a node in an established educational framework. */
    "targetName"?: Text | readonly Text[];
    /** The URL of a node in an established educational framework. */
    "targetUrl"?: URL | readonly URL[];
};
/** An intangible item that describes an alignment between a learning resource and a node in an educational framework. */
export declare type AlignmentObject = {
    "@type": "AlignmentObject";
} & AlignmentObjectBase;
declare type AllocateActionBase = OrganizeActionBase & {
    /** A goal towards an action is taken. Can be concrete or abstract. */
    "purpose"?: (MedicalDevicePurpose | Thing) | readonly (MedicalDevicePurpose | Thing)[];
};
/** The act of organizing tasks/objects/events by associating resources to it. */
export declare type AllocateAction = ({
    "@type": "AllocateAction";
} & AllocateActionBase) | (AcceptAction | AssignAction | AuthorizeAction | RejectAction);
declare type AMRadioChannelBase = RadioChannelBase;
/** A radio channel that uses AM. */
export declare type AMRadioChannel = {
    "@type": "AMRadioChannel";
} & AMRadioChannelBase;
declare type AmusementParkBase = EntertainmentBusinessBase;
/** An amusement park. */
export declare type AmusementPark = ({
    "@type": "AmusementPark";
} & AmusementParkBase) | string;
declare type AnalysisNewsArticleBase = NewsArticleBase;
/** An AnalysisNewsArticle is a {@link http://schema.org/NewsArticle NewsArticle} that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions. */
export declare type AnalysisNewsArticle = {
    "@type": "AnalysisNewsArticle";
} & AnalysisNewsArticleBase;
declare type AnatomicalStructureBase = MedicalEntityBase & {
    /** If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system. */
    "associatedPathophysiology"?: Text | readonly Text[];
    /** Location in the body of the anatomical structure. */
    "bodyLocation"?: Text | readonly Text[];
    /** Other anatomical structures to which this structure is connected. */
    "connectedTo"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures. */
    "diagram"?: ImageObject | readonly ImageObject[];
    /** Function of the anatomical structure. */
    "function"?: Text | readonly Text[];
    /** The anatomical or organ system that this structure is part of. */
    "partOfSystem"?: AnatomicalSystem | readonly AnatomicalSystem[];
    /** A medical condition associated with this anatomy. */
    "relatedCondition"?: MedicalCondition | readonly MedicalCondition[];
    /** A medical therapy related to this anatomy. */
    "relatedTherapy"?: MedicalTherapy | readonly MedicalTherapy[];
    /** Component (sub-)structure(s) that comprise this anatomical structure. */
    "subStructure"?: AnatomicalStructure | readonly AnatomicalStructure[];
};
/** Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures. */
export declare type AnatomicalStructure = ({
    "@type": "AnatomicalStructure";
} & AnatomicalStructureBase) | (Bone | BrainStructure | Joint | Ligament | Muscle | Nerve | Vessel);
declare type AnatomicalSystemBase = MedicalEntityBase & {
    /** If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system. */
    "associatedPathophysiology"?: Text | readonly Text[];
    /** Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system. */
    "comprisedOf"?: (AnatomicalStructure | AnatomicalSystem) | readonly (AnatomicalStructure | AnatomicalSystem)[];
    /** A medical condition associated with this anatomy. */
    "relatedCondition"?: MedicalCondition | readonly MedicalCondition[];
    /** Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system. */
    "relatedStructure"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** A medical therapy related to this anatomy. */
    "relatedTherapy"?: MedicalTherapy | readonly MedicalTherapy[];
};
/** An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can includes circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems. */
export declare type AnatomicalSystem = {
    "@type": "AnatomicalSystem";
} & AnatomicalSystemBase;
declare type AnimalShelterBase = LocalBusinessBase;
/** Animal shelter. */
export declare type AnimalShelter = ({
    "@type": "AnimalShelter";
} & AnimalShelterBase) | string;
declare type AnswerBase = CommentBase;
/** An answer offered to a question; perhaps correct, perhaps opinionated or wrong. */
export declare type Answer = {
    "@type": "Answer";
} & AnswerBase;
declare type ApartmentBase = AccommodationBase & {
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).Typical unit code(s): C62 for person */
    "occupancy"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/Apartment http://en.wikipedia.org/wiki/Apartment}). */
export declare type Apartment = ({
    "@type": "Apartment";
} & ApartmentBase) | string;
declare type ApartmentComplexBase = ResidenceBase & {
    /** Indicates the total (available plus unavailable) number of accommodation units in an {@link http://schema.org/ApartmentComplex ApartmentComplex}, or the number of accommodation units for a specific {@link http://schema.org/FloorPlan FloorPlan} (within its specific {@link http://schema.org/ApartmentComplex ApartmentComplex}). See also {@link http://schema.org/numberOfAvailableAccommodationUnits numberOfAvailableAccommodationUnits}. */
    "numberOfAccommodationUnits"?: QuantitativeValue | readonly QuantitativeValue[];
    /** Indicates the number of available accommodation units in an {@link http://schema.org/ApartmentComplex ApartmentComplex}, or the number of accommodation units for a specific {@link http://schema.org/FloorPlan FloorPlan} (within its specific {@link http://schema.org/ApartmentComplex ApartmentComplex}). See also {@link http://schema.org/numberOfAccommodationUnits numberOfAccommodationUnits}. */
    "numberOfAvailableAccommodationUnits"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** Residence type: Apartment complex. */
export declare type ApartmentComplex = ({
    "@type": "ApartmentComplex";
} & ApartmentComplexBase) | string;
declare type APIReferenceBase = TechArticleBase & {
    /**
     * Library file name e.g., mscorlib.dll, system.web.dll.
     * @deprecated Consider using http://schema.org/executableLibraryName instead.
     */
    "assembly"?: Text | readonly Text[];
    /** Associated product/technology version. e.g., .NET Framework 4.5. */
    "assemblyVersion"?: Text | readonly Text[];
    /** Library file name e.g., mscorlib.dll, system.web.dll. */
    "executableLibraryName"?: Text | readonly Text[];
    /** Indicates whether API is managed or unmanaged. */
    "programmingModel"?: Text | readonly Text[];
    /** Type of app development: phone, Metro style, desktop, XBox, etc. */
    "targetPlatform"?: Text | readonly Text[];
};
/** Reference documentation for application programming interfaces (APIs). */
export declare type APIReference = {
    "@type": "APIReference";
} & APIReferenceBase;
declare type AppendActionBase = InsertActionBase;
/** The act of inserting at the end if an ordered collection. */
export declare type AppendAction = {
    "@type": "AppendAction";
} & AppendActionBase;
declare type ApplyActionBase = OrganizeActionBase;
/**
 * The act of registering to an organization/service without the guarantee to receive it.
 *
 * Related actions:
 *
 * - {@link http://schema.org/RegisterAction RegisterAction}: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
 */
export declare type ApplyAction = {
    "@type": "ApplyAction";
} & ApplyActionBase;
declare type ApprovedIndicationBase = MedicalIndicationBase;
/** An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US. */
export declare type ApprovedIndication = {
    "@type": "ApprovedIndication";
} & ApprovedIndicationBase;
declare type AquariumBase = CivicStructureBase;
/** Aquarium. */
export declare type Aquarium = ({
    "@type": "Aquarium";
} & AquariumBase) | string;
declare type ArchiveComponentBase = CreativeWorkBase & {
    /** {@link http://schema.org/ArchiveOrganization ArchiveOrganization} that holds, keeps or maintains the {@link http://schema.org/ArchiveComponent ArchiveComponent}. */
    "holdingArchive"?: ArchiveOrganization | readonly ArchiveOrganization[];
    /** Current location of the item. */
    "itemLocation"?: (Place | PostalAddress | Text) | readonly (Place | PostalAddress | Text)[];
};
/** An intangible type to be applied to any archive content, carrying with it a set of properties required to describe archival items and collections. */
export declare type ArchiveComponent = {
    "@type": "ArchiveComponent";
} & ArchiveComponentBase;
declare type ArchiveOrganizationBase = LocalBusinessBase & {
    /** Collection, {@link https://en.wikipedia.org/wiki/Fonds fonds}, or item held, kept or maintained by an {@link http://schema.org/ArchiveOrganization ArchiveOrganization}. */
    "archiveHeld"?: ArchiveComponent | readonly ArchiveComponent[];
};
/** An organization with archival holdings. An organization which keeps and preserves archival material and typically makes it accessible to the public. */
export declare type ArchiveOrganization = ({
    "@type": "ArchiveOrganization";
} & ArchiveOrganizationBase) | string;
declare type ArriveActionBase = MoveActionBase;
/** The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants. */
export declare type ArriveAction = {
    "@type": "ArriveAction";
} & ArriveActionBase;
declare type ArteryBase = VesselBase & {
    /** The branches that comprise the arterial structure. */
    "arterialBranch"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** The anatomical or organ system that the artery originates from. */
    "source"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** The area to which the artery supplies blood. */
    "supplyTo"?: AnatomicalStructure | readonly AnatomicalStructure[];
};
/** A type of blood vessel that specifically carries blood away from the heart. */
export declare type Artery = {
    "@type": "Artery";
} & ArteryBase;
declare type ArtGalleryBase = EntertainmentBusinessBase;
/** An art gallery. */
export declare type ArtGallery = ({
    "@type": "ArtGallery";
} & ArtGalleryBase) | string;
declare type ArticleBase = CreativeWorkBase & {
    /** The actual body of the article. */
    "articleBody"?: Text | readonly Text[];
    /** Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc. */
    "articleSection"?: Text | readonly Text[];
    /** For an {@link http://schema.org/Article Article}, typically a {@link http://schema.org/NewsArticle NewsArticle}, the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc. */
    "backstory"?: (CreativeWork | Text) | readonly (CreativeWork | Text)[];
    /** The page on which the work ends; for example "138" or "xvi". */
    "pageEnd"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The page on which the work starts; for example "135" or "xiii". */
    "pageStart"?: (Integer | Text) | readonly (Integer | Text)[];
    /** Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49". */
    "pagination"?: Text | readonly Text[];
    /**
     * Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.
     *
     * The _speakable_ property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:
     *
     * 1.) _id-value_ URL references - uses _id-value_ of an element in the page being annotated. The simplest use of _speakable_ has (potentially relative) URL values, referencing identified sections of the document concerned.
     *
     * 2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the {@link http://schema.org/cssSelector cssSelector} property.
     *
     * 3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the {@link http://schema.org/xpath xpath} property.
     *
     * For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For thiswe define a supporting type, {@link http://schema.org/SpeakableSpecification SpeakableSpecification}  which is defined to be a possible value of the _speakable_ property.
     */
    "speakable"?: (SpeakableSpecification | URL) | readonly (SpeakableSpecification | URL)[];
    /** The number of words in the text of the Article. */
    "wordCount"?: Integer | readonly Integer[];
};
/**
 * An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.
 *
 * See also {@link http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html blog post}.
 */
export declare type Article = ({
    "@type": "Article";
} & ArticleBase) | (AdvertiserContentArticle | NewsArticle | Report | SatiricalArticle | ScholarlyArticle | SocialMediaPosting | TechArticle);
declare type AskActionBase = CommunicateActionBase & {
    /** A sub property of object. A question. */
    "question"?: Question | readonly Question[];
};
/**
 * The act of posing a question / favor to someone.
 *
 * Related actions:
 *
 * - {@link http://schema.org/ReplyAction ReplyAction}: Appears generally as a response to AskAction.
 */
export declare type AskAction = {
    "@type": "AskAction";
} & AskActionBase;
declare type AskPublicNewsArticleBase = NewsArticleBase;
/** A {@link http://schema.org/NewsArticle NewsArticle} expressing an open call by a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes. */
export declare type AskPublicNewsArticle = {
    "@type": "AskPublicNewsArticle";
} & AskPublicNewsArticleBase;
declare type AssessActionBase = ActionBase;
/** The act of forming one's opinion, reaction or sentiment. */
export declare type AssessAction = ({
    "@type": "AssessAction";
} & AssessActionBase) | (ChooseAction | IgnoreAction | ReactAction | ReviewAction);
declare type AssignActionBase = AllocateActionBase;
/** The act of allocating an action/event/task to some destination (someone or something). */
export declare type AssignAction = {
    "@type": "AssignAction";
} & AssignActionBase;
declare type AtlasBase = CreativeWorkBase;
/** A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject. */
export declare type Atlas = {
    "@type": "Atlas";
} & AtlasBase;
declare type AttorneyBase = LegalServiceBase;
/**
 * Professional service: Attorney.
 *
 * This type is deprecated - {@link http://schema.org/LegalService LegalService} is more inclusive and less ambiguous.
 */
export declare type Attorney = ({
    "@type": "Attorney";
} & AttorneyBase) | string;
declare type AudienceBase = IntangibleBase & {
    /** The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.). */
    "audienceType"?: Text | readonly Text[];
    /** The geographic area associated with the audience. */
    "geographicArea"?: AdministrativeArea | readonly AdministrativeArea[];
};
/** Intended audience for an item, i.e. the group for whom the item was created. */
export declare type Audience = "http://schema.org/Researcher" | (({
    "@type": "Audience";
} & AudienceBase) | (BusinessAudience | EducationalAudience | MedicalAudience | PeopleAudience));
export declare const Audience: {
    /** Researchers. */
    Researcher: "http://schema.org/Researcher";
};
declare type AudiobookBase = (AudioObjectBase & BookBase) & {
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** A person who reads (performs) the audiobook. */
    "readBy"?: Person | readonly Person[];
};
/** An audiobook. */
export declare type Audiobook = {
    "@type": "Audiobook";
} & AudiobookBase;
declare type AudioObjectBase = MediaObjectBase & {
    /** The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the {@link http://schema.org/encodingFormat encodingFormat}. */
    "caption"?: (MediaObject | Text) | readonly (MediaObject | Text)[];
    /** If this MediaObject is an AudioObject or VideoObject, the transcript of that object. */
    "transcript"?: Text | readonly Text[];
};
/** An audio file. */
export declare type AudioObject = ({
    "@type": "AudioObject";
} & AudioObjectBase) | Audiobook;
declare type AuthorizeActionBase = AllocateActionBase & {
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** The act of granting permission to an object. */
export declare type AuthorizeAction = {
    "@type": "AuthorizeAction";
} & AuthorizeActionBase;
declare type AutoBodyShopBase = AutomotiveBusinessBase;
/** Auto body shop. */
export declare type AutoBodyShop = ({
    "@type": "AutoBodyShop";
} & AutoBodyShopBase) | string;
declare type AutoDealerBase = AutomotiveBusinessBase;
/** An car dealership. */
export declare type AutoDealer = ({
    "@type": "AutoDealer";
} & AutoDealerBase) | string;
declare type AutomatedTellerBase = FinancialServiceBase;
/** ATM/cash machine. */
export declare type AutomatedTeller = ({
    "@type": "AutomatedTeller";
} & AutomatedTellerBase) | string;
declare type AutomotiveBusinessBase = LocalBusinessBase;
/** Car repair, sales, or parts. */
export declare type AutomotiveBusiness = ({
    "@type": "AutomotiveBusiness";
} & AutomotiveBusinessBase) | (AutoBodyShop | AutoDealer | AutoPartsStore | AutoRental | AutoRepair | AutoWash | GasStation | MotorcycleDealer | MotorcycleRepair | string);
declare type AutoPartsStoreBase = (StoreBase & AutomotiveBusinessBase);
/** An auto parts store. */
export declare type AutoPartsStore = ({
    "@type": "AutoPartsStore";
} & AutoPartsStoreBase) | string;
declare type AutoRentalBase = AutomotiveBusinessBase;
/** A car rental business. */
export declare type AutoRental = ({
    "@type": "AutoRental";
} & AutoRentalBase) | string;
declare type AutoRepairBase = AutomotiveBusinessBase;
/** Car repair business. */
export declare type AutoRepair = ({
    "@type": "AutoRepair";
} & AutoRepairBase) | string;
declare type AutoWashBase = AutomotiveBusinessBase;
/** A car wash business. */
export declare type AutoWash = ({
    "@type": "AutoWash";
} & AutoWashBase) | string;
declare type BackgroundNewsArticleBase = NewsArticleBase;
/** A {@link http://schema.org/NewsArticle NewsArticle} providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ({@link https://en.wikipedia.org/wiki/FAQ FAQ}) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using {@link http://schema.org/Book Book} or {@link http://schema.org/Article Article}, in particular {@link http://schema.org/ScholarlyArticle ScholarlyArticle}. See also {@link http://schema.org/NewsArticle NewsArticle} for related vocabulary from a learning/education perspective. */
export declare type BackgroundNewsArticle = {
    "@type": "BackgroundNewsArticle";
} & BackgroundNewsArticleBase;
declare type BakeryBase = FoodEstablishmentBase;
/** A bakery. */
export declare type Bakery = ({
    "@type": "Bakery";
} & BakeryBase) | string;
declare type BankAccountBase = FinancialProductBase & {
    /** A minimum amount that has to be paid in every month. */
    "accountMinimumInflow"?: MonetaryAmount | readonly MonetaryAmount[];
    /** An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money. */
    "accountOverdraftLimit"?: MonetaryAmount | readonly MonetaryAmount[];
    /** The type of a bank account. */
    "bankAccountType"?: (Text | URL) | readonly (Text | URL)[];
};
/** A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest. */
export declare type BankAccount = ({
    "@type": "BankAccount";
} & BankAccountBase) | DepositAccount;
declare type BankOrCreditUnionBase = FinancialServiceBase;
/** Bank or credit union. */
export declare type BankOrCreditUnion = ({
    "@type": "BankOrCreditUnion";
} & BankOrCreditUnionBase) | string;
declare type BarcodeBase = ImageObjectBase;
/** An image of a visual machine-readable code such as a barcode or QR code. */
export declare type Barcode = {
    "@type": "Barcode";
} & BarcodeBase;
declare type BarOrPubBase = FoodEstablishmentBase;
/** A bar or pub. */
export declare type BarOrPub = ({
    "@type": "BarOrPub";
} & BarOrPubBase) | string;
declare type BeachBase = CivicStructureBase;
/** Beach. */
export declare type Beach = ({
    "@type": "Beach";
} & BeachBase) | string;
declare type BeautySalonBase = HealthAndBeautyBusinessBase;
/** Beauty salon. */
export declare type BeautySalon = ({
    "@type": "BeautySalon";
} & BeautySalonBase) | string;
declare type BedAndBreakfastBase = LodgingBusinessBase;
/**
 * Bed and breakfast.
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type BedAndBreakfast = ({
    "@type": "BedAndBreakfast";
} & BedAndBreakfastBase) | string;
declare type BedDetailsBase = IntangibleBase & {
    /** The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment. */
    "numberOfBeds"?: Number | readonly Number[];
    /** The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity. */
    "typeOfBed"?: (BedType | Text) | readonly (BedType | Text)[];
};
/** An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also {@link http://schema.org/BedType BedType} (under development). */
export declare type BedDetails = {
    "@type": "BedDetails";
} & BedDetailsBase;
declare type BedTypeBase = QualitativeValueBase;
/** A type of bed. This is used for indicating the bed or beds available in an accommodation. */
export declare type BedType = {
    "@type": "BedType";
} & BedTypeBase;
declare type BefriendActionBase = InteractActionBase;
/**
 * The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.
 *
 * Related actions:
 *
 * - {@link http://schema.org/FollowAction FollowAction}: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
 */
export declare type BefriendAction = {
    "@type": "BefriendAction";
} & BefriendActionBase;
declare type BikeStoreBase = StoreBase;
/** A bike store. */
export declare type BikeStore = ({
    "@type": "BikeStore";
} & BikeStoreBase) | string;
declare type BlogBase = CreativeWorkBase & {
    /** A posting that is part of this blog. */
    "blogPost"?: BlogPosting | readonly BlogPosting[];
    /**
     * The postings that are part of this blog.
     * @deprecated Consider using http://schema.org/blogPost instead.
     */
    "blogPosts"?: BlogPosting | readonly BlogPosting[];
    /** The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication. */
    "issn"?: Text | readonly Text[];
};
/** A blog. */
export declare type Blog = {
    "@type": "Blog";
} & BlogBase;
declare type BlogPostingBase = SocialMediaPostingBase;
/** A blog post. */
export declare type BlogPosting = ({
    "@type": "BlogPosting";
} & BlogPostingBase) | LiveBlogPosting;
declare type BloodTestBase = MedicalTestBase;
/** A medical test performed on a sample of a patient's blood. */
export declare type BloodTest = {
    "@type": "BloodTest";
} & BloodTestBase;
declare type BoardingPolicyTypeBase = EnumerationBase;
/** A type of boarding policy used by an airline. */
export declare type BoardingPolicyType = "http://schema.org/GroupBoardingPolicy" | "http://schema.org/ZoneBoardingPolicy" | ({
    "@type": "BoardingPolicyType";
} & BoardingPolicyTypeBase);
export declare const BoardingPolicyType: {
    /** The airline boards by groups based on check-in time, priority, etc. */
    GroupBoardingPolicy: "http://schema.org/GroupBoardingPolicy";
    /** The airline boards by zones of the plane. */
    ZoneBoardingPolicy: "http://schema.org/ZoneBoardingPolicy";
};
declare type BodyOfWaterBase = LandformBase;
/** A body of water, such as a sea, ocean, or lake. */
export declare type BodyOfWater = ({
    "@type": "BodyOfWater";
} & BodyOfWaterBase) | (Canal | LakeBodyOfWater | OceanBodyOfWater | Pond | Reservoir | RiverBodyOfWater | SeaBodyOfWater | Waterfall | string);
declare type BoneBase = AnatomicalStructureBase;
/** Rigid connective tissue that comprises up the skeletal structure of the human body. */
export declare type Bone = {
    "@type": "Bone";
} & BoneBase;
declare type BookBase = CreativeWorkBase & {
    /** Indicates whether the book is an abridged edition. */
    "abridged"?: Boolean | readonly Boolean[];
    /** The edition of the book. */
    "bookEdition"?: Text | readonly Text[];
    /** The format of the book. */
    "bookFormat"?: BookFormatType | readonly BookFormatType[];
    /** The illustrator of the book. */
    "illustrator"?: Person | readonly Person[];
    /** The ISBN of the book. */
    "isbn"?: Text | readonly Text[];
    /** The number of pages in the book. */
    "numberOfPages"?: Integer | readonly Integer[];
};
/** A book. */
export declare type Book = ({
    "@type": "Book";
} & BookBase) | Audiobook;
declare type BookFormatTypeBase = EnumerationBase;
/** The publication format of the book. */
export declare type BookFormatType = "http://schema.org/AudiobookFormat" | "http://schema.org/EBook" | "http://schema.org/GraphicNovel" | "http://schema.org/Hardcover" | "http://schema.org/Paperback" | ({
    "@type": "BookFormatType";
} & BookFormatTypeBase);
export declare const BookFormatType: {
    /** Book format: Audiobook. This is an enumerated value for use with the bookFormat property. There is also a type 'Audiobook' in the bib extension which includes Audiobook specific properties. */
    AudiobookFormat: "http://schema.org/AudiobookFormat";
    /** Book format: Ebook. */
    EBook: "http://schema.org/EBook";
    /** Book format: GraphicNovel. May represent a bound collection of ComicIssue instances. */
    GraphicNovel: "http://schema.org/GraphicNovel";
    /** Book format: Hardcover. */
    Hardcover: "http://schema.org/Hardcover";
    /** Book format: Paperback. */
    Paperback: "http://schema.org/Paperback";
};
declare type BookmarkActionBase = OrganizeActionBase;
/** An agent bookmarks/flags/labels/tags/marks an object. */
export declare type BookmarkAction = {
    "@type": "BookmarkAction";
} & BookmarkActionBase;
declare type BookSeriesBase = CreativeWorkSeriesBase;
/** A series of books. Included books can be indicated with the hasPart property. */
export declare type BookSeries = {
    "@type": "BookSeries";
} & BookSeriesBase;
declare type BookStoreBase = StoreBase;
/** A bookstore. */
export declare type BookStore = ({
    "@type": "BookStore";
} & BookStoreBase) | string;
declare type BorrowActionBase = TransferActionBase & {
    /** A sub property of participant. The person that lends the object being borrowed. */
    "lender"?: (Organization | Person) | readonly (Organization | Person)[];
};
/**
 * The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.
 *
 * Related actions:
 *
 * - {@link http://schema.org/LendAction LendAction}: Reciprocal of BorrowAction.
 */
export declare type BorrowAction = {
    "@type": "BorrowAction";
} & BorrowActionBase;
declare type BowlingAlleyBase = SportsActivityLocationBase;
/** A bowling alley. */
export declare type BowlingAlley = ({
    "@type": "BowlingAlley";
} & BowlingAlleyBase) | string;
declare type BrainStructureBase = AnatomicalStructureBase;
/** Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity. */
export declare type BrainStructure = {
    "@type": "BrainStructure";
} & BrainStructureBase;
declare type BrandBase = IntangibleBase & {
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** An associated logo. */
    "logo"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /** A slogan or motto associated with the item. */
    "slogan"?: Text | readonly Text[];
};
/** A brand is a name used by an organization or business person for labeling a product, product group, or similar. */
export declare type Brand = {
    "@type": "Brand";
} & BrandBase;
declare type BreadcrumbListBase = ItemListBase;
/**
 * A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.
 *
 * The {@link http://schema.org/position position} property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an {@link http://schema.org/itemListOrder itemListOrder} of {@link http://schema.org/ItemListOrderAscending ItemListOrderAscending} (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.
 */
export declare type BreadcrumbList = {
    "@type": "BreadcrumbList";
} & BreadcrumbListBase;
declare type BreweryBase = FoodEstablishmentBase;
/** Brewery. */
export declare type Brewery = ({
    "@type": "Brewery";
} & BreweryBase) | string;
declare type BridgeBase = CivicStructureBase;
/** A bridge. */
export declare type Bridge = ({
    "@type": "Bridge";
} & BridgeBase) | string;
declare type BroadcastChannelBase = IntangibleBase & {
    /** The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number. */
    "broadcastChannelId"?: Text | readonly Text[];
    /** The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM". */
    "broadcastFrequency"?: (BroadcastFrequencySpecification | Text) | readonly (BroadcastFrequencySpecification | Text)[];
    /** The type of service required to have access to the channel (e.g. Standard or Premium). */
    "broadcastServiceTier"?: Text | readonly Text[];
    /** Genre of the creative work, broadcast channel or group. */
    "genre"?: (Text | URL) | readonly (Text | URL)[];
    /** The CableOrSatelliteService offering the channel. */
    "inBroadcastLineup"?: CableOrSatelliteService | readonly CableOrSatelliteService[];
    /** The BroadcastService offered on this channel. */
    "providesBroadcastService"?: BroadcastService | readonly BroadcastService[];
};
/** A unique instance of a BroadcastService on a CableOrSatelliteService lineup. */
export declare type BroadcastChannel = ({
    "@type": "BroadcastChannel";
} & BroadcastChannelBase) | (RadioChannel | TelevisionChannel);
declare type BroadcastEventBase = PublicationEventBase & {
    /** The event being broadcast such as a sporting event or awards ceremony. */
    "broadcastOfEvent"?: Event | readonly Event[];
    /** True is the broadcast is of a live event. */
    "isLiveBroadcast"?: Boolean | readonly Boolean[];
    /** Languages in which subtitles/captions are available, in {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard format}. */
    "subtitleLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.). */
    "videoFormat"?: Text | readonly Text[];
};
/** An over the air or online broadcast event. */
export declare type BroadcastEvent = {
    "@type": "BroadcastEvent";
} & BroadcastEventBase;
declare type BroadcastFrequencySpecificationBase = IntangibleBase & {
    /** The frequency in MHz for a particular broadcast. */
    "broadcastFrequencyValue"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** The modulation (e.g. FM, AM, etc) used by a particular broadcast service */
    "broadcastSignalModulation"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** The subchannel used for the broadcast. */
    "broadcastSubChannel"?: Text | readonly Text[];
};
/** The frequency in MHz and the modulation used for a particular BroadcastService. */
export declare type BroadcastFrequencySpecification = {
    "@type": "BroadcastFrequencySpecification";
} & BroadcastFrequencySpecificationBase;
declare type BroadcastServiceBase = ServiceBase & {
    /**
     * The area within which users can expect to reach the broadcast service.
     * @deprecated Consider using http://schema.org/serviceArea instead.
     */
    "area"?: Place | readonly Place[];
    /** The media network(s) whose content is broadcast on this station. */
    "broadcastAffiliateOf"?: Organization | readonly Organization[];
    /** The name displayed in the channel guide. For many US affiliates, it is the network name. */
    "broadcastDisplayName"?: Text | readonly Text[];
    /** The organization owning or operating the broadcast service. */
    "broadcaster"?: Organization | readonly Organization[];
    /** The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM". */
    "broadcastFrequency"?: (BroadcastFrequencySpecification | Text) | readonly (BroadcastFrequencySpecification | Text)[];
    /** The timezone in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 format} for which the service bases its broadcasts */
    "broadcastTimezone"?: Text | readonly Text[];
    /** A {@link https://en.wikipedia.org/wiki/Call_sign callsign}, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. */
    "callSign"?: Text | readonly Text[];
    /** A broadcast channel of a broadcast service. */
    "hasBroadcastChannel"?: BroadcastChannel | readonly BroadcastChannel[];
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** A broadcast service to which the broadcast service may belong to such as regional variations of a national channel. */
    "parentService"?: BroadcastService | readonly BroadcastService[];
    /** The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.). */
    "videoFormat"?: Text | readonly Text[];
};
/** A delivery service through which content is provided via broadcast over the air or online. */
export declare type BroadcastService = ({
    "@type": "BroadcastService";
} & BroadcastServiceBase) | RadioBroadcastService;
declare type BrokerageAccountBase = InvestmentOrDepositBase;
/** An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm. */
export declare type BrokerageAccount = {
    "@type": "BrokerageAccount";
} & BrokerageAccountBase;
declare type BuddhistTempleBase = PlaceOfWorshipBase;
/** A Buddhist temple. */
export declare type BuddhistTemple = ({
    "@type": "BuddhistTemple";
} & BuddhistTempleBase) | string;
declare type BusinessAudienceBase = AudienceBase & {
    /** The number of employees in an organization e.g. business. */
    "numberOfEmployees"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The size of the business in annual revenue. */
    "yearlyRevenue"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The age of the business. */
    "yearsInOperation"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A set of characteristics belonging to businesses, e.g. who compose an item's target audience. */
export declare type BusinessAudience = {
    "@type": "BusinessAudience";
} & BusinessAudienceBase;
declare type BusinessEntityTypeBase = EnumerationBase;
/**
 * A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#Business
 * - http://purl.org/goodrelations/v1#Enduser
 * - http://purl.org/goodrelations/v1#PublicInstitution
 * - http://purl.org/goodrelations/v1#Reseller
 */
export declare type BusinessEntityType = {
    "@type": "BusinessEntityType";
} & BusinessEntityTypeBase;
declare type BusinessEventBase = EventBase;
/** Event type: Business event. */
export declare type BusinessEvent = {
    "@type": "BusinessEvent";
} & BusinessEventBase;
declare type BusinessFunctionBase = EnumerationBase;
/**
 * The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#ConstructionInstallation
 * - http://purl.org/goodrelations/v1#Dispose
 * - http://purl.org/goodrelations/v1#LeaseOut
 * - http://purl.org/goodrelations/v1#Maintain
 * - http://purl.org/goodrelations/v1#ProvideService
 * - http://purl.org/goodrelations/v1#Repair
 * - http://purl.org/goodrelations/v1#Sell
 * - http://purl.org/goodrelations/v1#Buy
 */
export declare type BusinessFunction = {
    "@type": "BusinessFunction";
} & BusinessFunctionBase;
declare type BusOrCoachBase = VehicleBase & {
    /** The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards. */
    "acrissCode"?: Text | readonly Text[];
    /**
     * The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound
     *
     * - Note 1: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.
     * - Note 2: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}
     * - Note 3: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "roofLoad"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel. */
export declare type BusOrCoach = {
    "@type": "BusOrCoach";
} & BusOrCoachBase;
declare type BusReservationBase = ReservationBase;
/**
 * A reservation for bus travel.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {@link http://schema.org/Offer Offer}.
 */
export declare type BusReservation = {
    "@type": "BusReservation";
} & BusReservationBase;
declare type BusStationBase = CivicStructureBase;
/** A bus station. */
export declare type BusStation = ({
    "@type": "BusStation";
} & BusStationBase) | string;
declare type BusStopBase = CivicStructureBase;
/** A bus stop. */
export declare type BusStop = ({
    "@type": "BusStop";
} & BusStopBase) | string;
declare type BusTripBase = TripBase & {
    /** The stop or station from which the bus arrives. */
    "arrivalBusStop"?: (BusStation | BusStop) | readonly (BusStation | BusStop)[];
    /** The name of the bus (e.g. Bolt Express). */
    "busName"?: Text | readonly Text[];
    /** The unique identifier for the bus. */
    "busNumber"?: Text | readonly Text[];
    /** The stop or station from which the bus departs. */
    "departureBusStop"?: (BusStation | BusStop) | readonly (BusStation | BusStop)[];
};
/** A trip on a commercial bus line. */
export declare type BusTrip = {
    "@type": "BusTrip";
} & BusTripBase;
declare type BuyActionBase = TradeActionBase & {
    /** An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider. */
    "seller"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * 'vendor' is an earlier term for 'seller'.
     * @deprecated Consider using http://schema.org/seller instead.
     */
    "vendor"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * The warranty promise(s) included in the offer.
     * @deprecated Consider using http://schema.org/warranty instead.
     */
    "warrantyPromise"?: WarrantyPromise | readonly WarrantyPromise[];
};
/** The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction. */
export declare type BuyAction = {
    "@type": "BuyAction";
} & BuyActionBase;
declare type CableOrSatelliteServiceBase = ServiceBase;
/** A service which provides access to media programming like TV or radio. Access may be via cable or satellite. */
export declare type CableOrSatelliteService = {
    "@type": "CableOrSatelliteService";
} & CableOrSatelliteServiceBase;
declare type CafeOrCoffeeShopBase = FoodEstablishmentBase;
/** A cafe or coffee shop. */
export declare type CafeOrCoffeeShop = ({
    "@type": "CafeOrCoffeeShop";
} & CafeOrCoffeeShopBase) | string;
declare type CampgroundBase = (LodgingBusinessBase & CivicStructureBase);
/**
 * A camping site, campsite, or {@link http://schema.org/Campground Campground} is a place used for overnight stay in the outdoors, typically containing individual {@link http://schema.org/CampingPitch CampingPitch} locations.
 *
 * In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see {@link https://en.wikipedia.org/wiki/Campsite https://en.wikipedia.org/wiki/Campsite}).
 *
 * See also the dedicated {@link /docs/hotels.html document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Campground = ({
    "@type": "Campground";
} & CampgroundBase) | string;
declare type CampingPitchBase = AccommodationBase;
/**
 * A {@link http://schema.org/CampingPitch CampingPitch} is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or {@link http://schema.org/Campground Campground}.
 *
 * In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.(Source: Wikipedia see {@link https://en.wikipedia.org/wiki/Campsite https://en.wikipedia.org/wiki/Campsite}).
 *
 * See also the dedicated {@link /docs/hotels.html document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type CampingPitch = ({
    "@type": "CampingPitch";
} & CampingPitchBase) | string;
declare type CanalBase = BodyOfWaterBase;
/** A canal, like the Panama Canal. */
export declare type Canal = ({
    "@type": "Canal";
} & CanalBase) | string;
declare type CancelActionBase = PlanActionBase;
/**
 * The act of asserting that a future event/action is no longer going to happen.
 *
 * Related actions:
 *
 * - {@link http://schema.org/ConfirmAction ConfirmAction}: The antonym of CancelAction.
 */
export declare type CancelAction = {
    "@type": "CancelAction";
} & CancelActionBase;
declare type CarBase = VehicleBase & {
    /** The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards. */
    "acrissCode"?: Text | readonly Text[];
    /**
     * The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound
     *
     * - Note 1: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.
     * - Note 2: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}
     * - Note 3: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "roofLoad"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A car is a wheeled, self-powered motor vehicle used for transportation. */
export declare type Car = {
    "@type": "Car";
} & CarBase;
declare type CarUsageTypeBase = QualitativeValueBase;
/** A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi. */
export declare type CarUsageType = "http://schema.org/DrivingSchoolVehicleUsage" | "http://schema.org/RentalVehicleUsage" | "http://schema.org/TaxiVehicleUsage" | ({
    "@type": "CarUsageType";
} & CarUsageTypeBase);
export declare const CarUsageType: {
    /** Indicates the usage of the vehicle for driving school. */
    DrivingSchoolVehicleUsage: "http://schema.org/DrivingSchoolVehicleUsage";
    /** Indicates the usage of the vehicle as a rental car. */
    RentalVehicleUsage: "http://schema.org/RentalVehicleUsage";
    /** Indicates the usage of the car as a taxi. */
    TaxiVehicleUsage: "http://schema.org/TaxiVehicleUsage";
};
declare type CasinoBase = EntertainmentBusinessBase;
/** A casino. */
export declare type Casino = ({
    "@type": "Casino";
} & CasinoBase) | string;
declare type CategoryCodeBase = DefinedTermBase & {
    /** A short textual code that uniquely identifies the value. */
    "codeValue"?: Text | readonly Text[];
    /** A {@link http://schema.org/CategoryCodeSet CategoryCodeSet} that contains this category code. */
    "inCodeSet"?: (CategoryCodeSet | URL) | readonly (CategoryCodeSet | URL)[];
};
/** A Category Code. */
export declare type CategoryCode = ({
    "@type": "CategoryCode";
} & CategoryCodeBase) | MedicalCode;
declare type CategoryCodeSetBase = DefinedTermSetBase & {
    /** A Category code contained in this code set. */
    "hasCategoryCode"?: CategoryCode | readonly CategoryCode[];
};
/** A set of Category Code values. */
export declare type CategoryCodeSet = {
    "@type": "CategoryCodeSet";
} & CategoryCodeSetBase;
declare type CatholicChurchBase = ChurchBase;
/** A Catholic church. */
export declare type CatholicChurch = ({
    "@type": "CatholicChurch";
} & CatholicChurchBase) | string;
declare type CemeteryBase = CivicStructureBase;
/** A graveyard. */
export declare type Cemetery = ({
    "@type": "Cemetery";
} & CemeteryBase) | string;
declare type ChapterBase = CreativeWorkBase & {
    /** The page on which the work ends; for example "138" or "xvi". */
    "pageEnd"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The page on which the work starts; for example "135" or "xiii". */
    "pageStart"?: (Integer | Text) | readonly (Integer | Text)[];
    /** Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49". */
    "pagination"?: Text | readonly Text[];
};
/** One of the sections into which a book is divided. A chapter usually has a section number or a name. */
export declare type Chapter = {
    "@type": "Chapter";
} & ChapterBase;
declare type CheckActionBase = FindActionBase;
/** An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state. */
export declare type CheckAction = {
    "@type": "CheckAction";
} & CheckActionBase;
declare type CheckInActionBase = CommunicateActionBase;
/**
 * The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).
 *
 * Related actions:
 *
 * - {@link http://schema.org/CheckOutAction CheckOutAction}: The antonym of CheckInAction.
 * - {@link http://schema.org/ArriveAction ArriveAction}: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.
 * - {@link http://schema.org/ConfirmAction ConfirmAction}: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the _start_ of a previously reserved service rather than its validity/existence.
 */
export declare type CheckInAction = {
    "@type": "CheckInAction";
} & CheckInActionBase;
declare type CheckOutActionBase = CommunicateActionBase;
/**
 * The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).
 *
 * Related actions:
 *
 * - {@link http://schema.org/CheckInAction CheckInAction}: The antonym of CheckOutAction.
 * - {@link http://schema.org/DepartAction DepartAction}: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
 * - {@link http://schema.org/CancelAction CancelAction}: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
 */
export declare type CheckOutAction = {
    "@type": "CheckOutAction";
} & CheckOutActionBase;
declare type CheckoutPageBase = WebPageBase;
/** Web page type: Checkout page. */
export declare type CheckoutPage = {
    "@type": "CheckoutPage";
} & CheckoutPageBase;
declare type ChildCareBase = LocalBusinessBase;
/** A Childcare center. */
export declare type ChildCare = ({
    "@type": "ChildCare";
} & ChildCareBase) | string;
declare type ChildrensEventBase = EventBase;
/** Event type: Children's event. */
export declare type ChildrensEvent = {
    "@type": "ChildrensEvent";
} & ChildrensEventBase;
declare type ChooseActionBase = AssessActionBase & {
    /** A sub property of object. The options subject to this action. */
    "actionOption"?: (Text | Thing) | readonly (Text | Thing)[];
    /**
     * A sub property of object. The options subject to this action.
     * @deprecated Consider using http://schema.org/actionOption instead.
     */
    "option"?: (Text | Thing) | readonly (Text | Thing)[];
};
/** The act of expressing a preference from a set of options or a large or unbounded set of choices/options. */
export declare type ChooseAction = ({
    "@type": "ChooseAction";
} & ChooseActionBase) | VoteAction;
declare type ChurchBase = PlaceOfWorshipBase;
/** A church. */
export declare type Church = ({
    "@type": "Church";
} & ChurchBase) | (CatholicChurch | string);
declare type CityBase = AdministrativeAreaBase;
/** A city or town. */
export declare type City = ({
    "@type": "City";
} & CityBase) | string;
declare type CityHallBase = GovernmentBuildingBase;
/** A city hall. */
export declare type CityHall = ({
    "@type": "CityHall";
} & CityHallBase) | string;
declare type CivicStructureBase = PlaceBase & {
    /**
     * The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.
     *
     * - Days are specified using the following two-letter combinations: `Mo`, `Tu`, `We`, `Th`, `Fr`, `Sa`, `Su`.
     * - Times are specified using 24:00 time. For example, 3pm is specified as `15:00`.
     * - Here is an example: `&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;`.
     * - If a business is open 7 days a week, then it can be specified as `&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;`.
     */
    "openingHours"?: Text | readonly Text[];
};
/** A public structure, such as a town hall or concert hall. */
export declare type CivicStructure = ({
    "@type": "CivicStructure";
} & CivicStructureBase) | (Airport | Aquarium | Beach | Bridge | BusStation | BusStop | Campground | Cemetery | Crematorium | EventVenue | FireStation | GovernmentBuilding | Hospital | MovieTheater | Museum | MusicVenue | Park | ParkingFacility | PerformingArtsTheater | PlaceOfWorship | Playground | PoliceStation | PublicToilet | RVPark | StadiumOrArena | SubwayStation | TaxiStand | TrainStation | Zoo | string);
declare type ClaimBase = CreativeWorkBase & {
    /** Indicates an occurence of a {@link http://schema.org/Claim Claim} in some {@link http://schema.org/CreativeWork CreativeWork}. */
    "appearance"?: CreativeWork | readonly CreativeWork[];
    /** Indicates the first known occurence of a {@link http://schema.org/Claim Claim} in some {@link http://schema.org/CreativeWork CreativeWork}. */
    "firstAppearance"?: CreativeWork | readonly CreativeWork[];
};
/**
 * A {@link http://schema.org/Claim Claim} in Schema.org represents a specific, factually-oriented claim that could be the {@link http://schema.org/itemReviewed itemReviewed} in a {@link http://schema.org/ClaimReview ClaimReview}. The content of a claim can be summarized with the {@link http://schema.org/text text} property. Variations on well known claims can have their common identity indicated via {@link http://schema.org/sameAs sameAs} links, and summarized with a {@link http://schema.org/name name}. Ideally, a {@link http://schema.org/Claim Claim} description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.
 *
 * Beyond {@link http://schema.org/ClaimReview ClaimReview}, the Claim type can be associated with related creative works - for example a {@link http://schema.org/ScholaryArticle ScholaryArticle} or {@link http://schema.org/Question Question} might be {@link http://schema.org/about about} some {@link http://schema.org/Claim Claim}.
 *
 * At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.
 */
export declare type Claim = {
    "@type": "Claim";
} & ClaimBase;
declare type ClaimReviewBase = ReviewBase & {
    /** A short summary of the specific claims reviewed in a ClaimReview. */
    "claimReviewed"?: Text | readonly Text[];
};
/** A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed). */
export declare type ClaimReview = {
    "@type": "ClaimReview";
} & ClaimReviewBase;
declare type ClassBase = IntangibleBase & {
    /** Relates a term (i.e. a property, class or enumeration) to one that supersedes it. */
    "supersededBy"?: (Class | Enumeration | Property) | readonly (Class | Enumeration | Property)[];
};
/** A class, also often called a 'Type'; equivalent to rdfs:Class. */
export declare type Class = {
    "@type": "Class";
} & ClassBase;
declare type ClipBase = CreativeWorkBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** Position of the clip within an ordered group of clips. */
    "clipNumber"?: (Integer | Text) | readonly (Integer | Text)[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** The end time of the clip expressed as the number of seconds from the beginning of the work. */
    "endOffset"?: Number | readonly Number[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The episode to which this clip belongs. */
    "partOfEpisode"?: Episode | readonly Episode[];
    /** The season to which this episode belongs. */
    "partOfSeason"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The series to which this episode or season belongs. */
    "partOfSeries"?: CreativeWorkSeries | readonly CreativeWorkSeries[];
    /** The start time of the clip expressed as the number of seconds from the beginning of the work. */
    "startOffset"?: Number | readonly Number[];
};
/** A short TV or radio program or a segment/part of a program. */
export declare type Clip = ({
    "@type": "Clip";
} & ClipBase) | (MovieClip | RadioClip | TVClip | VideoGameClip);
declare type ClothingStoreBase = StoreBase;
/** A clothing store. */
export declare type ClothingStore = ({
    "@type": "ClothingStore";
} & ClothingStoreBase) | string;
declare type CodeBase = CreativeWorkBase;
/**
 * Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
 * @deprecated Use SoftwareSourceCode instead.
 */
export declare type Code = {
    "@type": "Code";
} & CodeBase;
declare type CollectionBase = CreativeWorkBase & {
    /** The number of items in the {@link http://schema.org/Collection Collection}. */
    "collectionSize"?: Integer | readonly Integer[];
};
/** A created collection of Creative Works or other artefacts. */
export declare type Collection = {
    "@type": "Collection";
} & CollectionBase;
declare type CollectionPageBase = WebPageBase;
/** Web page type: Collection page. */
export declare type CollectionPage = ({
    "@type": "CollectionPage";
} & CollectionPageBase) | MediaGallery;
declare type CollegeOrUniversityBase = EducationalOrganizationBase;
/** A college, university, or other third-level educational institution. */
export declare type CollegeOrUniversity = ({
    "@type": "CollegeOrUniversity";
} & CollegeOrUniversityBase) | string;
declare type ComedyClubBase = EntertainmentBusinessBase;
/** A comedy club. */
export declare type ComedyClub = ({
    "@type": "ComedyClub";
} & ComedyClubBase) | string;
declare type ComedyEventBase = EventBase;
/** Event type: Comedy event. */
export declare type ComedyEvent = {
    "@type": "ComedyEvent";
} & ComedyEventBase;
declare type ComicCoverArtBase = (CoverArtBase & ComicStoryBase);
/** The artwork on the cover of a comic. */
export declare type ComicCoverArt = {
    "@type": "ComicCoverArt";
} & ComicCoverArtBase;
declare type ComicIssueBase = PublicationIssueBase & {
    /** The primary artist for a work    in a medium other than pencils or digital line art--for example, if the    primary artwork is done in watercolors or digital paints. */
    "artist"?: Person | readonly Person[];
    /** The individual who adds color to inked drawings. */
    "colorist"?: Person | readonly Person[];
    /** The individual who traces over the pencil drawings in ink after pencils are complete. */
    "inker"?: Person | readonly Person[];
    /** The individual who adds lettering, including speech balloons and sound effects, to artwork. */
    "letterer"?: Person | readonly Person[];
    /** The individual who draws the primary narrative artwork. */
    "penciler"?: Person | readonly Person[];
    /** A description of the variant cover    for the issue, if the issue is a variant printing. For example, "Bryan Hitch    Variant Cover" or "2nd Printing Variant". */
    "variantCover"?: Text | readonly Text[];
};
/** Individual comic issues are serially published as    part of a larger series. For the sake of consistency, even one-shot issues    belong to a series comprised of a single issue. All comic issues can be    uniquely identified by: the combination of the name and volume number of the    series to which the issue belongs; the issue number; and the variant    description of the issue (if any). */
export declare type ComicIssue = {
    "@type": "ComicIssue";
} & ComicIssueBase;
declare type ComicSeriesBase = PeriodicalBase;
/** A sequential publication of comic stories under a    unifying title, for example "The Amazing Spider-Man" or "Groo the    Wanderer". */
export declare type ComicSeries = {
    "@type": "ComicSeries";
} & ComicSeriesBase;
declare type ComicStoryBase = CreativeWorkBase & {
    /** The primary artist for a work    in a medium other than pencils or digital line art--for example, if the    primary artwork is done in watercolors or digital paints. */
    "artist"?: Person | readonly Person[];
    /** The individual who adds color to inked drawings. */
    "colorist"?: Person | readonly Person[];
    /** The individual who traces over the pencil drawings in ink after pencils are complete. */
    "inker"?: Person | readonly Person[];
    /** The individual who adds lettering, including speech balloons and sound effects, to artwork. */
    "letterer"?: Person | readonly Person[];
    /** The individual who draws the primary narrative artwork. */
    "penciler"?: Person | readonly Person[];
};
/** The term "story" is any indivisible, re-printable    unit of a comic, including the interior stories, covers, and backmatter. Most    comics have at least two stories: a cover (ComicCoverArt) and an interior story. */
export declare type ComicStory = ({
    "@type": "ComicStory";
} & ComicStoryBase) | ComicCoverArt;
declare type CommentBase = CreativeWorkBase & {
    /** The number of downvotes this question, answer or comment has received from the community. */
    "downvoteCount"?: Integer | readonly Integer[];
    /** The parent of a question, answer or item in general. */
    "parentItem"?: Question | readonly Question[];
    /** The number of upvotes this question, answer or comment has received from the community. */
    "upvoteCount"?: Integer | readonly Integer[];
};
/** A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the {@link http://schema.org/text text} property, and its topic via {@link http://schema.org/about about}, properties shared with all CreativeWorks. */
export declare type Comment = ({
    "@type": "Comment";
} & CommentBase) | (Answer | CorrectionComment);
declare type CommentActionBase = CommunicateActionBase & {
    /** A sub property of result. The Comment created or sent as a result of this action. */
    "resultComment"?: Comment | readonly Comment[];
};
/** The act of generating a comment about a subject. */
export declare type CommentAction = {
    "@type": "CommentAction";
} & CommentActionBase;
declare type CommunicateActionBase = InteractActionBase & {
    /** The subject matter of the content. */
    "about"?: Thing | readonly Thing[];
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /**
     * A sub property of instrument. The language used on this action.
     * @deprecated Consider using http://schema.org/inLanguage instead.
     */
    "language"?: Language | readonly Language[];
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation. */
export declare type CommunicateAction = ({
    "@type": "CommunicateAction";
} & CommunicateActionBase) | (AskAction | CheckInAction | CheckOutAction | CommentAction | InformAction | InviteAction | ReplyAction | ShareAction);
declare type CompleteDataFeedBase = DataFeedBase;
/**
 * A {@link http://schema.org/CompleteDataFeed CompleteDataFeed} is a {@link http://schema.org/DataFeed DataFeed} whose standard representation includes content for every item currently in the feed.
 *
 * This is the equivalent of Atom's element as defined in Feed Paging and Archiving {@link https://tools.ietf.org/html/rfc5005 RFC 5005}, For example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
 */
export declare type CompleteDataFeed = {
    "@type": "CompleteDataFeed";
} & CompleteDataFeedBase;
declare type CompoundPriceSpecificationBase = PriceSpecificationBase & {
    /** This property links to all {@link http://schema.org/UnitPriceSpecification UnitPriceSpecification} nodes that apply in parallel for the {@link http://schema.org/CompoundPriceSpecification CompoundPriceSpecification} node. */
    "priceComponent"?: UnitPriceSpecification | readonly UnitPriceSpecification[];
};
/** A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning"). */
export declare type CompoundPriceSpecification = {
    "@type": "CompoundPriceSpecification";
} & CompoundPriceSpecificationBase;
declare type ComputerLanguageBase = IntangibleBase;
/** This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the {@link http://schema.org/Language Language} type. */
export declare type ComputerLanguage = {
    "@type": "ComputerLanguage";
} & ComputerLanguageBase;
declare type ComputerStoreBase = StoreBase;
/** A computer store. */
export declare type ComputerStore = ({
    "@type": "ComputerStore";
} & ComputerStoreBase) | string;
declare type ConfirmActionBase = InformActionBase;
/**
 * The act of notifying someone that a future event/action is going to happen as expected.
 *
 * Related actions:
 *
 * - {@link http://schema.org/CancelAction CancelAction}: The antonym of ConfirmAction.
 */
export declare type ConfirmAction = {
    "@type": "ConfirmAction";
} & ConfirmActionBase;
declare type ConsortiumBase = OrganizationBase;
/** A Consortium is a membership {@link http://schema.org/Organization Organization} whose members are typically Organizations. */
export declare type Consortium = ({
    "@type": "Consortium";
} & ConsortiumBase) | string;
declare type ConsumeActionBase = ActionBase & {
    /** A set of requirements that a must be fulfilled in order to perform an Action. If more than one value is specied, fulfilling one set of requirements will allow the Action to be performed. */
    "actionAccessibilityRequirement"?: ActionAccessSpecification | readonly ActionAccessSpecification[];
    /** An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it. */
    "expectsAcceptanceOf"?: Offer | readonly Offer[];
};
/** The act of ingesting information/resources/food. */
export declare type ConsumeAction = ({
    "@type": "ConsumeAction";
} & ConsumeActionBase) | (DrinkAction | EatAction | InstallAction | ListenAction | ReadAction | UseAction | ViewAction | WatchAction);
declare type ContactPageBase = WebPageBase;
/** Web page type: Contact page. */
export declare type ContactPage = {
    "@type": "ContactPage";
} & ContactPageBase;
declare type ContactPointBase = StructuredValueBase & {
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /** A language someone may use with or at the item, service or place. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/inLanguage inLanguage} */
    "availableLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers). */
    "contactOption"?: ContactPointOption | readonly ContactPointOption[];
    /** A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point. */
    "contactType"?: Text | readonly Text[];
    /** Email address. */
    "email"?: Text | readonly Text[];
    /** The fax number. */
    "faxNumber"?: Text | readonly Text[];
    /** The hours during which this service or contact is available. */
    "hoursAvailable"?: OpeningHoursSpecification | readonly OpeningHoursSpecification[];
    /** The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones"). */
    "productSupported"?: (Product | Text) | readonly (Product | Text)[];
    /**
     * The geographic area where the service is provided.
     * @deprecated Consider using http://schema.org/areaServed instead.
     */
    "serviceArea"?: (AdministrativeArea | GeoShape | Place) | readonly (AdministrativeArea | GeoShape | Place)[];
    /** The telephone number. */
    "telephone"?: Text | readonly Text[];
};
/** A contact point&#x2014;for example, a Customer Complaints department. */
export declare type ContactPoint = ({
    "@type": "ContactPoint";
} & ContactPointBase) | PostalAddress;
declare type ContactPointOptionBase = EnumerationBase;
/** Enumerated options related to a ContactPoint. */
export declare type ContactPointOption = "http://schema.org/HearingImpairedSupported" | "http://schema.org/TollFree" | ({
    "@type": "ContactPointOption";
} & ContactPointOptionBase);
export declare const ContactPointOption: {
    /** Uses devices to support users with hearing impairments. */
    HearingImpairedSupported: "http://schema.org/HearingImpairedSupported";
    /** The associated telephone number is toll free. */
    TollFree: "http://schema.org/TollFree";
};
declare type ContinentBase = LandformBase;
/** One of the continents (for example, Europe or Africa). */
export declare type Continent = ({
    "@type": "Continent";
} & ContinentBase) | string;
declare type ControlActionBase = ActionBase;
/** An agent controls a device or application. */
export declare type ControlAction = ({
    "@type": "ControlAction";
} & ControlActionBase) | (ActivateAction | DeactivateAction | ResumeAction | SuspendAction);
declare type ConvenienceStoreBase = StoreBase;
/** A convenience store. */
export declare type ConvenienceStore = ({
    "@type": "ConvenienceStore";
} & ConvenienceStoreBase) | string;
declare type ConversationBase = CreativeWorkBase;
/** One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties. */
export declare type Conversation = {
    "@type": "Conversation";
} & ConversationBase;
declare type CookActionBase = CreateActionBase & {
    /** A sub property of location. The specific food establishment where the action occurred. */
    "foodEstablishment"?: (FoodEstablishment | Place) | readonly (FoodEstablishment | Place)[];
    /** A sub property of location. The specific food event where the action occurred. */
    "foodEvent"?: FoodEvent | readonly FoodEvent[];
    /** A sub property of instrument. The recipe/instructions used to perform the action. */
    "recipe"?: Recipe | readonly Recipe[];
};
/** The act of producing/preparing food. */
export declare type CookAction = {
    "@type": "CookAction";
} & CookActionBase;
declare type CorporationBase = OrganizationBase & {
    /** The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022. */
    "tickerSymbol"?: Text | readonly Text[];
};
/** Organization: A business corporation. */
export declare type Corporation = ({
    "@type": "Corporation";
} & CorporationBase) | string;
declare type CorrectionCommentBase = CommentBase;
/** A {@link http://schema.org/comment comment} that corrects {@link http://schema.org/CreativeWork CreativeWork}. */
export declare type CorrectionComment = {
    "@type": "CorrectionComment";
} & CorrectionCommentBase;
declare type CountryBase = AdministrativeAreaBase;
/** A country. */
export declare type Country = ({
    "@type": "Country";
} & CountryBase) | string;
declare type CourseBase = CreativeWorkBase & {
    /** The identifier for the {@link http://schema.org/Course Course} used by the course {@link http://schema.org/provider provider} (e.g. CS101 or 6.001). */
    "courseCode"?: Text | readonly Text[];
    /** Requirements for taking the Course. May be completion of another {@link http://schema.org/Course Course} or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using {@link http://schema.org/AlignmentObject AlignmentObject}. */
    "coursePrerequisites"?: (AlignmentObject | Course | Text) | readonly (AlignmentObject | Course | Text)[];
    /** A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program. */
    "educationalCredentialAwarded"?: (EducationalOccupationalCredential | Text | URL) | readonly (EducationalOccupationalCredential | Text | URL)[];
    /** An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students. */
    "hasCourseInstance"?: CourseInstance | readonly CourseInstance[];
    /** The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram. */
    "numberOfCredits"?: (Integer | StructuredValue) | readonly (Integer | StructuredValue)[];
    /** A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program. */
    "occupationalCredentialAwarded"?: (EducationalOccupationalCredential | Text | URL) | readonly (EducationalOccupationalCredential | Text | URL)[];
};
/** A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners. */
export declare type Course = {
    "@type": "Course";
} & CourseBase;
declare type CourseInstanceBase = EventBase & {
    /** The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ). */
    "courseMode"?: (Text | URL) | readonly (Text | URL)[];
    /** The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week". */
    "courseWorkload"?: Text | readonly Text[];
    /** A person assigned to instruct or provide instructional assistance for the {@link http://schema.org/CourseInstance CourseInstance}. */
    "instructor"?: Person | readonly Person[];
};
/** An instance of a {@link http://schema.org/Course Course} which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students. */
export declare type CourseInstance = {
    "@type": "CourseInstance";
} & CourseInstanceBase;
declare type CourthouseBase = GovernmentBuildingBase;
/** A courthouse. */
export declare type Courthouse = ({
    "@type": "Courthouse";
} & CourthouseBase) | string;
declare type CoverArtBase = VisualArtworkBase;
/** The artwork on the outer surface of a CreativeWork. */
export declare type CoverArt = ({
    "@type": "CoverArt";
} & CoverArtBase) | ComicCoverArt;
declare type CreateActionBase = ActionBase;
/** The act of deliberately creating/producing/generating/building a result out of the agent. */
export declare type CreateAction = ({
    "@type": "CreateAction";
} & CreateActionBase) | (CookAction | DrawAction | FilmAction | PaintAction | PhotographAction | WriteAction);
declare type CreativeWorkBase = ThingBase & {
    /** The subject matter of the content. */
    "about"?: Thing | readonly Thing[];
    /** An abstract is a short description that summarizes a {@link http://schema.org/CreativeWork CreativeWork}. */
    "abstract"?: Text | readonly Text[];
    /** Indicates that the resource is compatible with the referenced accessibility API ({@link http://www.w3.org/wiki/WebSchemas/Accessibility WebSchemas wiki lists possible values}). */
    "accessibilityAPI"?: Text | readonly Text[];
    /** Identifies input methods that are sufficient to fully control the described resource ({@link http://www.w3.org/wiki/WebSchemas/Accessibility WebSchemas wiki lists possible values}). */
    "accessibilityControl"?: Text | readonly Text[];
    /** Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility ({@link http://www.w3.org/wiki/WebSchemas/Accessibility WebSchemas wiki lists possible values}). */
    "accessibilityFeature"?: Text | readonly Text[];
    /** A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 ({@link http://www.w3.org/wiki/WebSchemas/Accessibility WebSchemas wiki lists possible values}). */
    "accessibilityHazard"?: Text | readonly Text[];
    /** A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed." */
    "accessibilitySummary"?: Text | readonly Text[];
    /** The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual. */
    "accessMode"?: Text | readonly Text[];
    /** A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual. */
    "accessModeSufficient"?: ItemList | readonly ItemList[];
    /** Specifies the Person that is legally accountable for the CreativeWork. */
    "accountablePerson"?: Person | readonly Person[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** A secondary title of the CreativeWork. */
    "alternativeHeadline"?: Text | readonly Text[];
    /** A media object that encodes this CreativeWork. This property is a synonym for encoding. */
    "associatedMedia"?: MediaObject | readonly MediaObject[];
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** An embedded audio object. */
    "audio"?: (AudioObject | Clip | MusicRecording) | readonly (AudioObject | Clip | MusicRecording)[];
    /** The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably. */
    "author"?: (Organization | Person) | readonly (Organization | Person)[];
    /** An award won by or for this item. */
    "award"?: Text | readonly Text[];
    /**
     * Awards won by or for this item.
     * @deprecated Consider using http://schema.org/award instead.
     */
    "awards"?: Text | readonly Text[];
    /** Fictional person connected with a creative work. */
    "character"?: Person | readonly Person[];
    /** A citation or reference to another creative work, such as another publication, web page, scholarly article, etc. */
    "citation"?: (CreativeWork | Text) | readonly (CreativeWork | Text)[];
    /** Comments, typically from users. */
    "comment"?: Comment | readonly Comment[];
    /** The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere. */
    "commentCount"?: Integer | readonly Integer[];
    /**
     * Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an {@link http://schema.org/ArchiveComponent ArchiveComponent} held by an {@link http://schema.org/ArchiveOrganization ArchiveOrganization}. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.
     *
     * For example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ".
     */
    "conditionsOfAccess"?: Text | readonly Text[];
    /** The location depicted or described in the content. For example, the location in a photograph or painting. */
    "contentLocation"?: Place | readonly Place[];
    /** Official rating of a piece of content&#x2014;for example,'MPAA PG-13'. */
    "contentRating"?: (Rating | Text) | readonly (Rating | Text)[];
    /** The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event. */
    "contentReferenceTime"?: DateTime | readonly DateTime[];
    /** A secondary contributor to the CreativeWork or Event. */
    "contributor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The party holding the legal copyright to the CreativeWork. */
    "copyrightHolder"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The year during which the claimed copyright for the CreativeWork was first asserted. */
    "copyrightYear"?: Number | readonly Number[];
    /** Indicates a correction to a {@link http://schema.org/CreativeWork CreativeWork}, either via a {@link http://schema.org/CorrectionComment CorrectionComment}, textually or in another document. */
    "correction"?: (CorrectionComment | Text | URL) | readonly (CorrectionComment | Text | URL)[];
    /** The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle. */
    "creativeWorkStatus"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
    /** The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork. */
    "creator"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The date on which the CreativeWork was created or the item was added to a DataFeed. */
    "dateCreated"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed. */
    "dateModified"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** Date of first broadcast/publication. */
    "datePublished"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** A link to the page containing the comments of the CreativeWork. */
    "discussionUrl"?: URL | readonly URL[];
    /** Specifies the Person who edited the CreativeWork. */
    "editor"?: Person | readonly Person[];
    /** An alignment to an established educational framework. */
    "educationalAlignment"?: AlignmentObject | readonly AlignmentObject[];
    /** The purpose of a work in the context of education; for example, 'assignment', 'group work'. */
    "educationalUse"?: Text | readonly Text[];
    /** A media object that encodes this CreativeWork. This property is a synonym for associatedMedia. */
    "encoding"?: MediaObject | readonly MediaObject[];
    /**
     * Media type typically expressed using a MIME format (see {@link http://www.iana.org/assignments/media-types/media-types.xhtml IANA site} and {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types MDN reference}) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     *
     * In cases where a {@link http://schema.org/CreativeWork CreativeWork} has several media type representations, {@link http://schema.org/encoding encoding} can be used to indicate each {@link http://schema.org/MediaObject MediaObject} alongside particular {@link http://schema.org/encodingFormat encodingFormat} information.
     *
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     */
    "encodingFormat"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * A media object that encodes this CreativeWork.
     * @deprecated Consider using http://schema.org/encoding instead.
     */
    "encodings"?: MediaObject | readonly MediaObject[];
    /** A creative work that this work is an example/instance/realization/derivation of. */
    "exampleOfWork"?: CreativeWork | readonly CreativeWork[];
    /** Date the content expires and is no longer useful or available. For example a {@link http://schema.org/VideoObject VideoObject} or {@link http://schema.org/NewsArticle NewsArticle} whose availability or relevance is time-limited, or a {@link http://schema.org/ClaimReview ClaimReview} fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date. */
    "expires"?: Date | readonly Date[];
    /**
     * Media type, typically MIME format (see {@link http://www.iana.org/assignments/media-types/media-types.xhtml IANA site}) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
     * @deprecated Consider using http://schema.org/encodingFormat instead.
     */
    "fileFormat"?: (Text | URL) | readonly (Text | URL)[];
    /** A person or organization that supports (sponsors) something through some kind of financial contribution. */
    "funder"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Genre of the creative work, broadcast channel or group. */
    "genre"?: (Text | URL) | readonly (Text | URL)[];
    /** Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense). */
    "hasPart"?: CreativeWork | readonly CreativeWork[];
    /** Headline of the article. */
    "headline"?: Text | readonly Text[];
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used. */
    "interactionStatistic"?: InteractionCounter | readonly InteractionCounter[];
    /** The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'. */
    "interactivityType"?: Text | readonly Text[];
    /** A flag to signal that the item, event, or place is accessible for free. */
    "isAccessibleForFree"?: Boolean | readonly Boolean[];
    /** A resource from which this work is derived or from which it is a modification or adaption. */
    "isBasedOn"?: (CreativeWork | Product | URL) | readonly (CreativeWork | Product | URL)[];
    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     * @deprecated Consider using http://schema.org/isBasedOn instead.
     */
    "isBasedOnUrl"?: (CreativeWork | Product | URL) | readonly (CreativeWork | Product | URL)[];
    /** Indicates whether this content is family friendly. */
    "isFamilyFriendly"?: Boolean | readonly Boolean[];
    /** Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of. */
    "isPartOf"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas. */
    "keywords"?: Text | readonly Text[];
    /** The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'. */
    "learningResourceType"?: Text | readonly Text[];
    /** A license document that applies to this content, typically indicated by URL. */
    "license"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork. */
    "locationCreated"?: Place | readonly Place[];
    /** Indicates the primary entity described in some page or other CreativeWork. */
    "mainEntity"?: Thing | readonly Thing[];
    /** A maintainer of a {@link http://schema.org/Dataset Dataset}, software package ({@link http://schema.org/SoftwareApplication SoftwareApplication}), or other {@link http://schema.org/Project Project}. A maintainer is a {@link http://schema.org/Person Person} or {@link http://schema.org/Organization Organization} that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When {@link http://schema.org/maintainer maintainer} is applied to a specific version of something e.g. a particular version or packaging of a {@link http://schema.org/Dataset Dataset}, it is always  possible that the upstream source has a different maintainer. The {@link http://schema.org/isBasedOn isBasedOn} property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work. */
    "maintainer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A material that something is made from, e.g. leather, wool, cotton, paper. */
    "material"?: (Product | Text | URL) | readonly (Product | Text | URL)[];
    /** The quantity of the materials being described or an expression of the physical space they occupy. */
    "materialExtent"?: (QuantitativeValue | Text) | readonly (QuantitativeValue | Text)[];
    /** Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept. */
    "mentions"?: Thing | readonly Thing[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** The position of an item in a series or sequence of items. */
    "position"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.). */
    "producer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A publication event associated with the item. */
    "publication"?: PublicationEvent | readonly PublicationEvent[];
    /** The publisher of the creative work. */
    "publisher"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The publishing division which published the comic. */
    "publisherImprint"?: Organization | readonly Organization[];
    /**
     * The publishingPrinciples property indicates (typically via {@link http://schema.org/URL URL}) a document describing the editorial principles of an {@link http://schema.org/Organization Organization} (or individual e.g. a {@link http://schema.org/Person Person} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {@link http://schema.org/CreativeWork CreativeWork} (e.g. {@link http://schema.org/NewsArticle NewsArticle}) the principles are those of the party primarily responsible for the creation of the {@link http://schema.org/CreativeWork CreativeWork}.
     *
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {@link http://schema.org/funder funder}) can be expressed using schema.org terminology.
     */
    "publishingPrinciples"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event. */
    "recordedAt"?: Event | readonly Event[];
    /** The place and time the release was issued, expressed as a PublicationEvent. */
    "releasedEvent"?: PublicationEvent | readonly PublicationEvent[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * Review of the item.
     * @deprecated Consider using http://schema.org/review instead.
     */
    "reviews"?: Review | readonly Review[];
    /** Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. */
    "schemaVersion"?: (Text | URL) | readonly (Text | URL)[];
    /** Indicates the date on which the current structured data was generated / published. Typically used alongside {@link http://schema.org/sdPublisher sdPublisher} */
    "sdDatePublished"?: Date | readonly Date[];
    /** A license document that applies to this structured data, typically indicated by URL. */
    "sdLicense"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The{@link http://schema.org/sdPublisher sdPublisher} property helps make such practices more explicit. */
    "sdPublisher"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The Organization on whose behalf the creator was working. */
    "sourceOrganization"?: Organization | readonly Organization[];
    /** The "spatial" property can be used in cases when more specific properties(e.g. {@link http://schema.org/locationCreated locationCreated}, {@link http://schema.org/spatialCoverage spatialCoverage}, {@link http://schema.org/contentLocation contentLocation}) are not known to be appropriate. */
    "spatial"?: Place | readonly Place[];
    /** The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of      contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates      areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York. */
    "spatialCoverage"?: Place | readonly Place[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The "temporal" property can be used in cases where more specific properties(e.g. {@link http://schema.org/temporalCoverage temporalCoverage}, {@link http://schema.org/dateCreated dateCreated}, {@link http://schema.org/dateModified dateModified}, {@link http://schema.org/datePublished datePublished}) are not known to be appropriate. */
    "temporal"?: (DateTime | Text) | readonly (DateTime | Text)[];
    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in {@link https://en.wikipedia.org/wiki/ISO_8601#Time_intervals ISO 8601 time interval format}. In      the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.      Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     *
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     */
    "temporalCoverage"?: (DateTime | Text | URL) | readonly (DateTime | Text | URL)[];
    /** The textual content of this CreativeWork. */
    "text"?: Text | readonly Text[];
    /** A thumbnail image relevant to the Thing. */
    "thumbnailUrl"?: URL | readonly URL[];
    /** Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'. */
    "timeRequired"?: Duration | readonly Duration[];
    /** The work that this work has been translated from. e.g. \u7269\u79CD\u8D77\u6E90 is a translationOf \u201COn the Origin of Species\u201D */
    "translationOfWork"?: CreativeWork | readonly CreativeWork[];
    /** Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event. */
    "translator"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The typical expected age range, e.g. '7-9', '11-'. */
    "typicalAgeRange"?: Text | readonly Text[];
    /** The version of the CreativeWork embodied by a specified resource. */
    "version"?: (Number | Text) | readonly (Number | Text)[];
    /** An embedded video object. */
    "video"?: (Clip | VideoObject) | readonly (Clip | VideoObject)[];
    /** Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook. */
    "workExample"?: CreativeWork | readonly CreativeWork[];
    /** A work that is a translation of the content of this work. e.g. \u897F\u904A\u8A18 has an English workTranslation \u201CJourney to the West\u201D,a German workTranslation \u201CMonkeys Pilgerfahrt\u201D and a Vietnamese  translation T\u00E2y du k\u00FD b\u00ECnh kh\u1EA3o. */
    "workTranslation"?: CreativeWork | readonly CreativeWork[];
};
/** The most generic kind of creative work, including books, movies, photographs, software programs, etc. */
export declare type CreativeWork = ({
    "@type": "CreativeWork";
} & CreativeWorkBase) | (_3DModel | ArchiveComponent | Article | Atlas | Blog | Book | Chapter | Claim | Clip | Code | Collection | ComicStory | Comment | Conversation | Course | CreativeWorkSeason | CreativeWorkSeries | DataCatalog | Dataset | DefinedTermSet | Diet | DigitalDocument | Drawing | EducationalOccupationalCredential | Episode | ExercisePlan | Game | Guide | HowTo | HowToDirection | HowToSection | HowToStep | HowToTip | Legislation | Manuscript | Map | MediaObject | Menu | MenuSection | Message | Movie | MusicComposition | MusicPlaylist | MusicRecording | Painting | Photograph | Play | Poster | PublicationIssue | PublicationVolume | Question | Quotation | Review | Sculpture | Season | SheetMusic | ShortStory | SoftwareApplication | SoftwareSourceCode | Thesis | TVSeason | TVSeries | VisualArtwork | WebContent | WebPage | WebPageElement | WebSite);
declare type CreativeWorkSeasonBase = CreativeWorkBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** An episode of a tv, radio or game media within a series or season. */
    "episode"?: Episode | readonly Episode[];
    /**
     * An episode of a TV/radio series or season.
     * @deprecated Consider using http://schema.org/episode instead.
     */
    "episodes"?: Episode | readonly Episode[];
    /** The number of episodes in this season or series. */
    "numberOfEpisodes"?: Integer | readonly Integer[];
    /** The series to which this episode or season belongs. */
    "partOfSeries"?: CreativeWorkSeries | readonly CreativeWorkSeries[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** Position of the season within an ordered group of seasons. */
    "seasonNumber"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A media season e.g. tv, radio, video game etc. */
export declare type CreativeWorkSeason = ({
    "@type": "CreativeWorkSeason";
} & CreativeWorkSeasonBase) | (PodcastSeason | RadioSeason | TVSeason);
declare type CreativeWorkSeriesBase = (CreativeWorkBase & SeriesBase) & {
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication. */
    "issn"?: Text | readonly Text[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
};
/**
 * A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike {@link http://schema.org/ItemList ItemList} which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).
 *
 * Specific subtypes are available for describing {@link http://schema.org/TVSeries TVSeries}, {@link http://schema.org/RadioSeries RadioSeries}, {@link http://schema.org/MovieSeries MovieSeries}, {@link http://schema.org/BookSeries BookSeries}, {@link http://schema.org/Periodical Periodical} and {@link http://schema.org/VideoGameSeries VideoGameSeries}. In each case, the {@link http://schema.org/hasPart hasPart} / {@link http://schema.org/isPartOf isPartOf} properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.
 *
 * It is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.
 */
export declare type CreativeWorkSeries = ({
    "@type": "CreativeWorkSeries";
} & CreativeWorkSeriesBase) | (BookSeries | MovieSeries | Periodical | PodcastSeries | RadioSeries | TVSeries | VideoGameSeries);
declare type CreditCardBase = (LoanOrCreditBase & PaymentCardBase) & {
    /** The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month. */
    "monthlyMinimumRepaymentAmount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
};
/**
 * A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#AmericanExpress
 * - http://purl.org/goodrelations/v1#DinersClub
 * - http://purl.org/goodrelations/v1#Discover
 * - http://purl.org/goodrelations/v1#JCB
 * - http://purl.org/goodrelations/v1#MasterCard
 * - http://purl.org/goodrelations/v1#VISA
 */
export declare type CreditCard = {
    "@type": "CreditCard";
} & CreditCardBase;
declare type CrematoriumBase = CivicStructureBase;
/** A crematorium. */
export declare type Crematorium = ({
    "@type": "Crematorium";
} & CrematoriumBase) | string;
declare type CriticReviewBase = ReviewBase;
/** A {@link http://schema.org/CriticReview CriticReview} is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. {@link http://schema.org/CriticReview CriticReview}s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the {@link http://schema.org/UserReview UserReview} type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources. */
export declare type CriticReview = ({
    "@type": "CriticReview";
} & CriticReviewBase) | ReviewNewsArticle;
declare type CssSelectorTypeBase = Text;
/** Text representing a CSS selector. */
export declare type CssSelectorType = CssSelectorTypeBase;
declare type CurrencyConversionServiceBase = FinancialProductBase;
/** A service to convert funds from one currency to another currency. */
export declare type CurrencyConversionService = {
    "@type": "CurrencyConversionService";
} & CurrencyConversionServiceBase;
declare type DanceEventBase = EventBase;
/** Event type: A social dance. */
export declare type DanceEvent = {
    "@type": "DanceEvent";
} & DanceEventBase;
declare type DanceGroupBase = PerformingGroupBase;
/** A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance. */
export declare type DanceGroup = ({
    "@type": "DanceGroup";
} & DanceGroupBase) | string;
declare type DataCatalogBase = CreativeWorkBase & {
    /** A dataset contained in this catalog. */
    "dataset"?: Dataset | readonly Dataset[];
    /**
     * A technique or technology used in a {@link http://schema.org/Dataset Dataset} (or {@link http://schema.org/DataDownload DataDownload}, {@link http://schema.org/DataCatalog DataCatalog}),corresponding to the method used for measuring the corresponding variable(s) (described using {@link http://schema.org/variableMeasured variableMeasured}). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.
     *
     * For example, if {@link http://schema.org/variableMeasured variableMeasured} is: molecule concentration, {@link http://schema.org/measurementTechnique measurementTechnique} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".
     *
     * If the {@link http://schema.org/variableMeasured variableMeasured} is "depression rating", the {@link http://schema.org/measurementTechnique measurementTechnique} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
     *
     * If there are several {@link http://schema.org/variableMeasured variableMeasured} properties recorded for some given data object, use a {@link http://schema.org/PropertyValue PropertyValue} for each {@link http://schema.org/variableMeasured variableMeasured} and attach the corresponding {@link http://schema.org/measurementTechnique measurementTechnique}.
     */
    "measurementTechnique"?: (Text | URL) | readonly (Text | URL)[];
};
/** A collection of datasets. */
export declare type DataCatalog = {
    "@type": "DataCatalog";
} & DataCatalogBase;
declare type DataDownloadBase = MediaObjectBase & {
    /**
     * A technique or technology used in a {@link http://schema.org/Dataset Dataset} (or {@link http://schema.org/DataDownload DataDownload}, {@link http://schema.org/DataCatalog DataCatalog}),corresponding to the method used for measuring the corresponding variable(s) (described using {@link http://schema.org/variableMeasured variableMeasured}). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.
     *
     * For example, if {@link http://schema.org/variableMeasured variableMeasured} is: molecule concentration, {@link http://schema.org/measurementTechnique measurementTechnique} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".
     *
     * If the {@link http://schema.org/variableMeasured variableMeasured} is "depression rating", the {@link http://schema.org/measurementTechnique measurementTechnique} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
     *
     * If there are several {@link http://schema.org/variableMeasured variableMeasured} properties recorded for some given data object, use a {@link http://schema.org/PropertyValue PropertyValue} for each {@link http://schema.org/variableMeasured variableMeasured} and attach the corresponding {@link http://schema.org/measurementTechnique measurementTechnique}.
     */
    "measurementTechnique"?: (Text | URL) | readonly (Text | URL)[];
};
/** A dataset in downloadable form. */
export declare type DataDownload = {
    "@type": "DataDownload";
} & DataDownloadBase;
declare type DataFeedBase = DatasetBase & {
    /** An item within in a data feed. Data feeds may have many elements. */
    "dataFeedElement"?: (DataFeedItem | Text | Thing) | readonly (DataFeedItem | Text | Thing)[];
};
/** A single feed providing structured information about one or more entities or topics. */
export declare type DataFeed = ({
    "@type": "DataFeed";
} & DataFeedBase) | CompleteDataFeed;
declare type DataFeedItemBase = IntangibleBase & {
    /** The date on which the CreativeWork was created or the item was added to a DataFeed. */
    "dateCreated"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The datetime the item was removed from the DataFeed. */
    "dateDeleted"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed. */
    "dateModified"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’. */
    "item"?: Thing | readonly Thing[];
};
/** A single item within a larger data feed. */
export declare type DataFeedItem = {
    "@type": "DataFeedItem";
} & DataFeedItemBase;
declare type DatasetBase = CreativeWorkBase & {
    /**
     * A data catalog which contains this dataset.
     * @deprecated Consider using http://schema.org/includedInDataCatalog instead.
     */
    "catalog"?: DataCatalog | readonly DataCatalog[];
    /**
     * The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
     * @deprecated Consider using http://schema.org/temporalCoverage instead.
     */
    "datasetTimeInterval"?: DateTime | readonly DateTime[];
    /** A downloadable form of this dataset, at a specific location, in a specific format. */
    "distribution"?: DataDownload | readonly DataDownload[];
    /**
     * A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
     * @deprecated Consider using http://schema.org/includedInDataCatalog instead.
     */
    "includedDataCatalog"?: DataCatalog | readonly DataCatalog[];
    /** A data catalog which contains this dataset. */
    "includedInDataCatalog"?: DataCatalog | readonly DataCatalog[];
    /** The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication. */
    "issn"?: Text | readonly Text[];
    /**
     * A technique or technology used in a {@link http://schema.org/Dataset Dataset} (or {@link http://schema.org/DataDownload DataDownload}, {@link http://schema.org/DataCatalog DataCatalog}),corresponding to the method used for measuring the corresponding variable(s) (described using {@link http://schema.org/variableMeasured variableMeasured}). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.
     *
     * For example, if {@link http://schema.org/variableMeasured variableMeasured} is: molecule concentration, {@link http://schema.org/measurementTechnique measurementTechnique} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".
     *
     * If the {@link http://schema.org/variableMeasured variableMeasured} is "depression rating", the {@link http://schema.org/measurementTechnique measurementTechnique} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
     *
     * If there are several {@link http://schema.org/variableMeasured variableMeasured} properties recorded for some given data object, use a {@link http://schema.org/PropertyValue PropertyValue} for each {@link http://schema.org/variableMeasured variableMeasured} and attach the corresponding {@link http://schema.org/measurementTechnique measurementTechnique}.
     */
    "measurementTechnique"?: (Text | URL) | readonly (Text | URL)[];
    /** The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue. */
    "variableMeasured"?: (PropertyValue | Text) | readonly (PropertyValue | Text)[];
    /** Originally named {@link http://schema.org/variablesMeasured variablesMeasured}, The {@link http://schema.org/variableMeasured variableMeasured} property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue. */
    "variablesMeasured"?: (PropertyValue | Text) | readonly (PropertyValue | Text)[];
};
/** A body of structured information describing some topic(s) of interest. */
export declare type Dataset = ({
    "@type": "Dataset";
} & DatasetBase) | DataFeed;
declare type DatedMoneySpecificationBase = StructuredValueBase & {
    /** The amount of money. */
    "amount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
    /**
     * The currency in which the monetary amount is expressed.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currency"?: Text | readonly Text[];
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
};
/**
 * A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by {@link http://schema.org/MonetaryAmount MonetaryAmount} use of that type is recommended
 * @deprecated Use MonetaryAmount instead.
 */
export declare type DatedMoneySpecification = {
    "@type": "DatedMoneySpecification";
} & DatedMoneySpecificationBase;
declare type DayOfWeekBase = EnumerationBase;
/**
 * The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.
 *
 * Originally, URLs from {@link http://purl.org/goodrelations/v1 GoodRelations} were used (for {@link http://schema.org/Monday Monday}, {@link http://schema.org/Tuesday Tuesday}, {@link http://schema.org/Wednesday Wednesday}, {@link http://schema.org/Thursday Thursday}, {@link http://schema.org/Friday Friday}, {@link http://schema.org/Saturday Saturday}, {@link http://schema.org/Sunday Sunday} plus a special entry for {@link http://schema.org/PublicHolidays PublicHolidays}); these have now been integrated directly into schema.org.
 */
export declare type DayOfWeek = "http://schema.org/Friday" | "http://schema.org/Monday" | "http://schema.org/PublicHolidays" | "http://schema.org/Saturday" | "http://schema.org/Sunday" | "http://schema.org/Thursday" | "http://schema.org/Tuesday" | "http://schema.org/Wednesday" | ({
    "@type": "DayOfWeek";
} & DayOfWeekBase);
export declare const DayOfWeek: {
    /** The day of the week between Thursday and Saturday. */
    Friday: "http://schema.org/Friday";
    /** The day of the week between Sunday and Tuesday. */
    Monday: "http://schema.org/Monday";
    /** This stands for any day that is a public holiday; it is a placeholder for all official public holidays in some particular location. While not technically a "day of the week", it can be used with {@link http://schema.org/OpeningHoursSpecification OpeningHoursSpecification}. In the context of an opening hours specification it can be used to indicate opening hours on public holidays, overriding general opening hours for the day of the week on which a public holiday occurs. */
    PublicHolidays: "http://schema.org/PublicHolidays";
    /** The day of the week between Friday and Sunday. */
    Saturday: "http://schema.org/Saturday";
    /** The day of the week between Saturday and Monday. */
    Sunday: "http://schema.org/Sunday";
    /** The day of the week between Wednesday and Friday. */
    Thursday: "http://schema.org/Thursday";
    /** The day of the week between Monday and Wednesday. */
    Tuesday: "http://schema.org/Tuesday";
    /** The day of the week between Tuesday and Thursday. */
    Wednesday: "http://schema.org/Wednesday";
};
declare type DaySpaBase = HealthAndBeautyBusinessBase;
/** A day spa. */
export declare type DaySpa = ({
    "@type": "DaySpa";
} & DaySpaBase) | string;
declare type DDxElementBase = MedicalIntangibleBase & {
    /** One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process. */
    "diagnosis"?: MedicalCondition | readonly MedicalCondition[];
    /** One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis. */
    "distinguishingSign"?: MedicalSignOrSymptom | readonly MedicalSignOrSymptom[];
};
/** An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it. */
export declare type DDxElement = {
    "@type": "DDxElement";
} & DDxElementBase;
declare type DeactivateActionBase = ControlActionBase;
/** The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight). */
export declare type DeactivateAction = {
    "@type": "DeactivateAction";
} & DeactivateActionBase;
declare type DefenceEstablishmentBase = GovernmentBuildingBase;
/** A defence establishment, such as an army or navy base. */
export declare type DefenceEstablishment = ({
    "@type": "DefenceEstablishment";
} & DefenceEstablishmentBase) | string;
declare type DefinedTermBase = IntangibleBase & {
    /** A {@link http://schema.org/DefinedTermSet DefinedTermSet} that contains this term. */
    "inDefinedTermSet"?: (DefinedTermSet | URL) | readonly (DefinedTermSet | URL)[];
    /** A code that identifies this {@link http://schema.org/DefinedTerm DefinedTerm} within a {@link http://schema.org/DefinedTermSet DefinedTermSet} */
    "termCode"?: Text | readonly Text[];
};
/** A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term. */
export declare type DefinedTerm = ({
    "@type": "DefinedTerm";
} & DefinedTermBase) | CategoryCode;
declare type DefinedTermSetBase = CreativeWorkBase & {
    /** A Defined Term contained in this term set. */
    "hasDefinedTerm"?: DefinedTerm | readonly DefinedTerm[];
};
/** A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration. */
export declare type DefinedTermSet = ({
    "@type": "DefinedTermSet";
} & DefinedTermSetBase) | CategoryCodeSet;
declare type DeleteActionBase = UpdateActionBase;
/** The act of editing a recipient by removing one of its objects. */
export declare type DeleteAction = {
    "@type": "DeleteAction";
} & DeleteActionBase;
declare type DeliveryChargeSpecificationBase = PriceSpecificationBase & {
    /** The delivery method(s) to which the delivery charge or payment charge specification applies. */
    "appliesToDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.
     *
     * See also {@link http://schema.org/ineligibleRegion ineligibleRegion}.
     */
    "eligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.
     *
     * See also {@link http://schema.org/eligibleRegion eligibleRegion}.
     */
    "ineligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
};
/** The price for the delivery of an offer using a particular delivery method. */
export declare type DeliveryChargeSpecification = {
    "@type": "DeliveryChargeSpecification";
} & DeliveryChargeSpecificationBase;
declare type DeliveryEventBase = EventBase & {
    /** Password, PIN, or access code needed for delivery (e.g. from a locker). */
    "accessCode"?: Text | readonly Text[];
    /** When the item is available for pickup from the store, locker, etc. */
    "availableFrom"?: DateTime | readonly DateTime[];
    /** After this date, the item will no longer be available for pickup. */
    "availableThrough"?: DateTime | readonly DateTime[];
    /** Method used for delivery or shipping. */
    "hasDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
};
/** An event involving the delivery of an item. */
export declare type DeliveryEvent = {
    "@type": "DeliveryEvent";
} & DeliveryEventBase;
declare type DeliveryMethodBase = EnumerationBase;
/**
 * A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#DeliveryModeDirectDownload
 * - http://purl.org/goodrelations/v1#DeliveryModeFreight
 * - http://purl.org/goodrelations/v1#DeliveryModeMail
 * - http://purl.org/goodrelations/v1#DeliveryModeOwnFleet
 * - http://purl.org/goodrelations/v1#DeliveryModePickUp
 * - http://purl.org/goodrelations/v1#DHL
 * - http://purl.org/goodrelations/v1#FederalExpress
 * - http://purl.org/goodrelations/v1#UPS
 */
export declare type DeliveryMethod = "http://schema.org/OnSitePickup" | (({
    "@type": "DeliveryMethod";
} & DeliveryMethodBase) | (LockerDelivery | ParcelService));
export declare const DeliveryMethod: {
    /** A DeliveryMethod in which an item is collected on site, e.g. in a store or at a box office. */
    OnSitePickup: "http://schema.org/OnSitePickup";
};
declare type DemandBase = IntangibleBase & {
    /** The payment method(s) accepted by seller for this offer. */
    "acceptedPaymentMethod"?: (LoanOrCredit | PaymentMethod) | readonly (LoanOrCredit | PaymentMethod)[];
    /** The amount of time that is required between accepting the offer and the actual usage of the resource or service. */
    "advanceBookingRequirement"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /** The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc. */
    "availability"?: ItemAvailability | readonly ItemAvailability[];
    /** The end of the availability of the product or service included in the offer. */
    "availabilityEnds"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** The beginning of the availability of the product or service included in the offer. */
    "availabilityStarts"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** The place(s) from which the offer can be obtained (e.g. store locations). */
    "availableAtOrFrom"?: Place | readonly Place[];
    /** The delivery method(s) available for this offer. */
    "availableDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell. */
    "businessFunction"?: BusinessFunction | readonly BusinessFunction[];
    /** The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. */
    "deliveryLeadTime"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The type(s) of customers for which the given offer is valid. */
    "eligibleCustomerType"?: BusinessEntityType | readonly BusinessEntityType[];
    /** The duration for which the given offer is valid. */
    "eligibleDuration"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity. */
    "eligibleQuantity"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.
     *
     * See also {@link http://schema.org/ineligibleRegion ineligibleRegion}.
     */
    "eligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount. */
    "eligibleTransactionVolume"?: PriceSpecification | readonly PriceSpecification[];
    /** A Global Trade Item Number ({@link https://www.gs1.org/standards/id-keys/gtin GTIN}). GTINs identify trade items, including products and services, using numeric identification codes. The {@link http://schema.org/gtin gtin} property generalizes the earlier {@link http://schema.org/gtin8 gtin8}, {@link http://schema.org/gtin12 gtin12}, {@link http://schema.org/gtin13 gtin13}, and {@link http://schema.org/gtin14 gtin14} properties. The GS1 {@link https://www.gs1.org/standards/Digital-Link/ digital link specifications} express GTINs as URLs. A correct {@link http://schema.org/gtin gtin} value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a {@link https://www.gs1.org/services/check-digit-calculator valid GS1 check digit} and meet the other rules for valid GTINs. See also {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1's GTIN Summary} and {@link https://en.wikipedia.org/wiki/Global_Trade_Item_Number Wikipedia} for more details. Left-padding of the gtin values is not required or encouraged. */
    "gtin"?: Text | readonly Text[];
    /** The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin12"?: Text | readonly Text[];
    /** The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin13"?: Text | readonly Text[];
    /** The GTIN-14 code of the product, or the product to which the offer refers. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin14"?: Text | readonly Text[];
    /** The {@link http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx GTIN-8} code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin8"?: Text | readonly Text[];
    /** This links to a node or nodes indicating the exact quantity of the products included in the offer. */
    "includesObject"?: TypeAndQuantityNode | readonly TypeAndQuantityNode[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.
     *
     * See also {@link http://schema.org/eligibleRegion eligibleRegion}.
     */
    "ineligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** The current approximate inventory level for the item or items. */
    "inventoryLevel"?: QuantitativeValue | readonly QuantitativeValue[];
    /** A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer. */
    "itemCondition"?: OfferItemCondition | readonly OfferItemCondition[];
    /** An item being offered (or demanded). The transactional nature of the offer or demand is documented using {@link http://schema.org/businessFunction businessFunction}, e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "itemOffered"?: (AggregateOffer | CreativeWork | Event | MenuItem | Product | Service | Trip) | readonly (AggregateOffer | CreativeWork | Event | MenuItem | Product | Service | Trip)[];
    /** The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers. */
    "mpn"?: Text | readonly Text[];
    /** One or more detailed price specifications, indicating the unit price and delivery or payment charges. */
    "priceSpecification"?: PriceSpecification | readonly PriceSpecification[];
    /** An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider. */
    "seller"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer. */
    "serialNumber"?: Text | readonly Text[];
    /** The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. */
    "sku"?: Text | readonly Text[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The warranty promise(s) included in the offer. */
    "warranty"?: WarrantyPromise | readonly WarrantyPromise[];
};
/** A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply. */
export declare type Demand = {
    "@type": "Demand";
} & DemandBase;
declare type DentistBase = (LocalBusinessBase & MedicalOrganizationBase & MedicalBusinessBase);
/** A dentist. */
export declare type Dentist = ({
    "@type": "Dentist";
} & DentistBase) | string;
declare type DepartActionBase = MoveActionBase;
/** The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants. */
export declare type DepartAction = {
    "@type": "DepartAction";
} & DepartActionBase;
declare type DepartmentStoreBase = StoreBase;
/** A department store. */
export declare type DepartmentStore = ({
    "@type": "DepartmentStore";
} & DepartmentStoreBase) | string;
declare type DepositAccountBase = (InvestmentOrDepositBase & BankAccountBase);
/** A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits. */
export declare type DepositAccount = {
    "@type": "DepositAccount";
} & DepositAccountBase;
declare type DiagnosticLabBase = MedicalOrganizationBase & {
    /** A diagnostic test or procedure offered by this lab. */
    "availableTest"?: MedicalTest | readonly MedicalTest[];
};
/** A medical laboratory that offers on-site or off-site diagnostic services. */
export declare type DiagnosticLab = ({
    "@type": "DiagnosticLab";
} & DiagnosticLabBase) | string;
declare type DiagnosticProcedureBase = MedicalProcedureBase;
/** A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes. */
export declare type DiagnosticProcedure = {
    "@type": "DiagnosticProcedure";
} & DiagnosticProcedureBase;
declare type DietBase = (LifestyleModificationBase & CreativeWorkBase) & {
    /** Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines. */
    "dietFeatures"?: Text | readonly Text[];
    /** People or organizations that endorse the plan. */
    "endorsers"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Medical expert advice related to the plan. */
    "expertConsiderations"?: Text | readonly Text[];
    /** Descriptive information establishing the overarching theory/philosophy of the plan. May include the rationale for the name, the population where the plan first came to prominence, etc. */
    "overview"?: Text | readonly Text[];
    /** Specific physiologic benefits associated to the plan. */
    "physiologicalBenefits"?: Text | readonly Text[];
    /** Specific physiologic risks associated to the diet plan. */
    "risks"?: Text | readonly Text[];
};
/** A strategy of regulating the intake of food to achieve or maintain a specific health-related goal. */
export declare type Diet = {
    "@type": "Diet";
} & DietBase;
declare type DietarySupplementBase = SubstanceBase & {
    /** An active ingredient, typically chemical compounds and/or biologic substances. */
    "activeIngredient"?: Text | readonly Text[];
    /** Descriptive information establishing a historical perspective on the supplement. May include the rationale for the name, the population where the supplement first came to prominence, etc. */
    "background"?: Text | readonly Text[];
    /** True if this item's name is a proprietary/brand name (vs. generic name). */
    "isProprietary"?: Boolean | readonly Boolean[];
    /** The drug or supplement's legal status, including any controlled substance schedules that apply. */
    "legalStatus"?: (DrugLegalStatus | MedicalEnumeration | Text) | readonly (DrugLegalStatus | MedicalEnumeration | Text)[];
    /** The manufacturer of the product. */
    "manufacturer"?: Organization | readonly Organization[];
    /** Recommended intake of this supplement for a given population as defined by a specific recommending authority. */
    "maximumIntake"?: MaximumDoseSchedule | readonly MaximumDoseSchedule[];
    /** The specific biochemical interaction through which this drug or supplement produces its pharmacological effect. */
    "mechanismOfAction"?: Text | readonly Text[];
    /** The generic name of this drug or supplement. */
    "nonProprietaryName"?: Text | readonly Text[];
    /** Proprietary name given to the diet plan, typically by its originator or creator. */
    "proprietaryName"?: Text | readonly Text[];
    /** Recommended intake of this supplement for a given population as defined by a specific recommending authority. */
    "recommendedIntake"?: RecommendedDoseSchedule | readonly RecommendedDoseSchedule[];
    /** Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement. */
    "safetyConsideration"?: Text | readonly Text[];
    /** Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'. */
    "targetPopulation"?: Text | readonly Text[];
};
/** A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites. */
export declare type DietarySupplement = {
    "@type": "DietarySupplement";
} & DietarySupplementBase;
declare type DigitalDocumentBase = CreativeWorkBase & {
    /** A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public". */
    "hasDigitalDocumentPermission"?: DigitalDocumentPermission | readonly DigitalDocumentPermission[];
};
/** An electronic file or document. */
export declare type DigitalDocument = ({
    "@type": "DigitalDocument";
} & DigitalDocumentBase) | (NoteDigitalDocument | PresentationDigitalDocument | SpreadsheetDigitalDocument | TextDigitalDocument);
declare type DigitalDocumentPermissionBase = IntangibleBase & {
    /** The person, organization, contact point, or audience that has been granted this permission. */
    "grantee"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
    /** The type of permission granted the person, organization, or audience. */
    "permissionType"?: DigitalDocumentPermissionType | readonly DigitalDocumentPermissionType[];
};
/** A permission for a particular person or group to access a particular file. */
export declare type DigitalDocumentPermission = {
    "@type": "DigitalDocumentPermission";
} & DigitalDocumentPermissionBase;
declare type DigitalDocumentPermissionTypeBase = EnumerationBase;
/** A type of permission which can be granted for accessing a digital document. */
export declare type DigitalDocumentPermissionType = "http://schema.org/CommentPermission" | "http://schema.org/ReadPermission" | "http://schema.org/WritePermission" | ({
    "@type": "DigitalDocumentPermissionType";
} & DigitalDocumentPermissionTypeBase);
export declare const DigitalDocumentPermissionType: {
    /** Permission to add comments to the document. */
    CommentPermission: "http://schema.org/CommentPermission";
    /** Permission to read or view the document. */
    ReadPermission: "http://schema.org/ReadPermission";
    /** Permission to write or edit the document. */
    WritePermission: "http://schema.org/WritePermission";
};
declare type DisagreeActionBase = ReactActionBase;
/** The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants. */
export declare type DisagreeAction = {
    "@type": "DisagreeAction";
} & DisagreeActionBase;
declare type DiscoverActionBase = FindActionBase;
/** The act of discovering/finding an object. */
export declare type DiscoverAction = {
    "@type": "DiscoverAction";
} & DiscoverActionBase;
declare type DiscussionForumPostingBase = SocialMediaPostingBase;
/** A posting to a discussion forum. */
export declare type DiscussionForumPosting = {
    "@type": "DiscussionForumPosting";
} & DiscussionForumPostingBase;
declare type DislikeActionBase = ReactActionBase;
/** The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants. */
export declare type DislikeAction = {
    "@type": "DislikeAction";
} & DislikeActionBase;
declare type DistanceBase = QuantityBase;
/** Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'. */
export declare type Distance = ({
    "@type": "Distance";
} & DistanceBase) | string;
declare type DistilleryBase = FoodEstablishmentBase;
/** A distillery. */
export declare type Distillery = ({
    "@type": "Distillery";
} & DistilleryBase) | string;
declare type DonateActionBase = TradeActionBase & {
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** The act of providing goods, services, or money without compensation, often for philanthropic reasons. */
export declare type DonateAction = {
    "@type": "DonateAction";
} & DonateActionBase;
declare type DoseScheduleBase = MedicalIntangibleBase & {
    /** The unit of the dose, e.g. 'mg'. */
    "doseUnit"?: Text | readonly Text[];
    /** The value of the dose, e.g. 500. */
    "doseValue"?: (Number | QualitativeValue) | readonly (Number | QualitativeValue)[];
    /** How often the dose is taken, e.g. 'daily'. */
    "frequency"?: Text | readonly Text[];
    /** Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'. */
    "targetPopulation"?: Text | readonly Text[];
};
/** A specific dosing schedule for a drug or supplement. */
export declare type DoseSchedule = ({
    "@type": "DoseSchedule";
} & DoseScheduleBase) | (MaximumDoseSchedule | RecommendedDoseSchedule | ReportedDoseSchedule);
declare type DownloadActionBase = TransferActionBase;
/** The act of downloading an object. */
export declare type DownloadAction = {
    "@type": "DownloadAction";
} & DownloadActionBase;
declare type DrawActionBase = CreateActionBase;
/** The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments. */
export declare type DrawAction = {
    "@type": "DrawAction";
} & DrawActionBase;
declare type DrawingBase = CreativeWorkBase;
/** A picture or diagram made with a pencil, pen, or crayon rather than paint. */
export declare type Drawing = {
    "@type": "Drawing";
} & DrawingBase;
declare type DrinkActionBase = ConsumeActionBase;
/** The act of swallowing liquids. */
export declare type DrinkAction = {
    "@type": "DrinkAction";
} & DrinkActionBase;
declare type DriveWheelConfigurationValueBase = QualitativeValueBase;
/** A value indicating which roadwheels will receive torque. */
export declare type DriveWheelConfigurationValue = "http://schema.org/AllWheelDriveConfiguration" | "http://schema.org/FourWheelDriveConfiguration" | "http://schema.org/FrontWheelDriveConfiguration" | "http://schema.org/RearWheelDriveConfiguration" | ({
    "@type": "DriveWheelConfigurationValue";
} & DriveWheelConfigurationValueBase);
export declare const DriveWheelConfigurationValue: {
    /** All-wheel Drive is a transmission layout where the engine drives all four wheels. */
    AllWheelDriveConfiguration: "http://schema.org/AllWheelDriveConfiguration";
    /** Four-wheel drive is a transmission layout where the engine primarily drives two wheels with a part-time four-wheel drive capability. */
    FourWheelDriveConfiguration: "http://schema.org/FourWheelDriveConfiguration";
    /** Front-wheel drive is a transmission layout where the engine drives the front wheels. */
    FrontWheelDriveConfiguration: "http://schema.org/FrontWheelDriveConfiguration";
    /** Real-wheel drive is a transmission layout where the engine drives the rear wheels. */
    RearWheelDriveConfiguration: "http://schema.org/RearWheelDriveConfiguration";
};
declare type DrugBase = SubstanceBase & {
    /** An active ingredient, typically chemical compounds and/or biologic substances. */
    "activeIngredient"?: Text | readonly Text[];
    /** A route by which this drug may be administered, e.g. 'oral'. */
    "administrationRoute"?: Text | readonly Text[];
    /** Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug. */
    "alcoholWarning"?: Text | readonly Text[];
    /** An available dosage strength for the drug. */
    "availableStrength"?: DrugStrength | readonly DrugStrength[];
    /** Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers. */
    "breastfeedingWarning"?: Text | readonly Text[];
    /**
     * Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
     * @deprecated Consider using http://schema.org/clinicalPharmacology instead.
     */
    "clincalPharmacology"?: Text | readonly Text[];
    /** Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD). */
    "clinicalPharmacology"?: Text | readonly Text[];
    /** Cost per unit of the drug, as reported by the source being tagged. */
    "cost"?: DrugCost | readonly DrugCost[];
    /** A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'. */
    "dosageForm"?: Text | readonly Text[];
    /** A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used. */
    "doseSchedule"?: DoseSchedule | readonly DoseSchedule[];
    /** The class of drug this belongs to (e.g., statins). */
    "drugClass"?: DrugClass | readonly DrugClass[];
    /** The unit in which the drug is measured, e.g. '5 mg tablet'. */
    "drugUnit"?: Text | readonly Text[];
    /** Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug. */
    "foodWarning"?: Text | readonly Text[];
    /** The insurance plans that cover this drug. */
    "includedInHealthInsurancePlan"?: HealthInsurancePlan | readonly HealthInsurancePlan[];
    /** Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications. */
    "interactingDrug"?: Drug | readonly Drug[];
    /** True if the drug is available in a generic form (regardless of name). */
    "isAvailableGenerically"?: Boolean | readonly Boolean[];
    /** True if this item's name is a proprietary/brand name (vs. generic name). */
    "isProprietary"?: Boolean | readonly Boolean[];
    /** Link to the drug's label details. */
    "labelDetails"?: URL | readonly URL[];
    /** The drug or supplement's legal status, including any controlled substance schedules that apply. */
    "legalStatus"?: (DrugLegalStatus | MedicalEnumeration | Text) | readonly (DrugLegalStatus | MedicalEnumeration | Text)[];
    /** The manufacturer of the product. */
    "manufacturer"?: Organization | readonly Organization[];
    /** Recommended intake of this supplement for a given population as defined by a specific recommending authority. */
    "maximumIntake"?: MaximumDoseSchedule | readonly MaximumDoseSchedule[];
    /** The specific biochemical interaction through which this drug or supplement produces its pharmacological effect. */
    "mechanismOfAction"?: Text | readonly Text[];
    /** The generic name of this drug or supplement. */
    "nonProprietaryName"?: Text | readonly Text[];
    /** Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response. */
    "overdosage"?: Text | readonly Text[];
    /** Pregnancy category of this drug. */
    "pregnancyCategory"?: DrugPregnancyCategory | readonly DrugPregnancyCategory[];
    /** Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy. */
    "pregnancyWarning"?: Text | readonly Text[];
    /** Link to prescribing information for the drug. */
    "prescribingInfo"?: URL | readonly URL[];
    /** Indicates the status of drug prescription eg. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc. */
    "prescriptionStatus"?: (DrugPrescriptionStatus | Text) | readonly (DrugPrescriptionStatus | Text)[];
    /** Proprietary name given to the diet plan, typically by its originator or creator. */
    "proprietaryName"?: Text | readonly Text[];
    /** Any other drug related to this one, for example commonly-prescribed alternatives. */
    "relatedDrug"?: Drug | readonly Drug[];
    /** The RxCUI drug identifier from RXNORM. */
    "rxcui"?: Text | readonly Text[];
    /** Any FDA or other warnings about the drug (text or URL). */
    "warning"?: (Text | URL) | readonly (Text | URL)[];
};
/** A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge make a clear difference between them. */
export declare type Drug = {
    "@type": "Drug";
} & DrugBase;
declare type DrugClassBase = MedicalEnumerationBase & {
    /** Specifying a drug or medicine used in a medication procedure */
    "drug"?: Drug | readonly Drug[];
};
/** A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc. */
export declare type DrugClass = {
    "@type": "DrugClass";
} & DrugClassBase;
declare type DrugCostBase = MedicalEnumerationBase & {
    /** The location in which the status applies. */
    "applicableLocation"?: AdministrativeArea | readonly AdministrativeArea[];
    /** The category of cost, such as wholesale, retail, reimbursement cap, etc. */
    "costCategory"?: DrugCostCategory | readonly DrugCostCategory[];
    /** The currency (in 3-letter of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217 */
    "costCurrency"?: Text | readonly Text[];
    /** Additional details to capture the origin of the cost data. For example, 'Medicare Part B'. */
    "costOrigin"?: Text | readonly Text[];
    /** The cost per unit of the drug. */
    "costPerUnit"?: (Number | QualitativeValue | Text) | readonly (Number | QualitativeValue | Text)[];
    /** The unit in which the drug is measured, e.g. '5 mg tablet'. */
    "drugUnit"?: Text | readonly Text[];
};
/** The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup. */
export declare type DrugCost = {
    "@type": "DrugCost";
} & DrugCostBase;
declare type DrugCostCategoryBase = MedicalEnumerationBase;
/** Enumerated categories of medical drug costs. */
export declare type DrugCostCategory = "http://schema.org/ReimbursementCap" | "http://schema.org/Retail" | "http://schema.org/Wholesale" | ({
    "@type": "DrugCostCategory";
} & DrugCostCategoryBase);
export declare const DrugCostCategory: {
    /** The drug's cost represents the maximum reimbursement paid by an insurer for the drug. */
    ReimbursementCap: "http://schema.org/ReimbursementCap";
    /** The drug's cost represents the retail cost of the drug. */
    Retail: "http://schema.org/Retail";
    /** The drug's cost represents the wholesale acquisition cost of the drug. */
    Wholesale: "http://schema.org/Wholesale";
};
declare type DrugLegalStatusBase = MedicalIntangibleBase & {
    /** The location in which the status applies. */
    "applicableLocation"?: AdministrativeArea | readonly AdministrativeArea[];
};
/** The legal availability status of a medical drug. */
export declare type DrugLegalStatus = {
    "@type": "DrugLegalStatus";
} & DrugLegalStatusBase;
declare type DrugPregnancyCategoryBase = MedicalEnumerationBase;
/** Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy. */
export declare type DrugPregnancyCategory = "http://schema.org/FDAcategoryA" | "http://schema.org/FDAcategoryB" | "http://schema.org/FDAcategoryC" | "http://schema.org/FDAcategoryD" | "http://schema.org/FDAcategoryX" | "http://schema.org/FDAnotEvaluated" | ({
    "@type": "DrugPregnancyCategory";
} & DrugPregnancyCategoryBase);
export declare const DrugPregnancyCategory: {
    /** A designation by the US FDA signifying that adequate and well-controlled studies have failed to demonstrate a risk to the fetus in the first trimester of pregnancy (and there is no evidence of risk in later trimesters). */
    FDAcategoryA: "http://schema.org/FDAcategoryA";
    /** A designation by the US FDA signifying that animal reproduction studies have failed to demonstrate a risk to the fetus and there are no adequate and well-controlled studies in pregnant women. */
    FDAcategoryB: "http://schema.org/FDAcategoryB";
    /** A designation by the US FDA signifying that animal reproduction studies have shown an adverse effect on the fetus and there are no adequate and well-controlled studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks. */
    FDAcategoryC: "http://schema.org/FDAcategoryC";
    /** A designation by the US FDA signifying that there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience or studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks. */
    FDAcategoryD: "http://schema.org/FDAcategoryD";
    /** A designation by the US FDA signifying that studies in animals or humans have demonstrated fetal abnormalities and/or there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience, and the risks involved in use of the drug in pregnant women clearly outweigh potential benefits. */
    FDAcategoryX: "http://schema.org/FDAcategoryX";
    /** A designation that the drug in question has not been assigned a pregnancy category designation by the US FDA. */
    FDAnotEvaluated: "http://schema.org/FDAnotEvaluated";
};
declare type DrugPrescriptionStatusBase = MedicalEnumerationBase;
/** Indicates whether this drug is available by prescription or over-the-counter. */
export declare type DrugPrescriptionStatus = "http://schema.org/OTC" | "http://schema.org/PrescriptionOnly" | ({
    "@type": "DrugPrescriptionStatus";
} & DrugPrescriptionStatusBase);
export declare const DrugPrescriptionStatus: {
    /** The character of a medical substance, typically a medicine, of being available over the counter or not. */
    OTC: "http://schema.org/OTC";
    /** Available by prescription only. */
    PrescriptionOnly: "http://schema.org/PrescriptionOnly";
};
declare type DrugStrengthBase = MedicalIntangibleBase & {
    /** An active ingredient, typically chemical compounds and/or biologic substances. */
    "activeIngredient"?: Text | readonly Text[];
    /** The location in which the strength is available. */
    "availableIn"?: AdministrativeArea | readonly AdministrativeArea[];
    /** Recommended intake of this supplement for a given population as defined by a specific recommending authority. */
    "maximumIntake"?: MaximumDoseSchedule | readonly MaximumDoseSchedule[];
    /** The units of an active ingredient's strength, e.g. mg. */
    "strengthUnit"?: Text | readonly Text[];
    /** The value of an active ingredient's strength, e.g. 325. */
    "strengthValue"?: Number | readonly Number[];
};
/** A specific strength in which a medical drug is available in a specific country. */
export declare type DrugStrength = {
    "@type": "DrugStrength";
} & DrugStrengthBase;
declare type DryCleaningOrLaundryBase = LocalBusinessBase;
/** A dry-cleaning business. */
export declare type DryCleaningOrLaundry = ({
    "@type": "DryCleaningOrLaundry";
} & DryCleaningOrLaundryBase) | string;
declare type DurationBase = QuantityBase;
/** Quantity: Duration (use {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}). */
export declare type Duration = ({
    "@type": "Duration";
} & DurationBase) | string;
declare type EatActionBase = ConsumeActionBase;
/** The act of swallowing solid objects. */
export declare type EatAction = {
    "@type": "EatAction";
} & EatActionBase;
declare type EducationalAudienceBase = AudienceBase & {
    /** An educationalRole of an EducationalAudience. */
    "educationalRole"?: Text | readonly Text[];
};
/** An EducationalAudience. */
export declare type EducationalAudience = {
    "@type": "EducationalAudience";
} & EducationalAudienceBase;
declare type EducationalOccupationalCredentialBase = CreativeWorkBase & {
    /** Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity. */
    "competencyRequired"?: (DefinedTerm | Text | URL) | readonly (DefinedTerm | Text | URL)[];
    /** The category or type of credential being described, for example "degree\u201D, \u201Ccertificate\u201D, \u201Cbadge\u201D, or more specific term. */
    "credentialCategory"?: (DefinedTerm | Text | URL) | readonly (DefinedTerm | Text | URL)[];
    /** The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators. */
    "educationalLevel"?: (DefinedTerm | Text | URL) | readonly (DefinedTerm | Text | URL)[];
    /** An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation. */
    "recognizedBy"?: Organization | readonly Organization[];
    /** The duration of validity of a permit or similar thing. */
    "validFor"?: Duration | readonly Duration[];
    /** The geographic area where a permit or similar thing is valid. */
    "validIn"?: AdministrativeArea | readonly AdministrativeArea[];
};
/** An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer. */
export declare type EducationalOccupationalCredential = {
    "@type": "EducationalOccupationalCredential";
} & EducationalOccupationalCredentialBase;
declare type EducationalOccupationalProgramBase = IntangibleBase & {
    /** The date at which the program stops collecting applications for the next enrollment cycle. */
    "applicationDeadline"?: Date | readonly Date[];
    /** The date at which the program begins collecting applications for the next enrollment cycle. */
    "applicationStartDate"?: Date | readonly Date[];
    /** The day of the week for which these opening hours are valid. */
    "dayOfWeek"?: DayOfWeek | readonly DayOfWeek[];
    /** A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program. */
    "educationalCredentialAwarded"?: (EducationalOccupationalCredential | Text | URL) | readonly (EducationalOccupationalCredential | Text | URL)[];
    /** Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ). */
    "educationalProgramMode"?: (Text | URL) | readonly (Text | URL)[];
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** A financial aid type or program which students may use to pay for tuition or fees associated with the program. */
    "financialAidEligible"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
    /** The maximum number of students who may be enrolled in the program. */
    "maximumEnrollment"?: Integer | readonly Integer[];
    /** The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram. */
    "numberOfCredits"?: (Integer | StructuredValue) | readonly (Integer | StructuredValue)[];
    /** A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program. */
    "occupationalCredentialAwarded"?: (EducationalOccupationalCredential | Text | URL) | readonly (EducationalOccupationalCredential | Text | URL)[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** Prerequisites for enrolling in the program. */
    "programPrerequisites"?: (AlignmentObject | Course | EducationalOccupationalCredential | Text) | readonly (AlignmentObject | Course | EducationalOccupationalCredential | Text)[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The expected salary upon completing the training. */
    "salaryUponCompletion"?: MonetaryAmountDistribution | readonly MonetaryAmountDistribution[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term. */
    "termDuration"?: Duration | readonly Duration[];
    /** The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2. */
    "termsPerYear"?: Number | readonly Number[];
    /** The time of day the program normally runs. For example, "evenings". */
    "timeOfDay"?: Text | readonly Text[];
    /** The expected length of time to complete the program if attending full-time. */
    "timeToComplete"?: Duration | readonly Duration[];
    /** The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution. */
    "typicalCreditsPerTerm"?: (Integer | StructuredValue) | readonly (Integer | StructuredValue)[];
};
/** A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree). */
export declare type EducationalOccupationalProgram = ({
    "@type": "EducationalOccupationalProgram";
} & EducationalOccupationalProgramBase) | WorkBasedProgram;
declare type EducationalOrganizationBase = OrganizationBase & {
    /** Alumni of an organization. */
    "alumni"?: Person | readonly Person[];
};
/** An educational organization. */
export declare type EducationalOrganization = ({
    "@type": "EducationalOrganization";
} & EducationalOrganizationBase) | (CollegeOrUniversity | ElementarySchool | HighSchool | MiddleSchool | Preschool | School | string);
declare type EducationEventBase = EventBase;
/** Event type: Education event. */
export declare type EducationEvent = {
    "@type": "EducationEvent";
} & EducationEventBase;
declare type ElectricianBase = HomeAndConstructionBusinessBase;
/** An electrician. */
export declare type Electrician = ({
    "@type": "Electrician";
} & ElectricianBase) | string;
declare type ElectronicsStoreBase = StoreBase;
/** An electronics store. */
export declare type ElectronicsStore = ({
    "@type": "ElectronicsStore";
} & ElectronicsStoreBase) | string;
declare type ElementarySchoolBase = EducationalOrganizationBase;
/** An elementary school. */
export declare type ElementarySchool = ({
    "@type": "ElementarySchool";
} & ElementarySchoolBase) | string;
declare type EmailMessageBase = MessageBase;
/** An email message. */
export declare type EmailMessage = {
    "@type": "EmailMessage";
} & EmailMessageBase;
declare type EmbassyBase = GovernmentBuildingBase;
/** An embassy. */
export declare type Embassy = ({
    "@type": "Embassy";
} & EmbassyBase) | string;
declare type EmergencyServiceBase = LocalBusinessBase;
/** An emergency service, such as a fire station or ER. */
export declare type EmergencyService = ({
    "@type": "EmergencyService";
} & EmergencyServiceBase) | (FireStation | Hospital | PoliceStation | string);
declare type EmployeeRoleBase = OrganizationRoleBase & {
    /** The base salary of the job or of an employee in an EmployeeRole. */
    "baseSalary"?: (MonetaryAmount | Number | PriceSpecification) | readonly (MonetaryAmount | Number | PriceSpecification)[];
    /** The currency (coded using {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217} ) used for the main salary information in this job posting or for this employee. */
    "salaryCurrency"?: Text | readonly Text[];
};
/** A subclass of OrganizationRole used to describe employee relationships. */
export declare type EmployeeRole = {
    "@type": "EmployeeRole";
} & EmployeeRoleBase;
declare type EmployerAggregateRatingBase = AggregateRatingBase;
/** An aggregate rating of an Organization related to its role as an employer. */
export declare type EmployerAggregateRating = {
    "@type": "EmployerAggregateRating";
} & EmployerAggregateRatingBase;
declare type EmployerReviewBase = ReviewBase;
/** An {@link http://schema.org/EmployerReview EmployerReview} is a review of an {@link http://schema.org/Organization Organization} regarding its role as an employer, written by a current or former employee of that organization. */
export declare type EmployerReview = {
    "@type": "EmployerReview";
} & EmployerReviewBase;
declare type EmploymentAgencyBase = LocalBusinessBase;
/** An employment agency. */
export declare type EmploymentAgency = ({
    "@type": "EmploymentAgency";
} & EmploymentAgencyBase) | string;
declare type EndorseActionBase = ReactActionBase & {
    /** A sub property of participant. The person/organization being supported. */
    "endorsee"?: (Organization | Person) | readonly (Organization | Person)[];
};
/** An agent approves/certifies/likes/supports/sanction an object. */
export declare type EndorseAction = {
    "@type": "EndorseAction";
} & EndorseActionBase;
declare type EndorsementRatingBase = RatingBase;
/**
 * An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a"Like" or "+1" on a social network. It can be considered the {@link http://schema.org/result result} of an {@link http://schema.org/EndorseAction EndorseAction} in which the {@link http://schema.org/object object} of the action is rated positively bysome {@link http://schema.org/agent agent}. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the {@link http://schema.org/Action Action}.
 *
 * An {@link http://schema.org/EndorsementRating EndorsementRating} may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
 */
export declare type EndorsementRating = {
    "@type": "EndorsementRating";
} & EndorsementRatingBase;
declare type EnergyBase = QuantityBase;
/** Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'. */
export declare type Energy = ({
    "@type": "Energy";
} & EnergyBase) | string;
declare type EngineSpecificationBase = StructuredValueBase & {
    /**
     * The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement.
     *
     * Typical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches* Note 1: You can link to information about how the given value has been determined using the {@link http://schema.org/valueReference valueReference} property.* Note 2: You can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "engineDisplacement"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The power of the vehicle's engine.    Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)
     *
     * - Note 1: There are many different ways of measuring an engine's power. For an overview, see  {@link http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes}.
     * - Note 2: You can link to information about how the given value has been determined using the {@link http://schema.org/valueReference valueReference} property.
     * - Note 3: You can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "enginePower"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The type of engine or engines powering the vehicle. */
    "engineType"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /** The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle. */
    "fuelType"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /**
     * The torque (turning force) of the vehicle's engine.
     *
     * Typical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch
     *
     * - Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the {@link http://schema.org/valueReference valueReference} property.
     * - Note 2: You can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "torque"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities. */
export declare type EngineSpecification = {
    "@type": "EngineSpecification";
} & EngineSpecificationBase;
declare type EntertainmentBusinessBase = LocalBusinessBase;
/** A business providing entertainment. */
export declare type EntertainmentBusiness = ({
    "@type": "EntertainmentBusiness";
} & EntertainmentBusinessBase) | (AdultEntertainment | AmusementPark | ArtGallery | Casino | ComedyClub | MovieTheater | NightClub | string);
declare type EntryPointBase = IntangibleBase & {
    /** An application that can complete the request. */
    "actionApplication"?: SoftwareApplication | readonly SoftwareApplication[];
    /** The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication. */
    "actionPlatform"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * An application that can complete the request.
     * @deprecated Consider using http://schema.org/actionApplication instead.
     */
    "application"?: SoftwareApplication | readonly SoftwareApplication[];
    /** The supported content type(s) for an EntryPoint response. */
    "contentType"?: Text | readonly Text[];
    /** The supported encoding type(s) for an EntryPoint request. */
    "encodingType"?: Text | readonly Text[];
    /** An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP. */
    "httpMethod"?: Text | readonly Text[];
    /** An url template (RFC6570) that will be used to construct the target of the execution of the action. */
    "urlTemplate"?: Text | readonly Text[];
};
/** An entry point, within some Web-based protocol. */
export declare type EntryPoint = ({
    "@type": "EntryPoint";
} & EntryPointBase) | string;
declare type EnumerationBase = IntangibleBase & {
    /** Relates a term (i.e. a property, class or enumeration) to one that supersedes it. */
    "supersededBy"?: (Class | Enumeration | Property) | readonly (Class | Enumeration | Property)[];
};
/** Lists or enumerations—for example, a list of cuisines or music genres, etc. */
export declare type Enumeration = ({
    "@type": "Enumeration";
} & EnumerationBase) | (ActionStatusType | BoardingPolicyType | BookFormatType | BusinessEntityType | BusinessFunction | ContactPointOption | DayOfWeek | DeliveryMethod | DigitalDocumentPermissionType | EventStatusType | GamePlayMode | GameServerStatus | GenderType | HealthAspectEnumeration | ItemAvailability | ItemListOrderType | LegalForceStatus | LegalValueLevel | MapCategoryType | MedicalEnumeration | MedicalTrialDesign | MerchantReturnEnumeration | MusicAlbumProductionType | MusicAlbumReleaseType | MusicReleaseFormatType | OfferItemCondition | OrderStatus | PaymentMethod | PaymentStatusType | PhysicalActivityCategory | ProductReturnEnumeration | QualitativeValue | RefundTypeEnumeration | ReservationStatusType | RestrictedDiet | ReturnFeesEnumeration | RsvpResponseType | Specialty | WarrantyScope);
declare type EpisodeBase = CreativeWorkBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** Position of the episode within an ordered group of episodes. */
    "episodeNumber"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The season to which this episode belongs. */
    "partOfSeason"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The series to which this episode or season belongs. */
    "partOfSeries"?: CreativeWorkSeries | readonly CreativeWorkSeries[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A media episode (e.g. TV, radio, video game) which can be part of a series or season. */
export declare type Episode = ({
    "@type": "Episode";
} & EpisodeBase) | (PodcastEpisode | RadioEpisode | TVEpisode);
declare type EventBase = ThingBase & {
    /** The subject matter of the content. */
    "about"?: Thing | readonly Thing[];
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** A person or organization attending the event. */
    "attendee"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * A person attending the event.
     * @deprecated Consider using http://schema.org/attendee instead.
     */
    "attendees"?: (Organization | Person) | readonly (Organization | Person)[];
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** The person or organization who wrote a composition, or who is the composer of a work performed at some event. */
    "composer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A secondary contributor to the CreativeWork or Event. */
    "contributor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /** The time admission will commence. */
    "doorTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** Associates an {@link http://schema.org/Event Event} with a {@link http://schema.org/Schedule Schedule}. There are circumstances where it is preferable to share a schedule for a series of      repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly      gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An {@link http://schema.org/Event Event} that      is associated with a {@link http://schema.org/Schedule Schedule} using this property should not have {@link http://schema.org/startDate startDate} or {@link http://schema.org/endDate endDate} properties. These are instead defined within the associated      {@link http://schema.org/Schedule Schedule}, this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months      or seasons. */
    "eventSchedule"?: Schedule | readonly Schedule[];
    /** An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled. */
    "eventStatus"?: EventStatusType | readonly EventStatusType[];
    /** A person or organization that supports (sponsors) something through some kind of financial contribution. */
    "funder"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** A flag to signal that the item, event, or place is accessible for free. */
    "isAccessibleForFree"?: Boolean | readonly Boolean[];
    /** The location of for example where the event is happening, an organization is located, or where an action takes place. */
    "location"?: (Place | PostalAddress | Text) | readonly (Place | PostalAddress | Text)[];
    /** The total number of individuals that may attend an event or venue. */
    "maximumAttendeeCapacity"?: Integer | readonly Integer[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** An organizer of an Event. */
    "organizer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A performer at the event&#x2014;for example, a presenter, musician, musical group or actor. */
    "performer"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
     * @deprecated Consider using http://schema.org/performer instead.
     */
    "performers"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated. */
    "previousStartDate"?: Date | readonly Date[];
    /** The CreativeWork that captured all or part of this Event. */
    "recordedIn"?: CreativeWork | readonly CreativeWork[];
    /** The number of attendee places for an event that remain unallocated. */
    "remainingAttendeeCapacity"?: Integer | readonly Integer[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference. */
    "subEvent"?: Event | readonly Event[];
    /**
     * Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
     * @deprecated Consider using http://schema.org/subEvent instead.
     */
    "subEvents"?: Event | readonly Event[];
    /** An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent. */
    "superEvent"?: Event | readonly Event[];
    /** Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event. */
    "translator"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The typical expected age range, e.g. '7-9', '11-'. */
    "typicalAgeRange"?: Text | readonly Text[];
    /** A work featured in some event, e.g. exhibited in an ExhibitionEvent.       Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent). */
    "workFeatured"?: CreativeWork | readonly CreativeWork[];
    /** A work performed in some event, for example a play performed in a TheaterEvent. */
    "workPerformed"?: CreativeWork | readonly CreativeWork[];
};
/** An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the {@link http://schema.org/offers offers} property. Repeated events may be structured as separate Event objects. */
export declare type Event = ({
    "@type": "Event";
} & EventBase) | (BusinessEvent | ChildrensEvent | ComedyEvent | CourseInstance | DanceEvent | DeliveryEvent | EducationEvent | EventSeries | ExhibitionEvent | Festival | FoodEvent | LiteraryEvent | MusicEvent | PublicationEvent | SaleEvent | ScreeningEvent | SocialEvent | SportsEvent | TheaterEvent | UserInteraction | VisualArtsEvent);
declare type EventReservationBase = ReservationBase;
/**
 * A reservation for an event like a concert, sporting event, or lecture.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {@link http://schema.org/Offer Offer}.
 */
export declare type EventReservation = {
    "@type": "EventReservation";
} & EventReservationBase;
declare type EventSeriesBase = (SeriesBase & EventBase);
/**
 * A series of {@link http://schema.org/Event Event}s. Included events can relate with the series using the {@link http://schema.org/superEvent superEvent} property.
 *
 * An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, whichis repeated regularly. The "2012 London Olympics" can be presented both as an {@link http://schema.org/Event Event} in the series "Olympic Games", and as an{@link http://schema.org/EventSeries EventSeries} that included a number of sporting competitions as Events.
 *
 * The nature of the association between the events in an {@link http://schema.org/EventSeries EventSeries} can vary, but typical examples couldinclude a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.
 *
 * EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context withoutworrying about which kinds of series are really event-like enough to call an Event. In general an EventSeriesmay seem more Event-like when the period of time is compact and when aspects such as location are fixed, butit may also sometimes prove useful to describe a longer-term series as an Event.
 */
export declare type EventSeries = {
    "@type": "EventSeries";
} & EventSeriesBase;
declare type EventStatusTypeBase = EnumerationBase;
/** EventStatusType is an enumeration type whose instances represent several states that an Event may be in. */
export declare type EventStatusType = "http://schema.org/EventCancelled" | "http://schema.org/EventPostponed" | "http://schema.org/EventRescheduled" | "http://schema.org/EventScheduled" | ({
    "@type": "EventStatusType";
} & EventStatusTypeBase);
export declare const EventStatusType: {
    /** The event has been cancelled. If the event has multiple startDate values, all are assumed to be cancelled. Either startDate or previousStartDate may be used to specify the event's cancelled date(s). */
    EventCancelled: "http://schema.org/EventCancelled";
    /** The event has been postponed and no new date has been set. The event's previousStartDate should be set. */
    EventPostponed: "http://schema.org/EventPostponed";
    /** The event has been rescheduled. The event's previousStartDate should be set to the old date and the startDate should be set to the event's new date. (If the event has been rescheduled multiple times, the previousStartDate property may be repeated). */
    EventRescheduled: "http://schema.org/EventRescheduled";
    /** The event is taking place or has taken place on the startDate as scheduled. Use of this value is optional, as it is assumed by default. */
    EventScheduled: "http://schema.org/EventScheduled";
};
declare type EventVenueBase = CivicStructureBase;
/** An event venue. */
export declare type EventVenue = ({
    "@type": "EventVenue";
} & EventVenueBase) | string;
declare type ExchangeRateSpecificationBase = StructuredValueBase & {
    /**
     * The currency in which the monetary amount is expressed.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currency"?: Text | readonly Text[];
    /** The current price of a currency. */
    "currentExchangeRate"?: UnitPriceSpecification | readonly UnitPriceSpecification[];
    /** The difference between the price at which a broker or other intermediary buys and sells foreign currency. */
    "exchangeRateSpread"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
};
/** A structured value representing exchange rate. */
export declare type ExchangeRateSpecification = {
    "@type": "ExchangeRateSpecification";
} & ExchangeRateSpecificationBase;
declare type ExerciseActionBase = PlayActionBase & {
    /**
     * A sub property of location. The course where this action was taken.
     * @deprecated Consider using http://schema.org/exerciseCourse instead.
     */
    "course"?: Place | readonly Place[];
    /** A sub property of instrument. The diet used in this action. */
    "diet"?: Diet | readonly Diet[];
    /** The distance travelled, e.g. exercising or travelling. */
    "distance"?: Distance | readonly Distance[];
    /** A sub property of location. The course where this action was taken. */
    "exerciseCourse"?: Place | readonly Place[];
    /** A sub property of instrument. The exercise plan used on this action. */
    "exercisePlan"?: ExercisePlan | readonly ExercisePlan[];
    /** A sub property of instrument. The diet used in this action. */
    "exerciseRelatedDiet"?: Diet | readonly Diet[];
    /** Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc. */
    "exerciseType"?: Text | readonly Text[];
    /** A sub property of location. The original location of the object or the agent before the action. */
    "fromLocation"?: Place | readonly Place[];
    /** A sub property of participant. The opponent on this action. */
    "opponent"?: Person | readonly Person[];
    /** A sub property of location. The sports activity location where this action occurred. */
    "sportsActivityLocation"?: SportsActivityLocation | readonly SportsActivityLocation[];
    /** A sub property of location. The sports event where this action occurred. */
    "sportsEvent"?: SportsEvent | readonly SportsEvent[];
    /** A sub property of participant. The sports team that participated on this action. */
    "sportsTeam"?: SportsTeam | readonly SportsTeam[];
    /** A sub property of location. The final location of the object or the agent after the action. */
    "toLocation"?: Place | readonly Place[];
};
/** The act of participating in exertive activity for the purposes of improving health and fitness. */
export declare type ExerciseAction = {
    "@type": "ExerciseAction";
} & ExerciseActionBase;
declare type ExerciseGymBase = SportsActivityLocationBase;
/** A gym. */
export declare type ExerciseGym = ({
    "@type": "ExerciseGym";
} & ExerciseGymBase) | string;
declare type ExercisePlanBase = (CreativeWorkBase & PhysicalActivityBase) & {
    /** Length of time to engage in the activity. */
    "activityDuration"?: (Duration | QualitativeValue) | readonly (Duration | QualitativeValue)[];
    /** How often one should engage in the activity. */
    "activityFrequency"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc. */
    "additionalVariable"?: Text | readonly Text[];
    /** Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc. */
    "exerciseType"?: Text | readonly Text[];
    /** Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement. */
    "intensity"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** Number of times one should repeat the activity. */
    "repetitions"?: (Number | QualitativeValue) | readonly (Number | QualitativeValue)[];
    /** How often one should break from the activity. */
    "restPeriods"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure. */
    "workload"?: (Energy | QualitativeValue) | readonly (Energy | QualitativeValue)[];
};
/** Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician. */
export declare type ExercisePlan = {
    "@type": "ExercisePlan";
} & ExercisePlanBase;
declare type ExhibitionEventBase = EventBase;
/** Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ... */
export declare type ExhibitionEvent = {
    "@type": "ExhibitionEvent";
} & ExhibitionEventBase;
declare type FAQPageBase = WebPageBase;
/** A {@link http://schema.org/FAQPage FAQPage} is a {@link http://schema.org/WebPage WebPage} presenting one or more "{@link https://en.wikipedia.org/wiki/FAQ Frequently asked questions}" (see also {@link http://schema.org/QAPage QAPage}). */
export declare type FAQPage = {
    "@type": "FAQPage";
} & FAQPageBase;
declare type FastFoodRestaurantBase = FoodEstablishmentBase;
/** A fast-food restaurant. */
export declare type FastFoodRestaurant = ({
    "@type": "FastFoodRestaurant";
} & FastFoodRestaurantBase) | string;
declare type FestivalBase = EventBase;
/** Event type: Festival. */
export declare type Festival = {
    "@type": "Festival";
} & FestivalBase;
declare type FilmActionBase = CreateActionBase;
/** The act of capturing sound and moving images on film, video, or digitally. */
export declare type FilmAction = {
    "@type": "FilmAction";
} & FilmActionBase;
declare type FinancialProductBase = ServiceBase & {
    /** The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction. */
    "annualPercentageRate"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization. */
    "feesAndCommissionsSpecification"?: (Text | URL) | readonly (Text | URL)[];
    /** The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate. */
    "interestRate"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
};
/** A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry. */
export declare type FinancialProduct = ({
    "@type": "FinancialProduct";
} & FinancialProductBase) | (BankAccount | CurrencyConversionService | InvestmentOrDeposit | LoanOrCredit | PaymentCard | PaymentService);
declare type FinancialServiceBase = LocalBusinessBase & {
    /** Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization. */
    "feesAndCommissionsSpecification"?: (Text | URL) | readonly (Text | URL)[];
};
/** Financial services business. */
export declare type FinancialService = ({
    "@type": "FinancialService";
} & FinancialServiceBase) | (AccountingService | AutomatedTeller | BankOrCreditUnion | InsuranceAgency | string);
declare type FindActionBase = ActionBase;
/**
 * The act of finding an object.
 *
 * Related actions:
 *
 * - {@link http://schema.org/SearchAction SearchAction}: FindAction is generally lead by a SearchAction, but not necessarily.
 */
export declare type FindAction = ({
    "@type": "FindAction";
} & FindActionBase) | (CheckAction | DiscoverAction | TrackAction);
declare type FireStationBase = (EmergencyServiceBase & CivicStructureBase);
/** A fire station. With firemen. */
export declare type FireStation = ({
    "@type": "FireStation";
} & FireStationBase) | string;
declare type FlightBase = TripBase & {
    /** The kind of aircraft (e.g., "Boeing 747"). */
    "aircraft"?: (Text | Vehicle) | readonly (Text | Vehicle)[];
    /** The airport where the flight terminates. */
    "arrivalAirport"?: Airport | readonly Airport[];
    /** Identifier of the flight's arrival gate. */
    "arrivalGate"?: Text | readonly Text[];
    /** Identifier of the flight's arrival terminal. */
    "arrivalTerminal"?: Text | readonly Text[];
    /** The type of boarding policy used by the airline (e.g. zone-based or group-based). */
    "boardingPolicy"?: BoardingPolicyType | readonly BoardingPolicyType[];
    /**
     * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
     * @deprecated Consider using http://schema.org/provider instead.
     */
    "carrier"?: Organization | readonly Organization[];
    /** The airport where the flight originates. */
    "departureAirport"?: Airport | readonly Airport[];
    /** Identifier of the flight's departure gate. */
    "departureGate"?: Text | readonly Text[];
    /** Identifier of the flight's departure terminal. */
    "departureTerminal"?: Text | readonly Text[];
    /** The estimated time the flight will take. */
    "estimatedFlightDuration"?: (Duration | Text) | readonly (Duration | Text)[];
    /** The distance of the flight. */
    "flightDistance"?: (Distance | Text) | readonly (Distance | Text)[];
    /** The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'. */
    "flightNumber"?: Text | readonly Text[];
    /** Description of the meals that will be provided or available for purchase. */
    "mealService"?: Text | readonly Text[];
    /** An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider. */
    "seller"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The time when a passenger can check into the flight online. */
    "webCheckinTime"?: DateTime | readonly DateTime[];
};
/** An airline flight. */
export declare type Flight = {
    "@type": "Flight";
} & FlightBase;
declare type FlightReservationBase = ReservationBase & {
    /** The airline-specific indicator of boarding order / preference. */
    "boardingGroup"?: Text | readonly Text[];
    /** The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority). */
    "passengerPriorityStatus"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** The passenger's sequence number as assigned by the airline. */
    "passengerSequenceNumber"?: Text | readonly Text[];
    /** The type of security screening the passenger is subject to. */
    "securityScreening"?: Text | readonly Text[];
};
/**
 * A reservation for air travel.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {@link http://schema.org/Offer Offer}.
 */
export declare type FlightReservation = {
    "@type": "FlightReservation";
} & FlightReservationBase;
declare type FloatBase = Number;
/** Data type: Floating number. */
export declare type Float = FloatBase;
declare type FloorPlanBase = IntangibleBase & {
    /** Indicates some accommodation that this floor plan describes. */
    "isPlanForApartment"?: Accommodation | readonly Accommodation[];
    /** Indicates the total (available plus unavailable) number of accommodation units in an {@link http://schema.org/ApartmentComplex ApartmentComplex}, or the number of accommodation units for a specific {@link http://schema.org/FloorPlan FloorPlan} (within its specific {@link http://schema.org/ApartmentComplex ApartmentComplex}). See also {@link http://schema.org/numberOfAvailableAccommodationUnits numberOfAvailableAccommodationUnits}. */
    "numberOfAccommodationUnits"?: QuantitativeValue | readonly QuantitativeValue[];
    /** Indicates the number of available accommodation units in an {@link http://schema.org/ApartmentComplex ApartmentComplex}, or the number of accommodation units for a specific {@link http://schema.org/FloorPlan FloorPlan} (within its specific {@link http://schema.org/ApartmentComplex ApartmentComplex}). See also {@link http://schema.org/numberOfAccommodationUnits numberOfAccommodationUnits}. */
    "numberOfAvailableAccommodationUnits"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The total integer number of bathrooms in a some {@link http://schema.org/Accommodation Accommodation}, following real estate conventions as {@link https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field documented in RESO}: "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also {@link http://schema.org/numberOfRooms numberOfRooms}. */
    "numberOfBathroomsTotal"?: Integer | readonly Integer[];
    /** Number of full bathrooms - The total number of full and \u00BE bathrooms in an {@link http://schema.org/Accommodation Accommodation}. This corresponds to the {@link https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field BathroomsFull field in RESO}. */
    "numberOfFullBathrooms"?: Number | readonly Number[];
    /** Number of partial bathrooms - The total number of half and \u00BC bathrooms in an {@link http://schema.org/Accommodation Accommodation}. This corresponds to the {@link https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field BathroomsPartial field in RESO}. */
    "numberOfPartialBathrooms"?: Number | readonly Number[];
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
};
/** A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some {@link http://schema.org/ApartmentComplex ApartmentComplex} has an {@link http://schema.org/accommodationFloorPlan accommodationFloorPlan} which is a {@link http://schema.org/FloorPlan FloorPlan}.  A FloorPlan is always in the context of a particular place, either a larger {@link http://schema.org/ApartmentComplex ApartmentComplex} or a single {@link http://schema.org/Apartment Apartment}. The visual/spatial aspects of a floor plan (i.e. room layout, {@link https://en.wikipedia.org/wiki/Floor_plan see wikipedia}) can be indicated using {@link http://schema.org/image image}. */
export declare type FloorPlan = {
    "@type": "FloorPlan";
} & FloorPlanBase;
declare type FloristBase = StoreBase;
/** A florist. */
export declare type Florist = ({
    "@type": "Florist";
} & FloristBase) | string;
declare type FMRadioChannelBase = RadioChannelBase;
/** A radio channel that uses FM. */
export declare type FMRadioChannel = {
    "@type": "FMRadioChannel";
} & FMRadioChannelBase;
declare type FollowActionBase = InteractActionBase & {
    /** A sub property of object. The person or organization being followed. */
    "followee"?: (Organization | Person) | readonly (Organization | Person)[];
};
/**
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.
 *
 * Related actions:
 *
 * - {@link http://schema.org/BefriendAction BefriendAction}: Unlike BefriendAction, FollowAction implies that the connection is _not_ necessarily reciprocal.
 * - {@link http://schema.org/SubscribeAction SubscribeAction}: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.
 * - {@link http://schema.org/RegisterAction RegisterAction}: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.
 * - {@link http://schema.org/JoinAction JoinAction}: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.
 * - {@link http://schema.org/TrackAction TrackAction}: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
 */
export declare type FollowAction = {
    "@type": "FollowAction";
} & FollowActionBase;
declare type FoodEstablishmentBase = LocalBusinessBase & {
    /** Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings `Yes` or `No`. */
    "acceptsReservations"?: (Boolean | Text | URL) | readonly (Boolean | Text | URL)[];
    /** Either the actual menu as a structured representation, as text, or a URL of the menu. */
    "hasMenu"?: (Menu | Text | URL) | readonly (Menu | Text | URL)[];
    /**
     * Either the actual menu as a structured representation, as text, or a URL of the menu.
     * @deprecated Consider using http://schema.org/hasMenu instead.
     */
    "menu"?: (Menu | Text | URL) | readonly (Menu | Text | URL)[];
    /** The cuisine of the restaurant. */
    "servesCuisine"?: Text | readonly Text[];
    /** An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars). */
    "starRating"?: Rating | readonly Rating[];
};
/** A food-related business. */
export declare type FoodEstablishment = ({
    "@type": "FoodEstablishment";
} & FoodEstablishmentBase) | (Bakery | BarOrPub | Brewery | CafeOrCoffeeShop | Distillery | FastFoodRestaurant | IceCreamShop | Restaurant | Winery | string);
declare type FoodEstablishmentReservationBase = ReservationBase & {
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to _December_. For media, including audio and video, it's the time offset of the end of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "endTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** Number of people the reservation should accommodate. */
    "partySize"?: (Integer | QuantitativeValue) | readonly (Integer | QuantitativeValue)[];
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from _January_ to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "startTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
};
/**
 * A reservation to dine at a food-related business.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 */
export declare type FoodEstablishmentReservation = {
    "@type": "FoodEstablishmentReservation";
} & FoodEstablishmentReservationBase;
declare type FoodEventBase = EventBase;
/** Event type: Food event. */
export declare type FoodEvent = {
    "@type": "FoodEvent";
} & FoodEventBase;
declare type FoodServiceBase = ServiceBase;
/** A food service, like breakfast, lunch, or dinner. */
export declare type FoodService = {
    "@type": "FoodService";
} & FoodServiceBase;
declare type FundingAgencyBase = ProjectBase;
/**
 * A FundingAgency is an organization that implements one or more {@link http://schema.org/FundingScheme FundingScheme}s and manages    the granting process (via {@link http://schema.org/Grant Grant}s, typically {@link http://schema.org/MonetaryGrant MonetaryGrant}s).    A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.
 *
 * ``Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation...``
 */
export declare type FundingAgency = ({
    "@type": "FundingAgency";
} & FundingAgencyBase) | string;
declare type FundingSchemeBase = OrganizationBase;
/** A FundingScheme combines organizational, project and policy aspects of grant-based funding    that sets guidelines, principles and mechanisms to support other kinds of projects and activities.    Funding is typically organized via {@link http://schema.org/Grant Grant} funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - {@link http://schema.org/FundingAgency FundingAgency}s such as ERC, REA, ... */
export declare type FundingScheme = ({
    "@type": "FundingScheme";
} & FundingSchemeBase) | string;
declare type FurnitureStoreBase = StoreBase;
/** A furniture store. */
export declare type FurnitureStore = ({
    "@type": "FurnitureStore";
} & FurnitureStoreBase) | string;
declare type GameBase = CreativeWorkBase & {
    /** A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage). */
    "characterAttribute"?: Thing | readonly Thing[];
    /** An item is an object within the game world that can be collected by a player or, occasionally, a non-player character. */
    "gameItem"?: Thing | readonly Thing[];
    /** Real or fictional location of the game (or part of game). */
    "gameLocation"?: (Place | PostalAddress | URL) | readonly (Place | PostalAddress | URL)[];
    /** Indicate how many people can play this game (minimum, maximum, or range). */
    "numberOfPlayers"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The task that a player-controlled character, or group of characters may complete in order to gain a reward. */
    "quest"?: Thing | readonly Thing[];
};
/** The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting. */
export declare type Game = ({
    "@type": "Game";
} & GameBase) | VideoGame;
declare type GamePlayModeBase = EnumerationBase;
/** Indicates whether this game is multi-player, co-op or single-player. */
export declare type GamePlayMode = "http://schema.org/CoOp" | "http://schema.org/MultiPlayer" | "http://schema.org/SinglePlayer" | ({
    "@type": "GamePlayMode";
} & GamePlayModeBase);
export declare const GamePlayMode: {
    /** Play mode: CoOp. Co-operative games, where you play on the same team with friends. */
    CoOp: "http://schema.org/CoOp";
    /** Play mode: MultiPlayer. Requiring or allowing multiple human players to play simultaneously. */
    MultiPlayer: "http://schema.org/MultiPlayer";
    /** Play mode: SinglePlayer. Which is played by a lone player. */
    SinglePlayer: "http://schema.org/SinglePlayer";
};
declare type GameServerBase = IntangibleBase & {
    /** Video game which is played on this server. */
    "game"?: VideoGame | readonly VideoGame[];
    /** Number of players on the server. */
    "playersOnline"?: Integer | readonly Integer[];
    /** Status of a game server. */
    "serverStatus"?: GameServerStatus | readonly GameServerStatus[];
};
/** Server that provides game interaction in a multiplayer game. */
export declare type GameServer = {
    "@type": "GameServer";
} & GameServerBase;
declare type GameServerStatusBase = EnumerationBase;
/** Status of a game server. */
export declare type GameServerStatus = "http://schema.org/OfflinePermanently" | "http://schema.org/OfflineTemporarily" | "http://schema.org/Online" | "http://schema.org/OnlineFull" | ({
    "@type": "GameServerStatus";
} & GameServerStatusBase);
export declare const GameServerStatus: {
    /** Game server status: OfflinePermanently. Server is offline and not available. */
    OfflinePermanently: "http://schema.org/OfflinePermanently";
    /** Game server status: OfflineTemporarily. Server is offline now but it can be online soon. */
    OfflineTemporarily: "http://schema.org/OfflineTemporarily";
    /** Game server status: Online. Server is available. */
    Online: "http://schema.org/Online";
    /** Game server status: OnlineFull. Server is online but unavailable. The maximum number of players has reached. */
    OnlineFull: "http://schema.org/OnlineFull";
};
declare type GardenStoreBase = StoreBase;
/** A garden store. */
export declare type GardenStore = ({
    "@type": "GardenStore";
} & GardenStoreBase) | string;
declare type GasStationBase = AutomotiveBusinessBase;
/** A gas station. */
export declare type GasStation = ({
    "@type": "GasStation";
} & GasStationBase) | string;
declare type GatedResidenceCommunityBase = ResidenceBase;
/** Residence type: Gated community. */
export declare type GatedResidenceCommunity = ({
    "@type": "GatedResidenceCommunity";
} & GatedResidenceCommunityBase) | string;
declare type GenderTypeBase = EnumerationBase;
/** An enumeration of genders. */
export declare type GenderType = "http://schema.org/Female" | "http://schema.org/Male" | ({
    "@type": "GenderType";
} & GenderTypeBase);
export declare const GenderType: {
    /** The female gender. */
    Female: "http://schema.org/Female";
    /** The male gender. */
    Male: "http://schema.org/Male";
};
declare type GeneralContractorBase = HomeAndConstructionBusinessBase;
/** A general contractor. */
export declare type GeneralContractor = ({
    "@type": "GeneralContractor";
} & GeneralContractorBase) | string;
declare type GeoCircleBase = GeoShapeBase & {
    /** Indicates the GeoCoordinates at the centre of a GeoShape e.g. GeoCircle. */
    "geoMidpoint"?: GeoCoordinates | readonly GeoCoordinates[];
    /** Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation). */
    "geoRadius"?: (Distance | Number | Text) | readonly (Distance | Number | Text)[];
};
/** A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape          it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.          The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'. */
export declare type GeoCircle = {
    "@type": "GeoCircle";
} & GeoCircleBase;
declare type GeoCoordinatesBase = StructuredValueBase & {
    /** Physical address of the item. */
    "address"?: (PostalAddress | Text) | readonly (PostalAddress | Text)[];
    /** The country. For example, USA. You can also provide the two-letter {@link http://en.wikipedia.org/wiki/ISO_3166-1 ISO 3166-1 alpha-2 country code}. */
    "addressCountry"?: (Country | Text) | readonly (Country | Text)[];
    /** The elevation of a location ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters. */
    "elevation"?: (Number | Text) | readonly (Number | Text)[];
    /** The latitude of a location. For example `37.42242` ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). */
    "latitude"?: (Number | Text) | readonly (Number | Text)[];
    /** The longitude of a location. For example `-122.08585` ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). */
    "longitude"?: (Number | Text) | readonly (Number | Text)[];
    /** The postal code. For example, 94043. */
    "postalCode"?: Text | readonly Text[];
};
/** The geographic coordinates of a place or event. */
export declare type GeoCoordinates = {
    "@type": "GeoCoordinates";
} & GeoCoordinatesBase;
declare type GeoShapeBase = StructuredValueBase & {
    /** Physical address of the item. */
    "address"?: (PostalAddress | Text) | readonly (PostalAddress | Text)[];
    /** The country. For example, USA. You can also provide the two-letter {@link http://en.wikipedia.org/wiki/ISO_3166-1 ISO 3166-1 alpha-2 country code}. */
    "addressCountry"?: (Country | Text) | readonly (Country | Text)[];
    /** A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character. */
    "box"?: Text | readonly Text[];
    /** A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters. */
    "circle"?: Text | readonly Text[];
    /** The elevation of a location ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters. */
    "elevation"?: (Number | Text) | readonly (Number | Text)[];
    /** A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space. */
    "line"?: Text | readonly Text[];
    /** A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical. */
    "polygon"?: Text | readonly Text[];
    /** The postal code. For example, 94043. */
    "postalCode"?: Text | readonly Text[];
};
/** The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points. */
export declare type GeoShape = ({
    "@type": "GeoShape";
} & GeoShapeBase) | GeoCircle;
declare type GeospatialGeometryBase = IntangibleBase & {
    /** Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoContains"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCoveredBy"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCovers"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCrosses"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}) */
    "geoDisjoint"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship) */
    "geoEquals"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoIntersects"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoOverlaps"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM} ) */
    "geoTouches"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoWithin"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
};
/** (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices. */
export declare type GeospatialGeometry = {
    "@type": "GeospatialGeometry";
} & GeospatialGeometryBase;
declare type GiveActionBase = TransferActionBase & {
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/**
 * The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.
 *
 * Related actions:
 *
 * - {@link http://schema.org/TakeAction TakeAction}: Reciprocal of GiveAction.
 * - {@link http://schema.org/SendAction SendAction}: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
 */
export declare type GiveAction = {
    "@type": "GiveAction";
} & GiveActionBase;
declare type GolfCourseBase = SportsActivityLocationBase;
/** A golf course. */
export declare type GolfCourse = ({
    "@type": "GolfCourse";
} & GolfCourseBase) | string;
declare type GovernmentBuildingBase = CivicStructureBase;
/** A government building. */
export declare type GovernmentBuilding = ({
    "@type": "GovernmentBuilding";
} & GovernmentBuildingBase) | (CityHall | Courthouse | DefenceEstablishment | Embassy | LegislativeBuilding | string);
declare type GovernmentOfficeBase = LocalBusinessBase;
/** A government office&#x2014;for example, an IRS or DMV office. */
export declare type GovernmentOffice = ({
    "@type": "GovernmentOffice";
} & GovernmentOfficeBase) | (PostOffice | string);
declare type GovernmentOrganizationBase = OrganizationBase;
/** A governmental organization or agency. */
export declare type GovernmentOrganization = ({
    "@type": "GovernmentOrganization";
} & GovernmentOrganizationBase) | string;
declare type GovernmentPermitBase = PermitBase;
/** A permit issued by a government agency. */
export declare type GovernmentPermit = {
    "@type": "GovernmentPermit";
} & GovernmentPermitBase;
declare type GovernmentServiceBase = ServiceBase & {
    /** The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor. */
    "serviceOperator"?: Organization | readonly Organization[];
};
/** A service provided by a government organization, e.g. food stamps, veterans benefits, etc. */
export declare type GovernmentService = {
    "@type": "GovernmentService";
} & GovernmentServiceBase;
declare type GrantBase = IntangibleBase & {
    /** Indicates an item funded or sponsored through a {@link http://schema.org/Grant Grant}. */
    "fundedItem"?: Thing | readonly Thing[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
};
/**
 * A grant, typically financial or otherwise quantifiable, of resources. Typically a {@link http://schema.org/funder funder} sponsors some {@link http://schema.org/MonetaryAmount MonetaryAmount} to an {@link http://schema.org/Organization Organization} or {@link http://schema.org/Person Person},    sometimes not necessarily via a dedicated or long-lived {@link http://schema.org/Project Project}, resulting in one or more outputs, or {@link http://schema.org/fundedItem fundedItem}s. For financial sponsorship, indicate the {@link http://schema.org/funder funder} of a {@link http://schema.org/MonetaryGrant MonetaryGrant}. For non-financial support, indicate {@link http://schema.org/sponsor sponsor} of {@link http://schema.org/Grant Grant}s of resources (e.g. office space).
 *
 * Grants support  activities directed towards some agreed collective goals, often but not always organized as {@link http://schema.org/Project Project}s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.
 *
 * The amount of a {@link http://schema.org/Grant Grant} is represented using {@link http://schema.org/amount amount} as a {@link http://schema.org/MonetaryAmount MonetaryAmount}.
 */
export declare type Grant = ({
    "@type": "Grant";
} & GrantBase) | MonetaryGrant;
declare type GroceryStoreBase = StoreBase;
/** A grocery store. */
export declare type GroceryStore = ({
    "@type": "GroceryStore";
} & GroceryStoreBase) | string;
declare type GuideBase = CreativeWorkBase & {
    /** This Review or Rating is relevant to this part or facet of the itemReviewed. */
    "reviewAspect"?: Text | readonly Text[];
};
/** {@link http://schema.org/Guide Guide} is a page or article that recommend specific products or services, or aspects of a thing for a user to consider. A {@link http://schema.org/Guide Guide} may represent a Buying Guide and detail aspects of products or services for a user to consider. A {@link http://schema.org/Guide Guide} may represent a Product Guide and recommend specific products or services. A {@link http://schema.org/Guide Guide} may represent a Ranked List and recommend specific products or services with ranking. */
export declare type Guide = {
    "@type": "Guide";
} & GuideBase;
declare type HairSalonBase = HealthAndBeautyBusinessBase;
/** A hair salon. */
export declare type HairSalon = ({
    "@type": "HairSalon";
} & HairSalonBase) | string;
declare type HardwareStoreBase = StoreBase;
/** A hardware store. */
export declare type HardwareStore = ({
    "@type": "HardwareStore";
} & HardwareStoreBase) | string;
declare type HealthAndBeautyBusinessBase = LocalBusinessBase;
/** Health and beauty. */
export declare type HealthAndBeautyBusiness = ({
    "@type": "HealthAndBeautyBusiness";
} & HealthAndBeautyBusinessBase) | (BeautySalon | DaySpa | HairSalon | HealthClub | NailSalon | TattooParlor | string);
declare type HealthAspectEnumerationBase = EnumerationBase;
/** HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using {@link http://schema.org/hasHealthAspect hasHealthAspect} and {@link http://schema.org/HealthTopicContent HealthTopicContent}. */
export declare type HealthAspectEnumeration = "http://schema.org/BenefitsHealthAspect" | "http://schema.org/CausesHealthAspect" | "http://schema.org/ContagiousnessHealthAspect" | "http://schema.org/HowOrWhereHealthAspect" | "http://schema.org/LivingWithHealthAspect" | "http://schema.org/MayTreatHealthAspect" | "http://schema.org/MisconceptionsHealthAspect" | "http://schema.org/OverviewHealthAspect" | "http://schema.org/PatientExperienceHealthAspect" | "http://schema.org/PreventionHealthAspect" | "http://schema.org/PrognosisHealthAspect" | "http://schema.org/RelatedTopicsHealthAspect" | "http://schema.org/RisksOrComplicationsHealthAspect" | "http://schema.org/ScreeningHealthAspect" | "http://schema.org/SeeDoctorHealthAspect" | "http://schema.org/SelfCareHealthAspect" | "http://schema.org/SideEffectsHealthAspect" | "http://schema.org/StagesHealthAspect" | "http://schema.org/SymptomsHealthAspect" | "http://schema.org/TreatmentsHealthAspect" | "http://schema.org/TypesHealthAspect" | "http://schema.org/UsageOrScheduleHealthAspect" | ({
    "@type": "HealthAspectEnumeration";
} & HealthAspectEnumerationBase);
export declare const HealthAspectEnumeration: {
    /** Content about the benefits and advantages of usage or utilization of topic. */
    BenefitsHealthAspect: "http://schema.org/BenefitsHealthAspect";
    /** Information about the causes and main actions that gave rise to the topic. */
    CausesHealthAspect: "http://schema.org/CausesHealthAspect";
    /** Content about contagion mechanisms and contagiousness information over the topic. */
    ContagiousnessHealthAspect: "http://schema.org/ContagiousnessHealthAspect";
    /** Information about how or where to find a topic. Also may contain location data that can be used for where to look for help if the topic is observed. */
    HowOrWhereHealthAspect: "http://schema.org/HowOrWhereHealthAspect";
    /** Information about coping or life related to the topic. */
    LivingWithHealthAspect: "http://schema.org/LivingWithHealthAspect";
    /** Related topics may be treated by a Topic. */
    MayTreatHealthAspect: "http://schema.org/MayTreatHealthAspect";
    /** Content about common misconceptions and myths that are related to a topic. */
    MisconceptionsHealthAspect: "http://schema.org/MisconceptionsHealthAspect";
    /** Overview of the content. Contains a summarized view of the topic with the most relevant information for an introduction. */
    OverviewHealthAspect: "http://schema.org/OverviewHealthAspect";
    /** Content about the real life experience of patients or people that have lived a similar experience about the topic. May be forums, topics, Q-and-A and related material. */
    PatientExperienceHealthAspect: "http://schema.org/PatientExperienceHealthAspect";
    /** Information about actions or measures that can be taken to avoid getting the topic or reaching a critical situation related to the topic. */
    PreventionHealthAspect: "http://schema.org/PreventionHealthAspect";
    /** Typical progression and happenings of life course of the topic. */
    PrognosisHealthAspect: "http://schema.org/PrognosisHealthAspect";
    /** Other prominent or relevant topics tied to the main topic. */
    RelatedTopicsHealthAspect: "http://schema.org/RelatedTopicsHealthAspect";
    /** Information about the risk factors and possible complications that may follow a topic. */
    RisksOrComplicationsHealthAspect: "http://schema.org/RisksOrComplicationsHealthAspect";
    /** Content about how to screen or further filter a topic. */
    ScreeningHealthAspect: "http://schema.org/ScreeningHealthAspect";
    /** Information about questions that may be asked, when to see a professional, measures before seeing a doctor or content about the first consultation. */
    SeeDoctorHealthAspect: "http://schema.org/SeeDoctorHealthAspect";
    /** Self care actions or measures that can be taken to sooth, health or avoid a topic. This may be carried at home and can be carried/managed by the person itself. */
    SelfCareHealthAspect: "http://schema.org/SelfCareHealthAspect";
    /** Side effects that can be observed from the usage of the topic. */
    SideEffectsHealthAspect: "http://schema.org/SideEffectsHealthAspect";
    /** Stages that can be observed from a topic. */
    StagesHealthAspect: "http://schema.org/StagesHealthAspect";
    /** Symptoms or related symptoms of a Topic. */
    SymptomsHealthAspect: "http://schema.org/SymptomsHealthAspect";
    /** Treatments or related therapies for a Topic. */
    TreatmentsHealthAspect: "http://schema.org/TreatmentsHealthAspect";
    /** Categorization and other types related to a topic. */
    TypesHealthAspect: "http://schema.org/TypesHealthAspect";
    /** Content about how, when, frequency and dosage of a topic. */
    UsageOrScheduleHealthAspect: "http://schema.org/UsageOrScheduleHealthAspect";
};
declare type HealthClubBase = (HealthAndBeautyBusinessBase & SportsActivityLocationBase);
/** A health club. */
export declare type HealthClub = ({
    "@type": "HealthClub";
} & HealthClubBase) | string;
declare type HealthInsurancePlanBase = IntangibleBase & {
    /** The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation. */
    "benefitsSummaryUrl"?: URL | readonly URL[];
    /** A contact point for a person or organization. */
    "contactPoint"?: ContactPoint | readonly ContactPoint[];
    /** TODO. */
    "healthPlanDrugOption"?: Text | readonly Text[];
    /** The tier(s) of drugs offered by this formulary or insurance plan. */
    "healthPlanDrugTier"?: Text | readonly Text[];
    /** The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.) */
    "healthPlanId"?: Text | readonly Text[];
    /** The URL that goes directly to the plan brochure for the specific standard plan or plan variation. */
    "healthPlanMarketingUrl"?: URL | readonly URL[];
    /** Formularies covered by this plan. */
    "includesHealthPlanFormulary"?: HealthPlanFormulary | readonly HealthPlanFormulary[];
    /** Networks covered by this plan. */
    "includesHealthPlanNetwork"?: HealthPlanNetwork | readonly HealthPlanNetwork[];
    /** The standard for interpreting thePlan ID. The preferred is "HIOS". See the Centers for Medicare &amp; Medicaid Services for more details. */
    "usesHealthPlanIdStandard"?: (Text | URL) | readonly (Text | URL)[];
};
/** A US-style health insurance plan, including PPOs, EPOs, and HMOs. */
export declare type HealthInsurancePlan = {
    "@type": "HealthInsurancePlan";
} & HealthInsurancePlanBase;
declare type HealthPlanCostSharingSpecificationBase = IntangibleBase & {
    /** Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set? */
    "healthPlanCoinsuranceOption"?: Text | readonly Text[];
    /** Whether The rate of coinsurance expressed as a number between 0.0 and 1.0. */
    "healthPlanCoinsuranceRate"?: Number | readonly Number[];
    /** Whether The copay amount. */
    "healthPlanCopay"?: PriceSpecification | readonly PriceSpecification[];
    /** Whether the copay is before or after deductible, etc. TODO: Is this a closed set? */
    "healthPlanCopayOption"?: Text | readonly Text[];
    /** The category or type of pharmacy associated with this cost sharing. */
    "healthPlanPharmacyCategory"?: Text | readonly Text[];
};
/** A description of costs to the patient under a given network or formulary. */
export declare type HealthPlanCostSharingSpecification = {
    "@type": "HealthPlanCostSharingSpecification";
} & HealthPlanCostSharingSpecificationBase;
declare type HealthPlanFormularyBase = IntangibleBase & {
    /** Whether The costs to the patient for services under this network or formulary. */
    "healthPlanCostSharing"?: Boolean | readonly Boolean[];
    /** The tier(s) of drugs offered by this formulary or insurance plan. */
    "healthPlanDrugTier"?: Text | readonly Text[];
    /** Whether prescriptions can be delivered by mail. */
    "offersPrescriptionByMail"?: Boolean | readonly Boolean[];
};
/** For a given health insurance plan, the specification for costs and coverage of prescription drugs. */
export declare type HealthPlanFormulary = {
    "@type": "HealthPlanFormulary";
} & HealthPlanFormularyBase;
declare type HealthPlanNetworkBase = IntangibleBase & {
    /** Whether The costs to the patient for services under this network or formulary. */
    "healthPlanCostSharing"?: Boolean | readonly Boolean[];
    /** Name or unique ID of network. (Networks are often reused across different insurance plans). */
    "healthPlanNetworkId"?: Text | readonly Text[];
    /** The tier(s) for this network. */
    "healthPlanNetworkTier"?: Text | readonly Text[];
};
/** A US-style health insurance plan network. */
export declare type HealthPlanNetwork = {
    "@type": "HealthPlanNetwork";
} & HealthPlanNetworkBase;
declare type HealthTopicContentBase = WebContentBase & {
    /** Indicates the aspect or aspects specifically addressed in some {@link http://schema.org/HealthTopicContent HealthTopicContent}. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects. */
    "hasHealthAspect"?: HealthAspectEnumeration | readonly HealthAspectEnumeration[];
};
/** {@link http://schema.org/HealthTopicContent HealthTopicContent} is {@link http://schema.org/WebContent WebContent} that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of {@link http://schema.org/WebContent WebContent} (and hence {@link http://schema.org/HealthTopicContent HealthTopicContent}) can be related using {@link http://schema.org/hasPart hasPart} / {@link http://schema.org/isPartOf isPartOf} where there is some kind of content hierarchy, and their content described with {@link http://schema.org/about about} and {@link http://schema.org/mentions mentions} e.g. building upon the existing {@link http://schema.org/MedicalCondition MedicalCondition} vocabulary. */
export declare type HealthTopicContent = {
    "@type": "HealthTopicContent";
} & HealthTopicContentBase;
declare type HighSchoolBase = EducationalOrganizationBase;
/** A high school. */
export declare type HighSchool = ({
    "@type": "HighSchool";
} & HighSchoolBase) | string;
declare type HinduTempleBase = PlaceOfWorshipBase;
/** A Hindu temple. */
export declare type HinduTemple = ({
    "@type": "HinduTemple";
} & HinduTempleBase) | string;
declare type HobbyShopBase = StoreBase;
/** A store that sells materials useful or necessary for various hobbies. */
export declare type HobbyShop = ({
    "@type": "HobbyShop";
} & HobbyShopBase) | string;
declare type HomeAndConstructionBusinessBase = LocalBusinessBase;
/**
 * A construction business.
 *
 * A HomeAndConstructionBusiness is a {@link http://schema.org/LocalBusiness LocalBusiness} that provides services around homes and buildings.
 *
 * As a {@link http://schema.org/LocalBusiness LocalBusiness} it can be described as a {@link http://schema.org/provider provider} of one or more {@link http://schema.org/Service Service}(s).
 */
export declare type HomeAndConstructionBusiness = ({
    "@type": "HomeAndConstructionBusiness";
} & HomeAndConstructionBusinessBase) | (Electrician | GeneralContractor | HousePainter | HVACBusiness | Locksmith | MovingCompany | Plumber | RoofingContractor | string);
declare type HomeGoodsStoreBase = StoreBase;
/** A home goods store. */
export declare type HomeGoodsStore = ({
    "@type": "HomeGoodsStore";
} & HomeGoodsStoreBase) | string;
declare type HospitalBase = (CivicStructureBase & MedicalOrganizationBase & EmergencyServiceBase) & {
    /** A medical service available from this provider. */
    "availableService"?: (MedicalProcedure | MedicalTest | MedicalTherapy) | readonly (MedicalProcedure | MedicalTest | MedicalTherapy)[];
    /** A medical specialty of the provider. */
    "medicalSpecialty"?: MedicalSpecialty | readonly MedicalSpecialty[];
};
/** A hospital. */
export declare type Hospital = ({
    "@type": "Hospital";
} & HospitalBase) | string;
declare type HostelBase = LodgingBusinessBase;
/**
 * A hostel - cheap accommodation, often in shared dormitories.
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Hostel = ({
    "@type": "Hostel";
} & HostelBase) | string;
declare type HotelBase = LodgingBusinessBase;
/**
 * A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Hotel = ({
    "@type": "Hotel";
} & HotelBase) | string;
declare type HotelRoomBase = RoomBase & {
    /** The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property. */
    "bed"?: (BedDetails | BedType | Text) | readonly (BedDetails | BedType | Text)[];
    /** The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).Typical unit code(s): C62 for person */
    "occupancy"?: QuantitativeValue | readonly QuantitativeValue[];
};
/**
 * A hotel room is a single room in a hotel.
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type HotelRoom = ({
    "@type": "HotelRoom";
} & HotelRoomBase) | string;
declare type HouseBase = AccommodationBase & {
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
};
/** A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/House http://en.wikipedia.org/wiki/House}). */
export declare type House = ({
    "@type": "House";
} & HouseBase) | (SingleFamilyResidence | string);
declare type HousePainterBase = HomeAndConstructionBusinessBase;
/** A house painting service. */
export declare type HousePainter = ({
    "@type": "HousePainter";
} & HousePainterBase) | string;
declare type HowToBase = CreativeWorkBase & {
    /** The estimated cost of the supply or supplies consumed when performing instructions. */
    "estimatedCost"?: (MonetaryAmount | Text) | readonly (MonetaryAmount | Text)[];
    /** The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "performTime"?: Duration | readonly Duration[];
    /** The length of time it takes to prepare the items to be used in instructions or a direction, in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "prepTime"?: Duration | readonly Duration[];
    /** A single step item (as HowToStep, text, document, video, etc.) or a HowToSection. */
    "step"?: (CreativeWork | HowToSection | HowToStep | Text) | readonly (CreativeWork | HowToSection | HowToStep | Text)[];
    /**
     * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
     * @deprecated Consider using http://schema.org/step instead.
     */
    "steps"?: (CreativeWork | ItemList | Text) | readonly (CreativeWork | ItemList | Text)[];
    /** A sub-property of instrument. A supply consumed when performing instructions or a direction. */
    "supply"?: (HowToSupply | Text) | readonly (HowToSupply | Text)[];
    /** A sub property of instrument. An object used (but not consumed) when performing instructions or a direction. */
    "tool"?: (HowToTool | Text) | readonly (HowToTool | Text)[];
    /** The total time required to perform instructions or a direction (including time to prepare the supplies), in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "totalTime"?: Duration | readonly Duration[];
    /** The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles. */
    "yield"?: (QuantitativeValue | Text) | readonly (QuantitativeValue | Text)[];
};
/** Instructions that explain how to achieve a result by performing a sequence of steps. */
export declare type HowTo = ({
    "@type": "HowTo";
} & HowToBase) | Recipe;
declare type HowToDirectionBase = (ListItemBase & CreativeWorkBase) & {
    /** A media object representing the circumstances after performing this direction. */
    "afterMedia"?: (MediaObject | URL) | readonly (MediaObject | URL)[];
    /** A media object representing the circumstances before performing this direction. */
    "beforeMedia"?: (MediaObject | URL) | readonly (MediaObject | URL)[];
    /** A media object representing the circumstances while performing this direction. */
    "duringMedia"?: (MediaObject | URL) | readonly (MediaObject | URL)[];
    /** The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "performTime"?: Duration | readonly Duration[];
    /** The length of time it takes to prepare the items to be used in instructions or a direction, in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "prepTime"?: Duration | readonly Duration[];
    /** A sub-property of instrument. A supply consumed when performing instructions or a direction. */
    "supply"?: (HowToSupply | Text) | readonly (HowToSupply | Text)[];
    /** A sub property of instrument. An object used (but not consumed) when performing instructions or a direction. */
    "tool"?: (HowToTool | Text) | readonly (HowToTool | Text)[];
    /** The total time required to perform instructions or a direction (including time to prepare the supplies), in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "totalTime"?: Duration | readonly Duration[];
};
/** A direction indicating a single action to do in the instructions for how to achieve a result. */
export declare type HowToDirection = {
    "@type": "HowToDirection";
} & HowToDirectionBase;
declare type HowToItemBase = ListItemBase & {
    /** The required quantity of the item(s). */
    "requiredQuantity"?: (Number | QuantitativeValue | Text) | readonly (Number | QuantitativeValue | Text)[];
};
/** An item used as either a tool or supply when performing the instructions for how to to achieve a result. */
export declare type HowToItem = ({
    "@type": "HowToItem";
} & HowToItemBase) | (HowToSupply | HowToTool);
declare type HowToSectionBase = (CreativeWorkBase & ListItemBase & ItemListBase) & {
    /**
     * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
     * @deprecated Consider using http://schema.org/step instead.
     */
    "steps"?: (CreativeWork | ItemList | Text) | readonly (CreativeWork | ItemList | Text)[];
};
/** A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe). */
export declare type HowToSection = {
    "@type": "HowToSection";
} & HowToSectionBase;
declare type HowToStepBase = (ListItemBase & CreativeWorkBase & ItemListBase);
/** A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items. */
export declare type HowToStep = {
    "@type": "HowToStep";
} & HowToStepBase;
declare type HowToSupplyBase = HowToItemBase & {
    /** The estimated cost of the supply or supplies consumed when performing instructions. */
    "estimatedCost"?: (MonetaryAmount | Text) | readonly (MonetaryAmount | Text)[];
};
/** A supply consumed when performing the instructions for how to achieve a result. */
export declare type HowToSupply = {
    "@type": "HowToSupply";
} & HowToSupplyBase;
declare type HowToTipBase = (CreativeWorkBase & ListItemBase);
/** An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection). */
export declare type HowToTip = {
    "@type": "HowToTip";
} & HowToTipBase;
declare type HowToToolBase = HowToItemBase;
/** A tool used (but not consumed) when performing instructions for how to achieve a result. */
export declare type HowToTool = {
    "@type": "HowToTool";
} & HowToToolBase;
declare type HVACBusinessBase = HomeAndConstructionBusinessBase;
/** A business that provide Heating, Ventilation and Air Conditioning services. */
export declare type HVACBusiness = ({
    "@type": "HVACBusiness";
} & HVACBusinessBase) | string;
declare type IceCreamShopBase = FoodEstablishmentBase;
/** An ice cream shop. */
export declare type IceCreamShop = ({
    "@type": "IceCreamShop";
} & IceCreamShopBase) | string;
declare type IgnoreActionBase = AssessActionBase;
/** The act of intentionally disregarding the object. An agent ignores an object. */
export declare type IgnoreAction = {
    "@type": "IgnoreAction";
} & IgnoreActionBase;
declare type ImageGalleryBase = MediaGalleryBase;
/** Web page type: Image gallery page. */
export declare type ImageGallery = {
    "@type": "ImageGallery";
} & ImageGalleryBase;
declare type ImageObjectBase = MediaObjectBase & {
    /** The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the {@link http://schema.org/encodingFormat encodingFormat}. */
    "caption"?: (MediaObject | Text) | readonly (MediaObject | Text)[];
    /** exif data for this object. */
    "exifData"?: (PropertyValue | Text) | readonly (PropertyValue | Text)[];
    /** Indicates whether this image is representative of the content of the page. */
    "representativeOfPage"?: Boolean | readonly Boolean[];
    /** Thumbnail image for an image or video. */
    "thumbnail"?: ImageObject | readonly ImageObject[];
};
/** An image file. */
export declare type ImageObject = ({
    "@type": "ImageObject";
} & ImageObjectBase) | Barcode;
declare type ImagingTestBase = MedicalTestBase & {
    /** Imaging technique used. */
    "imagingTechnique"?: MedicalImagingTechnique | readonly MedicalImagingTechnique[];
};
/** Any medical imaging modality typically used for diagnostic purposes. */
export declare type ImagingTest = {
    "@type": "ImagingTest";
} & ImagingTestBase;
declare type IndividualProductBase = ProductBase & {
    /** The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer. */
    "serialNumber"?: Text | readonly Text[];
};
/** A single, identifiable product instance (e.g. a laptop with a particular serial number). */
export declare type IndividualProduct = {
    "@type": "IndividualProduct";
} & IndividualProductBase;
declare type InfectiousAgentClassBase = MedicalEnumerationBase;
/** Classes of agents or pathogens that transmit infectious diseases. Enumerated type. */
export declare type InfectiousAgentClass = "http://schema.org/Bacteria" | "http://schema.org/Fungus" | "http://schema.org/MulticellularParasite" | "http://schema.org/Prion" | "http://schema.org/Protozoa" | "http://schema.org/Virus" | ({
    "@type": "InfectiousAgentClass";
} & InfectiousAgentClassBase);
export declare const InfectiousAgentClass: {
    /** Pathogenic bacteria that cause bacterial infection. */
    Bacteria: "http://schema.org/Bacteria";
    /** Pathogenic fungus. */
    Fungus: "http://schema.org/Fungus";
    /** Multicellular parasite that causes an infection. */
    MulticellularParasite: "http://schema.org/MulticellularParasite";
    /** A prion is an infectious agent composed of protein in a misfolded form. */
    Prion: "http://schema.org/Prion";
    /** Single-celled organism that causes an infection. */
    Protozoa: "http://schema.org/Protozoa";
    /** Pathogenic virus that causes viral infection. */
    Virus: "http://schema.org/Virus";
};
declare type InfectiousDiseaseBase = MedicalConditionBase & {
    /** The actual infectious agent, such as a specific bacterium. */
    "infectiousAgent"?: Text | readonly Text[];
    /** The class of infectious agent (bacteria, prion, etc.) that causes the disease. */
    "infectiousAgentClass"?: InfectiousAgentClass | readonly InfectiousAgentClass[];
    /** How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc. */
    "transmissionMethod"?: Text | readonly Text[];
};
/** An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease. */
export declare type InfectiousDisease = {
    "@type": "InfectiousDisease";
} & InfectiousDiseaseBase;
declare type InformActionBase = CommunicateActionBase & {
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
};
/** The act of notifying someone of information pertinent to them, with no expectation of a response. */
export declare type InformAction = ({
    "@type": "InformAction";
} & InformActionBase) | (ConfirmAction | RsvpAction);
declare type InsertActionBase = AddActionBase & {
    /** A sub property of location. The final location of the object or the agent after the action. */
    "toLocation"?: Place | readonly Place[];
};
/** The act of adding at a specific location in an ordered collection. */
export declare type InsertAction = ({
    "@type": "InsertAction";
} & InsertActionBase) | (AppendAction | PrependAction);
declare type InstallActionBase = ConsumeActionBase;
/** The act of installing an application. */
export declare type InstallAction = {
    "@type": "InstallAction";
} & InstallActionBase;
declare type InsuranceAgencyBase = FinancialServiceBase;
/** An Insurance agency. */
export declare type InsuranceAgency = ({
    "@type": "InsuranceAgency";
} & InsuranceAgencyBase) | string;
declare type IntangibleBase = ThingBase;
/** A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc. */
export declare type Intangible = ({
    "@type": "Intangible";
} & IntangibleBase) | (ActionAccessSpecification | AlignmentObject | Audience | BedDetails | Brand | BroadcastChannel | BroadcastFrequencySpecification | Class | ComputerLanguage | DataFeedItem | DefinedTerm | Demand | DigitalDocumentPermission | EducationalOccupationalProgram | EntryPoint | Enumeration | FloorPlan | GameServer | GeospatialGeometry | Grant | HealthInsurancePlan | HealthPlanCostSharingSpecification | HealthPlanFormulary | HealthPlanNetwork | Invoice | ItemList | JobPosting | Language | ListItem | MediaSubscription | MenuItem | MerchantReturnPolicy | Observation | Occupation | Offer | Order | OrderItem | ParcelDelivery | Permit | ProductReturnPolicy | ProgramMembership | Property | PropertyValueSpecification | Quantity | Rating | Reservation | Role | Schedule | Seat | Series | Service | ServiceChannel | SpeakableSpecification | StatisticalPopulation | StructuredValue | Ticket | Trip);
declare type IntegerBase = Number;
/** Data type: Integer. */
export declare type Integer = IntegerBase;
declare type InteractActionBase = ActionBase;
/** The act of interacting with another person or organization. */
export declare type InteractAction = ({
    "@type": "InteractAction";
} & InteractActionBase) | (BefriendAction | CommunicateAction | FollowAction | JoinAction | LeaveAction | MarryAction | RegisterAction | SubscribeAction | UnRegisterAction);
declare type InteractionCounterBase = StructuredValueBase & {
    /** The WebSite or SoftwareApplication where the interactions took place. */
    "interactionService"?: (SoftwareApplication | WebSite) | readonly (SoftwareApplication | WebSite)[];
    /** The Action representing the type of interaction. For up votes, +1s, etc. use {@link http://schema.org/LikeAction LikeAction}. For down votes use {@link http://schema.org/DislikeAction DislikeAction}. Otherwise, use the most specific Action. */
    "interactionType"?: Action | readonly Action[];
    /** The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. */
    "userInteractionCount"?: Integer | readonly Integer[];
};
/** A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction. */
export declare type InteractionCounter = {
    "@type": "InteractionCounter";
} & InteractionCounterBase;
declare type InternetCafeBase = LocalBusinessBase;
/** An internet cafe. */
export declare type InternetCafe = ({
    "@type": "InternetCafe";
} & InternetCafeBase) | string;
declare type InvestmentFundBase = InvestmentOrDepositBase;
/** A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets. */
export declare type InvestmentFund = {
    "@type": "InvestmentFund";
} & InvestmentFundBase;
declare type InvestmentOrDepositBase = FinancialProductBase & {
    /** The amount of money. */
    "amount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
};
/** A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return. */
export declare type InvestmentOrDeposit = ({
    "@type": "InvestmentOrDeposit";
} & InvestmentOrDepositBase) | (BrokerageAccount | DepositAccount | InvestmentFund);
declare type InviteActionBase = CommunicateActionBase & {
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
};
/** The act of asking someone to attend an event. Reciprocal of RsvpAction. */
export declare type InviteAction = {
    "@type": "InviteAction";
} & InviteActionBase;
declare type InvoiceBase = IntangibleBase & {
    /** The identifier for the account the payment will be applied to. */
    "accountId"?: Text | readonly Text[];
    /** The time interval used to compute the invoice. */
    "billingPeriod"?: Duration | readonly Duration[];
    /** An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred. */
    "broker"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /** A number that confirms the given order or payment has been received. */
    "confirmationNumber"?: Text | readonly Text[];
    /** Party placing the order or paying the invoice. */
    "customer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The minimum payment required at this time. */
    "minimumPaymentDue"?: (MonetaryAmount | PriceSpecification) | readonly (MonetaryAmount | PriceSpecification)[];
    /**
     * The date that payment is due.
     * @deprecated Consider using http://schema.org/paymentDueDate instead.
     */
    "paymentDue"?: DateTime | readonly DateTime[];
    /** The date that payment is due. */
    "paymentDueDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The name of the credit card or other method of payment for the order. */
    "paymentMethod"?: PaymentMethod | readonly PaymentMethod[];
    /** An identifier for the method of payment used (e.g. the last 4 digits of the credit card). */
    "paymentMethodId"?: Text | readonly Text[];
    /** The status of payment; whether the invoice has been paid or not. */
    "paymentStatus"?: (PaymentStatusType | Text) | readonly (PaymentStatusType | Text)[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice. */
    "referencesOrder"?: Order | readonly Order[];
    /** The date the invoice is scheduled to be paid. */
    "scheduledPaymentDate"?: Date | readonly Date[];
    /** The total amount due. */
    "totalPaymentDue"?: (MonetaryAmount | PriceSpecification) | readonly (MonetaryAmount | PriceSpecification)[];
};
/** A statement of the money due for goods or services; a bill. */
export declare type Invoice = {
    "@type": "Invoice";
} & InvoiceBase;
declare type ItemAvailabilityBase = EnumerationBase;
/** A list of possible product availability options. */
export declare type ItemAvailability = "http://schema.org/Discontinued" | "http://schema.org/InStock" | "http://schema.org/InStoreOnly" | "http://schema.org/LimitedAvailability" | "http://schema.org/OnlineOnly" | "http://schema.org/OutOfStock" | "http://schema.org/PreOrder" | "http://schema.org/PreSale" | "http://schema.org/SoldOut" | ({
    "@type": "ItemAvailability";
} & ItemAvailabilityBase);
export declare const ItemAvailability: {
    /** Indicates that the item has been discontinued. */
    Discontinued: "http://schema.org/Discontinued";
    /** Indicates that the item is in stock. */
    InStock: "http://schema.org/InStock";
    /** Indicates that the item is available only at physical locations. */
    InStoreOnly: "http://schema.org/InStoreOnly";
    /** Indicates that the item has limited availability. */
    LimitedAvailability: "http://schema.org/LimitedAvailability";
    /** Indicates that the item is available only online. */
    OnlineOnly: "http://schema.org/OnlineOnly";
    /** Indicates that the item is out of stock. */
    OutOfStock: "http://schema.org/OutOfStock";
    /** Indicates that the item is available for pre-order. */
    PreOrder: "http://schema.org/PreOrder";
    /** Indicates that the item is available for ordering and delivery before general availability. */
    PreSale: "http://schema.org/PreSale";
    /** Indicates that the item has sold out. */
    SoldOut: "http://schema.org/SoldOut";
};
declare type ItemListBase = IntangibleBase & {
    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.
     *
     * Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.
     *
     * Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     */
    "itemListElement"?: (ListItem | Text | Thing) | readonly (ListItem | Text | Thing)[];
    /** Type of ordering (e.g. Ascending, Descending, Unordered). */
    "itemListOrder"?: (ItemListOrderType | Text) | readonly (ItemListOrderType | Text)[];
    /** The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list. */
    "numberOfItems"?: Integer | readonly Integer[];
};
/** A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting. */
export declare type ItemList = ({
    "@type": "ItemList";
} & ItemListBase) | (BreadcrumbList | HowToSection | HowToStep | OfferCatalog);
declare type ItemListOrderTypeBase = EnumerationBase;
/** Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized. */
export declare type ItemListOrderType = "http://schema.org/ItemListOrderAscending" | "http://schema.org/ItemListOrderDescending" | "http://schema.org/ItemListUnordered" | ({
    "@type": "ItemListOrderType";
} & ItemListOrderTypeBase);
export declare const ItemListOrderType: {
    /** An ItemList ordered with lower values listed first. */
    ItemListOrderAscending: "http://schema.org/ItemListOrderAscending";
    /** An ItemList ordered with higher values listed first. */
    ItemListOrderDescending: "http://schema.org/ItemListOrderDescending";
    /** An ItemList ordered with no explicit order. */
    ItemListUnordered: "http://schema.org/ItemListUnordered";
};
declare type ItemPageBase = WebPageBase;
/** A page devoted to a single item, such as a particular product or hotel. */
export declare type ItemPage = {
    "@type": "ItemPage";
} & ItemPageBase;
declare type JewelryStoreBase = StoreBase;
/** A jewelry store. */
export declare type JewelryStore = ({
    "@type": "JewelryStore";
} & JewelryStoreBase) | string;
declare type JobPostingBase = IntangibleBase & {
    /** The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements. */
    "applicantLocationRequirements"?: AdministrativeArea | readonly AdministrativeArea[];
    /** Contact details for further information relevant to this job posting. */
    "applicationContact"?: ContactPoint | readonly ContactPoint[];
    /** The base salary of the job or of an employee in an EmployeeRole. */
    "baseSalary"?: (MonetaryAmount | Number | PriceSpecification) | readonly (MonetaryAmount | Number | PriceSpecification)[];
    /**
     * Description of benefits associated with the job.
     * @deprecated Consider using http://schema.org/jobBenefits instead.
     */
    "benefits"?: Text | readonly Text[];
    /** Publication date of an online listing. */
    "datePosted"?: Date | readonly Date[];
    /** Educational background needed for the position or Occupation. */
    "educationRequirements"?: (EducationalOccupationalCredential | Text) | readonly (EducationalOccupationalCredential | Text)[];
    /** A description of the employer, career opportunities and work environment for this position. */
    "employerOverview"?: Text | readonly Text[];
    /** Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship). */
    "employmentType"?: Text | readonly Text[];
    /** Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed. */
    "employmentUnit"?: Organization | readonly Organization[];
    /** An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value. */
    "estimatedSalary"?: (MonetaryAmount | MonetaryAmountDistribution | Number) | readonly (MonetaryAmount | MonetaryAmountDistribution | Number)[];
    /** Description of skills and experience needed for the position or Occupation. */
    "experienceRequirements"?: Text | readonly Text[];
    /** Organization offering the job position. */
    "hiringOrganization"?: Organization | readonly Organization[];
    /** Description of bonus and commission compensation aspects of the job. */
    "incentiveCompensation"?: Text | readonly Text[];
    /**
     * Description of bonus and commission compensation aspects of the job.
     * @deprecated Consider using http://schema.org/incentiveCompensation instead.
     */
    "incentives"?: Text | readonly Text[];
    /** The industry associated with the job position. */
    "industry"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
    /** Description of benefits associated with the job. */
    "jobBenefits"?: Text | readonly Text[];
    /** An indicator as to whether a position is available for an immediate start. */
    "jobImmediateStart"?: Boolean | readonly Boolean[];
    /** A (typically single) geographic location associated with the job position. */
    "jobLocation"?: Place | readonly Place[];
    /** A description of the job location (e.g TELECOMMUTE for telecommute jobs). */
    "jobLocationType"?: Text | readonly Text[];
    /** The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible. */
    "jobStartDate"?: (Date | Text) | readonly (Date | Text)[];
    /**
     * A category describing the job, preferably using a term from a taxonomy such as {@link http://www.onetcenter.org/taxonomy.html BLS O*NET-SOC}, {@link https://www.ilo.org/public/english/bureau/stat/isco/isco08/ ISCO-08} or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.
     *
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     */
    "occupationalCategory"?: (CategoryCode | Text) | readonly (CategoryCode | Text)[];
    /** A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term. */
    "physicalRequirement"?: (DefinedTerm | Text | URL) | readonly (DefinedTerm | Text | URL)[];
    /** Specific qualifications required for this role or Occupation. */
    "qualifications"?: (EducationalOccupationalCredential | Text) | readonly (EducationalOccupationalCredential | Text)[];
    /** The Occupation for the JobPosting. */
    "relevantOccupation"?: Occupation | readonly Occupation[];
    /** Responsibilities associated with this role or Occupation. */
    "responsibilities"?: Text | readonly Text[];
    /** The currency (coded using {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217} ) used for the main salary information in this job posting or for this employee. */
    "salaryCurrency"?: Text | readonly Text[];
    /** A description of any security clearance requirements of the job. */
    "securityClearanceRequirement"?: (Text | URL) | readonly (Text | URL)[];
    /** A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term. */
    "sensoryRequirement"?: (DefinedTerm | Text | URL) | readonly (DefinedTerm | Text | URL)[];
    /** A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation. */
    "skills"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
    /** Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc. */
    "specialCommitments"?: Text | readonly Text[];
    /** The title of the job. */
    "title"?: Text | readonly Text[];
    /** The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known. */
    "totalJobOpenings"?: Integer | readonly Integer[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm). */
    "workHours"?: Text | readonly Text[];
};
/** A listing that describes a job opening in a certain organization. */
export declare type JobPosting = {
    "@type": "JobPosting";
} & JobPostingBase;
declare type JoinActionBase = InteractActionBase & {
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
};
/**
 * An agent joins an event/group with participants/friends at a location.
 *
 * Related actions:
 *
 * - {@link http://schema.org/RegisterAction RegisterAction}: Unlike RegisterAction, JoinAction refers to joining a group/team of people.
 * - {@link http://schema.org/SubscribeAction SubscribeAction}: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.
 * - {@link http://schema.org/FollowAction FollowAction}: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
 */
export declare type JoinAction = {
    "@type": "JoinAction";
} & JoinActionBase;
declare type JointBase = AnatomicalStructureBase & {
    /** The biomechanical properties of the bone. */
    "biomechnicalClass"?: Text | readonly Text[];
    /** The degree of mobility the joint allows. */
    "functionalClass"?: (MedicalEntity | Text) | readonly (MedicalEntity | Text)[];
    /** The name given to how bone physically connects to each other. */
    "structuralClass"?: Text | readonly Text[];
};
/** The anatomical location at which two or more bones make contact. */
export declare type Joint = {
    "@type": "Joint";
} & JointBase;
declare type LakeBodyOfWaterBase = BodyOfWaterBase;
/** A lake (for example, Lake Pontrachain). */
export declare type LakeBodyOfWater = ({
    "@type": "LakeBodyOfWater";
} & LakeBodyOfWaterBase) | string;
declare type LandformBase = PlaceBase;
/** A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins. */
export declare type Landform = ({
    "@type": "Landform";
} & LandformBase) | (BodyOfWater | Continent | Mountain | Volcano | string);
declare type LandmarksOrHistoricalBuildingsBase = PlaceBase;
/** An historical landmark or building. */
export declare type LandmarksOrHistoricalBuildings = ({
    "@type": "LandmarksOrHistoricalBuildings";
} & LandmarksOrHistoricalBuildingsBase) | string;
declare type LanguageBase = IntangibleBase;
/** Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in {@link https://en.wikipedia.org/wiki/IETF_language_tag BCP 47} can be used via the {@link http://schema.org/alternateName alternateName} property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using {@link http://schema.org/ComputerLanguage ComputerLanguage}. */
export declare type Language = {
    "@type": "Language";
} & LanguageBase;
declare type LeaveActionBase = InteractActionBase & {
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
};
/**
 * An agent leaves an event / group with participants/friends at a location.
 *
 * Related actions:
 *
 * - {@link http://schema.org/JoinAction JoinAction}: The antonym of LeaveAction.
 * - {@link http://schema.org/UnRegisterAction UnRegisterAction}: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
 */
export declare type LeaveAction = {
    "@type": "LeaveAction";
} & LeaveActionBase;
declare type LegalForceStatusBase = EnumerationBase;
/** A list of possible statuses for the legal force of a legislation. */
export declare type LegalForceStatus = "http://schema.org/InForce" | "http://schema.org/NotInForce" | "http://schema.org/PartiallyInForce" | ({
    "@type": "LegalForceStatus";
} & LegalForceStatusBase);
export declare const LegalForceStatus: {
    /** Indicates that a legislation is in force. */
    InForce: "http://schema.org/InForce";
    /** Indicates that a legislation is currently not in force. */
    NotInForce: "http://schema.org/NotInForce";
    /** Indicates that parts of the legislation are in force, and parts are not. */
    PartiallyInForce: "http://schema.org/PartiallyInForce";
};
declare type LegalServiceBase = LocalBusinessBase;
/**
 * A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.
 *
 * As a {@link http://schema.org/LocalBusiness LocalBusiness} it can be described as a {@link http://schema.org/provider provider} of one or more {@link http://schema.org/Service Service}(s).
 */
export declare type LegalService = ({
    "@type": "LegalService";
} & LegalServiceBase) | (Attorney | Notary | string);
declare type LegalValueLevelBase = EnumerationBase;
/** A list of possible levels for the legal validity of a legislation. */
export declare type LegalValueLevel = "http://schema.org/AuthoritativeLegalValue" | "http://schema.org/DefinitiveLegalValue" | "http://schema.org/OfficialLegalValue" | "http://schema.org/UnofficialLegalValue" | ({
    "@type": "LegalValueLevel";
} & LegalValueLevelBase);
export declare const LegalValueLevel: {
    /** Indicates that the publisher gives some special status to the publication of the document. ("The Queens Printer" version of a UK Act of Parliament, or the PDF version of a Directive published by the EU Office of Publications). Something "Authoritative" is considered to be also {@link http://schema.org/OfficialLegalValue OfficialLegalValue}". */
    AuthoritativeLegalValue: "http://schema.org/AuthoritativeLegalValue";
    /** Indicates a document for which the text is conclusively what the law says and is legally binding. (e.g. The digitally signed version of an Official Journal.)  Something "Definitive" is considered to be also {@link http://schema.org/AuthoritativeLegalValue AuthoritativeLegalValue}. */
    DefinitiveLegalValue: "http://schema.org/DefinitiveLegalValue";
    /** All the documents published by an official publisher should have at least the legal value level "OfficialLegalValue". This indicates that the document was published by an organisation with the public task of making it available (e.g. a consolidated version of a EU directive published by the EU Office of Publications). */
    OfficialLegalValue: "http://schema.org/OfficialLegalValue";
    /** Indicates that a document has no particular or special standing (e.g. a republication of a law by a private publisher). */
    UnofficialLegalValue: "http://schema.org/UnofficialLegalValue";
};
declare type LegislationBase = CreativeWorkBase & {
    /** Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the {@link /legislationTransposes legislationTransposes} property. For example an informative consolidated law of a European Union's member state "applies" the consolidated version of the European Directive implemented in it. */
    "legislationApplies"?: Legislation | readonly Legislation[];
    /** Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the {@link /legislationConsolidates legislationConsolidates} property. */
    "legislationChanges"?: Legislation | readonly Legislation[];
    /** Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change. */
    "legislationConsolidates"?: Legislation | readonly Legislation[];
    /** The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force. */
    "legislationDate"?: Date | readonly Date[];
    /** The point-in-time at which the provided description of the legislation is valid (e.g. : when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act 2015") */
    "legislationDateVersion"?: Date | readonly Date[];
    /** An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex. */
    "legislationIdentifier"?: (Text | URL) | readonly (Text | URL)[];
    /** The jurisdiction from which the legislation originates. */
    "legislationJurisdiction"?: (AdministrativeArea | Text) | readonly (AdministrativeArea | Text)[];
    /** Whether the legislation is currently in force, not in force, or partially in force. */
    "legislationLegalForce"?: LegalForceStatus | readonly LegalForceStatus[];
    /** The person or organization that originally passed or made the law : typically parliament (for primary legislation) or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical author. */
    "legislationPassedBy"?: (Organization | Person) | readonly (Organization | Person)[];
    /** An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published. */
    "legislationResponsible"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations. */
    "legislationTransposes"?: Legislation | readonly Legislation[];
    /** The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory instrument", "loi organique", "r\u00E8glement grand-ducal", etc., depending on the country. */
    "legislationType"?: (CategoryCode | Text) | readonly (CategoryCode | Text)[];
};
/** A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article). */
export declare type Legislation = ({
    "@type": "Legislation";
} & LegislationBase) | LegislationObject;
declare type LegislationObjectBase = (MediaObjectBase & LegislationBase) & {
    /** The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act. */
    "legislationLegalValue"?: LegalValueLevel | readonly LegalValueLevel[];
};
/** A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version. */
export declare type LegislationObject = {
    "@type": "LegislationObject";
} & LegislationObjectBase;
declare type LegislativeBuildingBase = GovernmentBuildingBase;
/** A legislative building&#x2014;for example, the state capitol. */
export declare type LegislativeBuilding = ({
    "@type": "LegislativeBuilding";
} & LegislativeBuildingBase) | string;
declare type LendActionBase = TransferActionBase & {
    /** A sub property of participant. The person that borrows the object being lent. */
    "borrower"?: Person | readonly Person[];
};
/**
 * The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.
 *
 * Related actions:
 *
 * - {@link http://schema.org/BorrowAction BorrowAction}: Reciprocal of LendAction.
 */
export declare type LendAction = {
    "@type": "LendAction";
} & LendActionBase;
declare type LibraryBase = LocalBusinessBase;
/** A library. */
export declare type Library = ({
    "@type": "Library";
} & LibraryBase) | string;
declare type LibrarySystemBase = OrganizationBase;
/** A {@link http://schema.org/LibrarySystem LibrarySystem} is a collaborative system amongst several libraries. */
export declare type LibrarySystem = ({
    "@type": "LibrarySystem";
} & LibrarySystemBase) | string;
declare type LifestyleModificationBase = MedicalEntityBase;
/** A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition. */
export declare type LifestyleModification = ({
    "@type": "LifestyleModification";
} & LifestyleModificationBase) | (Diet | PhysicalActivity);
declare type LigamentBase = AnatomicalStructureBase;
/** A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints. */
export declare type Ligament = {
    "@type": "Ligament";
} & LigamentBase;
declare type LikeActionBase = ReactActionBase;
/** The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants. */
export declare type LikeAction = {
    "@type": "LikeAction";
} & LikeActionBase;
declare type LinkRoleBase = RoleBase & {
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** Indicates the relationship type of a Web link. */
    "linkRelationship"?: Text | readonly Text[];
};
/** A Role that represents a Web link e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds. */
export declare type LinkRole = {
    "@type": "LinkRole";
} & LinkRoleBase;
declare type LiquorStoreBase = StoreBase;
/** A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits. */
export declare type LiquorStore = ({
    "@type": "LiquorStore";
} & LiquorStoreBase) | string;
declare type ListenActionBase = ConsumeActionBase;
/** The act of consuming audio content. */
export declare type ListenAction = {
    "@type": "ListenAction";
} & ListenActionBase;
declare type ListItemBase = IntangibleBase & {
    /** An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’. */
    "item"?: Thing | readonly Thing[];
    /** A link to the ListItem that follows the current one. */
    "nextItem"?: ListItem | readonly ListItem[];
    /** The position of an item in a series or sequence of items. */
    "position"?: (Integer | Text) | readonly (Integer | Text)[];
    /** A link to the ListItem that preceeds the current one. */
    "previousItem"?: ListItem | readonly ListItem[];
};
/** An list item, e.g. a step in a checklist or how-to description. */
export declare type ListItem = ({
    "@type": "ListItem";
} & ListItemBase) | (HowToDirection | HowToItem | HowToSection | HowToStep | HowToTip);
declare type LiteraryEventBase = EventBase;
/** Event type: Literary event. */
export declare type LiteraryEvent = {
    "@type": "LiteraryEvent";
} & LiteraryEventBase;
declare type LiveBlogPostingBase = BlogPostingBase & {
    /** The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes. */
    "coverageEndTime"?: DateTime | readonly DateTime[];
    /** The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins. */
    "coverageStartTime"?: DateTime | readonly DateTime[];
    /** An update to the LiveBlog. */
    "liveBlogUpdate"?: BlogPosting | readonly BlogPosting[];
};
/** A blog post intended to provide a rolling textual coverage of an ongoing event through continuous updates. */
export declare type LiveBlogPosting = {
    "@type": "LiveBlogPosting";
} & LiveBlogPostingBase;
declare type LoanOrCreditBase = FinancialProductBase & {
    /** The amount of money. */
    "amount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
    /**
     * The currency in which the monetary amount is expressed.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currency"?: Text | readonly Text[];
    /** The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred. */
    "gracePeriod"?: Duration | readonly Duration[];
    /** A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment. */
    "loanRepaymentForm"?: RepaymentSpecification | readonly RepaymentSpecification[];
    /** The duration of the loan or credit agreement. */
    "loanTerm"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The type of a loan or credit. */
    "loanType"?: (Text | URL) | readonly (Text | URL)[];
    /** The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money. */
    "recourseLoan"?: Boolean | readonly Boolean[];
    /** Whether the terms for payment of interest can be renegotiated during the life of the loan. */
    "renegotiableLoan"?: Boolean | readonly Boolean[];
    /** Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.) */
    "requiredCollateral"?: (Text | Thing) | readonly (Text | Thing)[];
};
/** A financial product for the loaning of an amount of money under agreed terms and charges. */
export declare type LoanOrCredit = ({
    "@type": "LoanOrCredit";
} & LoanOrCreditBase) | (CreditCard | MortgageLoan);
declare type LocalBusinessBase = (OrganizationBase & PlaceBase) & {
    /**
     * The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical){@link http://schema.org/branch branch}.
     * @deprecated Consider using http://schema.org/parentOrganization instead.
     */
    "branchOf"?: Organization | readonly Organization[];
    /**
     * The currency accepted.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currenciesAccepted"?: Text | readonly Text[];
    /**
     * The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.
     *
     * - Days are specified using the following two-letter combinations: `Mo`, `Tu`, `We`, `Th`, `Fr`, `Sa`, `Su`.
     * - Times are specified using 24:00 time. For example, 3pm is specified as `15:00`.
     * - Here is an example: `&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;`.
     * - If a business is open 7 days a week, then it can be specified as `&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;`.
     */
    "openingHours"?: Text | readonly Text[];
    /** Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc. */
    "paymentAccepted"?: Text | readonly Text[];
    /** The price range of the business, for example `$$$`. */
    "priceRange"?: Text | readonly Text[];
};
/** A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc. */
export declare type LocalBusiness = ({
    "@type": "LocalBusiness";
} & LocalBusinessBase) | (AnimalShelter | ArchiveOrganization | AutomotiveBusiness | ChildCare | Dentist | DryCleaningOrLaundry | EmergencyService | EmploymentAgency | EntertainmentBusiness | FinancialService | FoodEstablishment | GovernmentOffice | HealthAndBeautyBusiness | HomeAndConstructionBusiness | InternetCafe | LegalService | Library | LodgingBusiness | MedicalBusiness | ProfessionalService | RadioStation | RealEstateAgent | RecyclingCenter | SelfStorage | ShoppingCenter | SportsActivityLocation | Store | TelevisionStation | TouristInformationCenter | TravelAgency | string);
declare type LocationFeatureSpecificationBase = PropertyValueBase & {
    /** The hours during which this service or contact is available. */
    "hoursAvailable"?: OpeningHoursSpecification | readonly OpeningHoursSpecification[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
};
/** Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality. */
export declare type LocationFeatureSpecification = {
    "@type": "LocationFeatureSpecification";
} & LocationFeatureSpecificationBase;
declare type LockerDeliveryBase = DeliveryMethodBase;
/** A DeliveryMethod in which an item is made available via locker. */
export declare type LockerDelivery = {
    "@type": "LockerDelivery";
} & LockerDeliveryBase;
declare type LocksmithBase = HomeAndConstructionBusinessBase;
/** A locksmith. */
export declare type Locksmith = ({
    "@type": "Locksmith";
} & LocksmithBase) | string;
declare type LodgingBusinessBase = LocalBusinessBase & {
    /** An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs. */
    "amenityFeature"?: LocationFeatureSpecification | readonly LocationFeatureSpecification[];
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** A language someone may use with or at the item, service or place. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/inLanguage inLanguage} */
    "availableLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The earliest someone may check into a lodging establishment. */
    "checkinTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The latest someone may check out of a lodging establishment. */
    "checkoutTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value. */
    "petsAllowed"?: (Boolean | Text) | readonly (Boolean | Text)[];
    /** An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars). */
    "starRating"?: Rating | readonly Rating[];
};
/** A lodging business, such as a motel, hotel, or inn. */
export declare type LodgingBusiness = ({
    "@type": "LodgingBusiness";
} & LodgingBusinessBase) | (BedAndBreakfast | Campground | Hostel | Hotel | Motel | Resort | string);
declare type LodgingReservationBase = ReservationBase & {
    /** The earliest someone may check into a lodging establishment. */
    "checkinTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The latest someone may check out of a lodging establishment. */
    "checkoutTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** A full description of the lodging unit. */
    "lodgingUnitDescription"?: Text | readonly Text[];
    /** Textual description of the unit type (including suite vs. room, size of bed, etc.). */
    "lodgingUnitType"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** The number of adults staying in the unit. */
    "numAdults"?: (Integer | QuantitativeValue) | readonly (Integer | QuantitativeValue)[];
    /** The number of children staying in the unit. */
    "numChildren"?: (Integer | QuantitativeValue) | readonly (Integer | QuantitativeValue)[];
};
/**
 * A reservation for lodging at a hotel, motel, inn, etc.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 */
export declare type LodgingReservation = {
    "@type": "LodgingReservation";
} & LodgingReservationBase;
declare type LoseActionBase = AchieveActionBase & {
    /** A sub property of participant. The winner of the action. */
    "winner"?: Person | readonly Person[];
};
/** The act of being defeated in a competitive activity. */
export declare type LoseAction = {
    "@type": "LoseAction";
} & LoseActionBase;
declare type LymphaticVesselBase = VesselBase & {
    /** The vasculature the lymphatic structure originates, or afferents, from. */
    "originatesFrom"?: Vessel | readonly Vessel[];
    /** The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ. */
    "regionDrained"?: (AnatomicalStructure | AnatomicalSystem) | readonly (AnatomicalStructure | AnatomicalSystem)[];
    /** The vasculature the lymphatic structure runs, or efferents, to. */
    "runsTo"?: Vessel | readonly Vessel[];
};
/** A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart. */
export declare type LymphaticVessel = {
    "@type": "LymphaticVessel";
} & LymphaticVesselBase;
declare type ManuscriptBase = CreativeWorkBase;
/** A book, document, or piece of music written by hand rather than typed or printed. */
export declare type Manuscript = {
    "@type": "Manuscript";
} & ManuscriptBase;
declare type MapBase = CreativeWorkBase & {
    /** Indicates the kind of Map, from the MapCategoryType Enumeration. */
    "mapType"?: MapCategoryType | readonly MapCategoryType[];
};
/** A map. */
export declare type Map = {
    "@type": "Map";
} & MapBase;
declare type MapCategoryTypeBase = EnumerationBase;
/** An enumeration of several kinds of Map. */
export declare type MapCategoryType = "http://schema.org/ParkingMap" | "http://schema.org/SeatingMap" | "http://schema.org/TransitMap" | "http://schema.org/VenueMap" | ({
    "@type": "MapCategoryType";
} & MapCategoryTypeBase);
export declare const MapCategoryType: {
    /** A parking map. */
    ParkingMap: "http://schema.org/ParkingMap";
    /** A seating map. */
    SeatingMap: "http://schema.org/SeatingMap";
    /** A transit map. */
    TransitMap: "http://schema.org/TransitMap";
    /** A venue map (e.g. for malls, auditoriums, museums, etc.). */
    VenueMap: "http://schema.org/VenueMap";
};
declare type MarryActionBase = InteractActionBase;
/** The act of marrying a person. */
export declare type MarryAction = {
    "@type": "MarryAction";
} & MarryActionBase;
declare type MassBase = QuantityBase;
/** Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'. */
export declare type Mass = ({
    "@type": "Mass";
} & MassBase) | string;
declare type MaximumDoseScheduleBase = DoseScheduleBase;
/** The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity. */
export declare type MaximumDoseSchedule = {
    "@type": "MaximumDoseSchedule";
} & MaximumDoseScheduleBase;
declare type MediaGalleryBase = CollectionPageBase;
/** Web page type: Media gallery page. A mixed-media page that can contains media such as images, videos, and other multimedia. */
export declare type MediaGallery = ({
    "@type": "MediaGallery";
} & MediaGalleryBase) | (ImageGallery | VideoGallery);
declare type MediaObjectBase = CreativeWorkBase & {
    /** A NewsArticle associated with the Media Object. */
    "associatedArticle"?: NewsArticle | readonly NewsArticle[];
    /** The bitrate of the media object. */
    "bitrate"?: Text | readonly Text[];
    /** File size in (mega/kilo) bytes. */
    "contentSize"?: Text | readonly Text[];
    /** Actual bytes of the media object, for example the image file or video file. */
    "contentUrl"?: URL | readonly URL[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** A URL pointing to a player for a specific video. In general, this is the information in the `src` element of an `embed` tag and should not be the same as the content of the `loc` tag. */
    "embedUrl"?: URL | readonly URL[];
    /** The CreativeWork encoded by this media object. */
    "encodesCreativeWork"?: CreativeWork | readonly CreativeWork[];
    /**
     * Media type typically expressed using a MIME format (see {@link http://www.iana.org/assignments/media-types/media-types.xhtml IANA site} and {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types MDN reference}) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     *
     * In cases where a {@link http://schema.org/CreativeWork CreativeWork} has several media type representations, {@link http://schema.org/encoding encoding} can be used to indicate each {@link http://schema.org/MediaObject MediaObject} alongside particular {@link http://schema.org/encodingFormat encodingFormat} information.
     *
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     */
    "encodingFormat"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to _December_. For media, including audio and video, it's the time offset of the end of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "endTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The height of the item. */
    "height"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** Player type required&#x2014;for example, Flash or Silverlight. */
    "playerType"?: Text | readonly Text[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in {@link http://en.wikipedia.org/wiki/ISO_3166 ISO 3166 format}. */
    "regionsAllowed"?: Place | readonly Place[];
    /** Indicates if use of the media require a subscription  (either paid or free). Allowed values are `true` or `false` (note that an earlier version had 'yes', 'no'). */
    "requiresSubscription"?: (Boolean | MediaSubscription) | readonly (Boolean | MediaSubscription)[];
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from _January_ to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.
     *
     * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     */
    "startTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** Date when this media object was uploaded to this site. */
    "uploadDate"?: Date | readonly Date[];
    /** The width of the item. */
    "width"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
};
/** A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's). */
export declare type MediaObject = ({
    "@type": "MediaObject";
} & MediaObjectBase) | (AudioObject | DataDownload | ImageObject | LegislationObject | MusicVideoObject | VideoObject);
declare type MediaSubscriptionBase = IntangibleBase & {
    /** The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media. */
    "authenticator"?: Organization | readonly Organization[];
    /** An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it. */
    "expectsAcceptanceOf"?: Offer | readonly Offer[];
};
/** A subscription which allows a user to access media including audio, video, books, etc. */
export declare type MediaSubscription = {
    "@type": "MediaSubscription";
} & MediaSubscriptionBase;
declare type MedicalAudienceBase = (AudienceBase & MedicalEnumerationBase & PeopleAudienceBase);
/** Target audiences for medical web pages. Enumerated type. */
export declare type MedicalAudience = "http://schema.org/Clinician" | "http://schema.org/MedicalResearcher" | (({
    "@type": "MedicalAudience";
} & MedicalAudienceBase) | Patient);
export declare const MedicalAudience: {
    /** Medical clinicians, including practicing physicians and other medical professionals involved in clinical practice. */
    Clinician: "http://schema.org/Clinician";
    /** Medical researchers. */
    MedicalResearcher: "http://schema.org/MedicalResearcher";
};
declare type MedicalBusinessBase = LocalBusinessBase;
/** A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include differents business run by health professionals. */
export declare type MedicalBusiness = ({
    "@type": "MedicalBusiness";
} & MedicalBusinessBase) | (Dentist | MedicalClinic | Optician | Pharmacy | Physician | string);
declare type MedicalCauseBase = MedicalEntityBase & {
    /** The condition, complication, symptom, sign, etc. caused. */
    "causeOf"?: MedicalEntity | readonly MedicalEntity[];
};
/** The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well. */
export declare type MedicalCause = {
    "@type": "MedicalCause";
} & MedicalCauseBase;
declare type MedicalClinicBase = (MedicalBusinessBase & MedicalOrganizationBase) & {
    /** A medical service available from this provider. */
    "availableService"?: (MedicalProcedure | MedicalTest | MedicalTherapy) | readonly (MedicalProcedure | MedicalTest | MedicalTherapy)[];
    /** A medical specialty of the provider. */
    "medicalSpecialty"?: MedicalSpecialty | readonly MedicalSpecialty[];
};
/** A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well. */
export declare type MedicalClinic = ({
    "@type": "MedicalClinic";
} & MedicalClinicBase) | string;
declare type MedicalCodeBase = (CategoryCodeBase & MedicalIntangibleBase) & {
    /** A short textual code that uniquely identifies the value. */
    "codeValue"?: Text | readonly Text[];
    /** The coding system, e.g. 'ICD-10'. */
    "codingSystem"?: Text | readonly Text[];
};
/** A code for a medical entity. */
export declare type MedicalCode = {
    "@type": "MedicalCode";
} & MedicalCodeBase;
declare type MedicalConditionBase = MedicalEntityBase & {
    /** The anatomy of the underlying organ system or structures associated with this entity. */
    "associatedAnatomy"?: (AnatomicalStructure | AnatomicalSystem | SuperficialAnatomy) | readonly (AnatomicalStructure | AnatomicalSystem | SuperficialAnatomy)[];
    /** Specifying a cause of something in general. e.g in medicine , one of the causative agent(s) that are most directly responsible for the pathophysiologic process that eventually results in the occurrence. */
    "cause"?: MedicalCause | readonly MedicalCause[];
    /** One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient. */
    "differentialDiagnosis"?: DDxElement | readonly DDxElement[];
    /** Specifying a drug or medicine used in a medication procedure */
    "drug"?: Drug | readonly Drug[];
    /** The characteristics of associated patients, such as age, gender, race etc. */
    "epidemiology"?: Text | readonly Text[];
    /** The likely outcome in either the short term or long term of the medical condition. */
    "expectedPrognosis"?: Text | readonly Text[];
    /** The expected progression of the condition if it is not treated and allowed to progress naturally. */
    "naturalProgression"?: Text | readonly Text[];
    /** Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition. */
    "pathophysiology"?: Text | readonly Text[];
    /** A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc. */
    "possibleComplication"?: Text | readonly Text[];
    /** A possible treatment to address this condition, sign or symptom. */
    "possibleTreatment"?: MedicalTherapy | readonly MedicalTherapy[];
    /** A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination. */
    "primaryPrevention"?: MedicalTherapy | readonly MedicalTherapy[];
    /** A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition. */
    "riskFactor"?: MedicalRiskFactor | readonly MedicalRiskFactor[];
    /** A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition. */
    "secondaryPrevention"?: MedicalTherapy | readonly MedicalTherapy[];
    /** A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition. */
    "signOrSymptom"?: MedicalSignOrSymptom | readonly MedicalSignOrSymptom[];
    /** The stage of the condition, if applicable. */
    "stage"?: MedicalConditionStage | readonly MedicalConditionStage[];
    /** The status of the study (enumerated). */
    "status"?: (EventStatusType | MedicalStudyStatus | Text) | readonly (EventStatusType | MedicalStudyStatus | Text)[];
    /** A more specific type of the condition, where applicable, for example 'Type 1 Diabetes', 'Type 2 Diabetes', or 'Gestational Diabetes' for Diabetes. */
    "subtype"?: Text | readonly Text[];
    /** A medical test typically performed given this condition. */
    "typicalTest"?: MedicalTest | readonly MedicalTest[];
};
/** Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc. */
export declare type MedicalCondition = ({
    "@type": "MedicalCondition";
} & MedicalConditionBase) | (InfectiousDisease | MedicalSignOrSymptom);
declare type MedicalConditionStageBase = MedicalIntangibleBase & {
    /** The stage represented as a number, e.g. 3. */
    "stageAsNumber"?: Number | readonly Number[];
    /** The substage, e.g. 'a' for Stage IIIa. */
    "subStageSuffix"?: Text | readonly Text[];
};
/** A stage of a medical condition, such as 'Stage IIIa'. */
export declare type MedicalConditionStage = {
    "@type": "MedicalConditionStage";
} & MedicalConditionStageBase;
declare type MedicalContraindicationBase = MedicalEntityBase;
/** A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but that these risks may be outweighed by other considerations or mitigated by other measures). */
export declare type MedicalContraindication = {
    "@type": "MedicalContraindication";
} & MedicalContraindicationBase;
declare type MedicalDeviceBase = MedicalEntityBase & {
    /** A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead. */
    "adverseOutcome"?: MedicalEntity | readonly MedicalEntity[];
    /** A contraindication for this therapy. */
    "contraindication"?: (MedicalContraindication | Text) | readonly (MedicalContraindication | Text)[];
    /** A factor that indicates use of this therapy for treatment and/or prevention of a condition, symptom, etc. For therapies such as drugs, indications can include both officially-approved indications as well as off-label uses. These can be distinguished by using the ApprovedIndication subtype of MedicalIndication. */
    "indication"?: MedicalIndication | readonly MedicalIndication[];
    /** A description of the postoperative procedures, care, and/or followups for this device. */
    "postOp"?: Text | readonly Text[];
    /** A description of the workup, testing, and other preparations required before implanting this device. */
    "preOp"?: Text | readonly Text[];
    /** A description of the procedure involved in setting up, using, and/or installing the device. */
    "procedure"?: Text | readonly Text[];
    /** A goal towards an action is taken. Can be concrete or abstract. */
    "purpose"?: (MedicalDevicePurpose | Thing) | readonly (MedicalDevicePurpose | Thing)[];
    /** A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition. */
    "seriousAdverseOutcome"?: MedicalEntity | readonly MedicalEntity[];
};
/** Any object used in a medical capacity, such as to diagnose or treat a patient. */
export declare type MedicalDevice = {
    "@type": "MedicalDevice";
} & MedicalDeviceBase;
declare type MedicalDevicePurposeBase = MedicalEnumerationBase;
/** Categories of medical devices, organized by the purpose or intended use of the device. */
export declare type MedicalDevicePurpose = "http://schema.org/Diagnostic" | "http://schema.org/Therapeutic" | ({
    "@type": "MedicalDevicePurpose";
} & MedicalDevicePurposeBase);
export declare const MedicalDevicePurpose: {
    /** A medical device used for diagnostic purposes. */
    Diagnostic: "http://schema.org/Diagnostic";
    /** A medical device used for therapeutic purposes. */
    Therapeutic: "http://schema.org/Therapeutic";
};
declare type MedicalEntityBase = ThingBase & {
    /** A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc. */
    "code"?: MedicalCode | readonly MedicalCode[];
    /** A medical guideline related to this entity. */
    "guideline"?: MedicalGuideline | readonly MedicalGuideline[];
    /** The drug or supplement's legal status, including any controlled substance schedules that apply. */
    "legalStatus"?: (DrugLegalStatus | MedicalEnumeration | Text) | readonly (DrugLegalStatus | MedicalEnumeration | Text)[];
    /** The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc. */
    "medicineSystem"?: MedicineSystem | readonly MedicineSystem[];
    /** If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine. */
    "recognizingAuthority"?: Organization | readonly Organization[];
    /** If applicable, a medical specialty in which this entity is relevant. */
    "relevantSpecialty"?: MedicalSpecialty | readonly MedicalSpecialty[];
    /** A medical study or trial related to this entity. */
    "study"?: MedicalStudy | readonly MedicalStudy[];
};
/** The most generic type of entity related to health and the practice of medicine. */
export declare type MedicalEntity = ({
    "@type": "MedicalEntity";
} & MedicalEntityBase) | (AnatomicalStructure | AnatomicalSystem | LifestyleModification | MedicalCause | MedicalCondition | MedicalContraindication | MedicalDevice | MedicalGuideline | MedicalIndication | MedicalIntangible | MedicalProcedure | MedicalRiskEstimator | MedicalRiskFactor | MedicalStudy | MedicalTest | Substance | SuperficialAnatomy);
declare type MedicalEnumerationBase = EnumerationBase;
/** Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice. */
export declare type MedicalEnumeration = ({
    "@type": "MedicalEnumeration";
} & MedicalEnumerationBase) | (DrugClass | DrugCost | DrugCostCategory | DrugPregnancyCategory | DrugPrescriptionStatus | InfectiousAgentClass | MedicalAudience | MedicalDevicePurpose | MedicalEvidenceLevel | MedicalImagingTechnique | MedicalObservationalStudyDesign | MedicalProcedureType | MedicalSpecialty | MedicalStudyStatus | MedicalTrialDesign | MedicineSystem | PhysicalExam);
declare type MedicalEvidenceLevelBase = MedicalEnumerationBase;
/** Level of evidence for a medical guideline. Enumerated type. */
export declare type MedicalEvidenceLevel = "http://schema.org/EvidenceLevelA" | "http://schema.org/EvidenceLevelB" | "http://schema.org/EvidenceLevelC" | ({
    "@type": "MedicalEvidenceLevel";
} & MedicalEvidenceLevelBase);
export declare const MedicalEvidenceLevel: {
    /** Data derived from multiple randomized clinical trials or meta-analyses. */
    EvidenceLevelA: "http://schema.org/EvidenceLevelA";
    /** Data derived from a single randomized trial, or nonrandomized studies. */
    EvidenceLevelB: "http://schema.org/EvidenceLevelB";
    /** Only consensus opinion of experts, case studies, or standard-of-care. */
    EvidenceLevelC: "http://schema.org/EvidenceLevelC";
};
declare type MedicalGuidelineBase = MedicalEntityBase & {
    /** Strength of evidence of the data used to formulate the guideline (enumerated). */
    "evidenceLevel"?: MedicalEvidenceLevel | readonly MedicalEvidenceLevel[];
    /** Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc. */
    "evidenceOrigin"?: Text | readonly Text[];
    /** Date on which this guideline's recommendation was made. */
    "guidelineDate"?: Date | readonly Date[];
    /** The medical conditions, treatments, etc. that are the subject of the guideline. */
    "guidelineSubject"?: MedicalEntity | readonly MedicalEntity[];
};
/** Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity. */
export declare type MedicalGuideline = ({
    "@type": "MedicalGuideline";
} & MedicalGuidelineBase) | (MedicalGuidelineContraindication | MedicalGuidelineRecommendation);
declare type MedicalGuidelineContraindicationBase = MedicalGuidelineBase;
/** A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound. */
export declare type MedicalGuidelineContraindication = {
    "@type": "MedicalGuidelineContraindication";
} & MedicalGuidelineContraindicationBase;
declare type MedicalGuidelineRecommendationBase = MedicalGuidelineBase & {
    /** Strength of the guideline's recommendation (e.g. 'class I'). */
    "recommendationStrength"?: Text | readonly Text[];
};
/** A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound. */
export declare type MedicalGuidelineRecommendation = {
    "@type": "MedicalGuidelineRecommendation";
} & MedicalGuidelineRecommendationBase;
declare type MedicalImagingTechniqueBase = MedicalEnumerationBase;
/** Any medical imaging modality typically used for diagnostic purposes. Enumerated type. */
export declare type MedicalImagingTechnique = "http://schema.org/CT" | "http://schema.org/MRI" | "http://schema.org/PET" | "http://schema.org/Radiography" | "http://schema.org/Ultrasound" | "http://schema.org/XRay" | ({
    "@type": "MedicalImagingTechnique";
} & MedicalImagingTechniqueBase);
export declare const MedicalImagingTechnique: {
    /** X-ray computed tomography imaging. */
    CT: "http://schema.org/CT";
    /** Magnetic resonance imaging. */
    MRI: "http://schema.org/MRI";
    /** Positron emission tomography imaging. */
    PET: "http://schema.org/PET";
    /** Radiography is an imaging technique that uses electromagnetic radiation other than visible light, especially X-rays, to view the internal structure of a non-uniformly composed and opaque object such as the human body. */
    Radiography: "http://schema.org/Radiography";
    /** Ultrasound imaging. */
    Ultrasound: "http://schema.org/Ultrasound";
    /** X-ray imaging. */
    XRay: "http://schema.org/XRay";
};
declare type MedicalIndicationBase = MedicalEntityBase;
/** A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc. */
export declare type MedicalIndication = ({
    "@type": "MedicalIndication";
} & MedicalIndicationBase) | (ApprovedIndication | PreventionIndication | TreatmentIndication);
declare type MedicalIntangibleBase = MedicalEntityBase;
/** A utility class that serves as the umbrella for a number of 'intangible' things in the medical space. */
export declare type MedicalIntangible = ({
    "@type": "MedicalIntangible";
} & MedicalIntangibleBase) | (DDxElement | DoseSchedule | DrugLegalStatus | DrugStrength | MedicalCode | MedicalConditionStage);
declare type MedicalObservationalStudyBase = MedicalStudyBase & {
    /** Specifics about the observational study design (enumerated). */
    "studyDesign"?: MedicalObservationalStudyDesign | readonly MedicalObservationalStudyDesign[];
};
/** An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment. */
export declare type MedicalObservationalStudy = {
    "@type": "MedicalObservationalStudy";
} & MedicalObservationalStudyBase;
declare type MedicalObservationalStudyDesignBase = MedicalEnumerationBase;
/** Design models for observational medical studies. Enumerated type. */
export declare type MedicalObservationalStudyDesign = "http://schema.org/CaseSeries" | "http://schema.org/CohortStudy" | "http://schema.org/CrossSectional" | "http://schema.org/Longitudinal" | "http://schema.org/Observational" | "http://schema.org/Registry" | ({
    "@type": "MedicalObservationalStudyDesign";
} & MedicalObservationalStudyDesignBase);
export declare const MedicalObservationalStudyDesign: {
    /** A case series (also known as a clinical series) is a medical research study that tracks patients with a known exposure given similar treatment or examines their medical records for exposure and outcome. A case series can be retrospective or prospective and usually involves a smaller number of patients than the more powerful case-control studies or randomized controlled trials. Case series may be consecutive or non-consecutive, depending on whether all cases presenting to the reporting authors over a period of time were included, or only a selection. */
    CaseSeries: "http://schema.org/CaseSeries";
    /** Also known as a panel study. A cohort study is a form of longitudinal study used in medicine and social science. It is one type of study design and should be compared with a cross-sectional study.  A cohort is a group of people who share a common characteristic or experience within a defined period (e.g., are born, leave school, lose their job, are exposed to a drug or a vaccine, etc.). The comparison group may be the general population from which the cohort is drawn, or it may be another cohort of persons thought to have had little or no exposure to the substance under investigation, but otherwise similar. Alternatively, subgroups within the cohort may be compared with each other. */
    CohortStudy: "http://schema.org/CohortStudy";
    /** Studies carried out on pre-existing data (usually from 'snapshot' surveys), such as that collected by the Census Bureau. Sometimes called Prevalence Studies. */
    CrossSectional: "http://schema.org/CrossSectional";
    /** Unlike cross-sectional studies, longitudinal studies track the same people, and therefore the differences observed in those people are less likely to be the result of cultural differences across generations. Longitudinal studies are also used in medicine to uncover predictors of certain diseases. */
    Longitudinal: "http://schema.org/Longitudinal";
    /** An observational study design. */
    Observational: "http://schema.org/Observational";
    /** A registry-based study design. */
    Registry: "http://schema.org/Registry";
};
declare type MedicalOrganizationBase = OrganizationBase & {
    /** Name or unique ID of network. (Networks are often reused across different insurance plans). */
    "healthPlanNetworkId"?: Text | readonly Text[];
    /** Whether the provider is accepting new patients. */
    "isAcceptingNewPatients"?: Boolean | readonly Boolean[];
    /** A medical specialty of the provider. */
    "medicalSpecialty"?: MedicalSpecialty | readonly MedicalSpecialty[];
};
/** A medical organization (physical or not), such as hospital, institution or clinic. */
export declare type MedicalOrganization = ({
    "@type": "MedicalOrganization";
} & MedicalOrganizationBase) | (Dentist | DiagnosticLab | Hospital | MedicalClinic | Pharmacy | Physician | VeterinaryCare | string);
declare type MedicalProcedureBase = MedicalEntityBase & {
    /** Location in the body of the anatomical structure. */
    "bodyLocation"?: Text | readonly Text[];
    /** Typical or recommended followup care after the procedure is performed. */
    "followup"?: Text | readonly Text[];
    /** How the procedure is performed. */
    "howPerformed"?: Text | readonly Text[];
    /** A factor that indicates use of this therapy for treatment and/or prevention of a condition, symptom, etc. For therapies such as drugs, indications can include both officially-approved indications as well as off-label uses. These can be distinguished by using the ApprovedIndication subtype of MedicalIndication. */
    "indication"?: MedicalIndication | readonly MedicalIndication[];
    /** Expected or actual outcomes of the study. */
    "outcome"?: (MedicalEntity | Text) | readonly (MedicalEntity | Text)[];
    /** Typical preparation that a patient must undergo before having the procedure performed. */
    "preparation"?: (MedicalEntity | Text) | readonly (MedicalEntity | Text)[];
    /** The type of procedure, for example Surgical, Noninvasive, or Percutaneous. */
    "procedureType"?: MedicalProcedureType | readonly MedicalProcedureType[];
    /** The status of the study (enumerated). */
    "status"?: (EventStatusType | MedicalStudyStatus | Text) | readonly (EventStatusType | MedicalStudyStatus | Text)[];
};
/** A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques. */
export declare type MedicalProcedure = ({
    "@type": "MedicalProcedure";
} & MedicalProcedureBase) | (DiagnosticProcedure | PalliativeProcedure | PhysicalExam | SurgicalProcedure | TherapeuticProcedure);
declare type MedicalProcedureTypeBase = MedicalEnumerationBase;
/** An enumeration that describes different types of medical procedures. */
export declare type MedicalProcedureType = "http://schema.org/NoninvasiveProcedure" | "http://schema.org/PercutaneousProcedure" | ({
    "@type": "MedicalProcedureType";
} & MedicalProcedureTypeBase);
export declare const MedicalProcedureType: {
    /** A type of medical procedure that involves noninvasive techniques. */
    NoninvasiveProcedure: "http://schema.org/NoninvasiveProcedure";
    /** A type of medical procedure that involves percutaneous techniques, where access to organs or tissue is achieved via needle-puncture of the skin. For example, catheter-based procedures like stent delivery. */
    PercutaneousProcedure: "http://schema.org/PercutaneousProcedure";
};
declare type MedicalRiskCalculatorBase = MedicalRiskEstimatorBase;
/** A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators. */
export declare type MedicalRiskCalculator = {
    "@type": "MedicalRiskCalculator";
} & MedicalRiskCalculatorBase;
declare type MedicalRiskEstimatorBase = MedicalEntityBase & {
    /** The condition, complication, or symptom whose risk is being estimated. */
    "estimatesRiskOf"?: MedicalEntity | readonly MedicalEntity[];
    /** A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition. */
    "includedRiskFactor"?: MedicalRiskFactor | readonly MedicalRiskFactor[];
};
/** Any rule set or interactive tool for estimating the risk of developing a complication or condition. */
export declare type MedicalRiskEstimator = ({
    "@type": "MedicalRiskEstimator";
} & MedicalRiskEstimatorBase) | (MedicalRiskCalculator | MedicalRiskScore);
declare type MedicalRiskFactorBase = MedicalEntityBase & {
    /** The condition, complication, etc. influenced by this factor. */
    "increasesRiskOf"?: MedicalEntity | readonly MedicalEntity[];
};
/** A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication. */
export declare type MedicalRiskFactor = {
    "@type": "MedicalRiskFactor";
} & MedicalRiskFactorBase;
declare type MedicalRiskScoreBase = MedicalRiskEstimatorBase & {
    /** The algorithm or rules to follow to compute the score. */
    "algorithm"?: Text | readonly Text[];
};
/** A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score. */
export declare type MedicalRiskScore = {
    "@type": "MedicalRiskScore";
} & MedicalRiskScoreBase;
declare type MedicalScholarlyArticleBase = ScholarlyArticleBase & {
    /** The type of the medical article, taken from the US NLM MeSH publication type catalog. See also {@link http://www.nlm.nih.gov/mesh/pubtypes.html MeSH documentation}. */
    "publicationType"?: Text | readonly Text[];
};
/** A scholarly article in the medical domain. */
export declare type MedicalScholarlyArticle = {
    "@type": "MedicalScholarlyArticle";
} & MedicalScholarlyArticleBase;
declare type MedicalSignBase = MedicalSignOrSymptomBase & {
    /** A physical examination that can identify this sign. */
    "identifyingExam"?: PhysicalExam | readonly PhysicalExam[];
    /** A diagnostic test that can identify this sign. */
    "identifyingTest"?: MedicalTest | readonly MedicalTest[];
};
/** Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination. */
export declare type MedicalSign = ({
    "@type": "MedicalSign";
} & MedicalSignBase) | VitalSign;
declare type MedicalSignOrSymptomBase = MedicalConditionBase & {
    /** Specifying a cause of something in general. e.g in medicine , one of the causative agent(s) that are most directly responsible for the pathophysiologic process that eventually results in the occurrence. */
    "cause"?: MedicalCause | readonly MedicalCause[];
    /** A possible treatment to address this condition, sign or symptom. */
    "possibleTreatment"?: MedicalTherapy | readonly MedicalTherapy[];
};
/** Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective. */
export declare type MedicalSignOrSymptom = ({
    "@type": "MedicalSignOrSymptom";
} & MedicalSignOrSymptomBase) | (MedicalSign | MedicalSymptom);
declare type MedicalSpecialtyBase = (MedicalEnumerationBase & SpecialtyBase);
/** Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type. */
export declare type MedicalSpecialty = "http://schema.org/Anesthesia" | "http://schema.org/Cardiovascular" | "http://schema.org/CommunityHealth" | "http://schema.org/Dentistry" | "http://schema.org/Dermatologic" | "http://schema.org/Dermatology" | "http://schema.org/DietNutrition" | "http://schema.org/Emergency" | "http://schema.org/Endocrine" | "http://schema.org/Gastroenterologic" | "http://schema.org/Genetic" | "http://schema.org/Geriatric" | "http://schema.org/Gynecologic" | "http://schema.org/Hematologic" | "http://schema.org/Infectious" | "http://schema.org/LaboratoryScience" | "http://schema.org/Midwifery" | "http://schema.org/Musculoskeletal" | "http://schema.org/Neurologic" | "http://schema.org/Nursing" | "http://schema.org/Obstetric" | "http://schema.org/Oncologic" | "http://schema.org/Optometric" | "http://schema.org/Otolaryngologic" | "http://schema.org/Pathology" | "http://schema.org/Pediatric" | "http://schema.org/PharmacySpecialty" | "http://schema.org/Physiotherapy" | "http://schema.org/PlasticSurgery" | "http://schema.org/Podiatric" | "http://schema.org/PrimaryCare" | "http://schema.org/Psychiatric" | "http://schema.org/PublicHealth" | "http://schema.org/Pulmonary" | "http://schema.org/Radiography" | "http://schema.org/Renal" | "http://schema.org/RespiratoryTherapy" | "http://schema.org/Rheumatologic" | "http://schema.org/SpeechPathology" | "http://schema.org/Surgical" | "http://schema.org/Toxicologic" | "http://schema.org/Urologic" | ({
    "@type": "MedicalSpecialty";
} & MedicalSpecialtyBase);
export declare const MedicalSpecialty: {
    /** A specific branch of medical science that pertains to study of anesthetics and their application. */
    Anesthesia: "http://schema.org/Anesthesia";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of heart and vasculature. */
    Cardiovascular: "http://schema.org/Cardiovascular";
    /** A field of public health focusing on improving health characteristics of a defined population in relation with their geographical or environment areas */
    CommunityHealth: "http://schema.org/CommunityHealth";
    /** A branch of medicine that is involved in the dental care. */
    Dentistry: "http://schema.org/Dentistry";
    /** Something relating to or practicing dermatology */
    Dermatologic: "http://schema.org/Dermatologic";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of skin. */
    Dermatology: "http://schema.org/Dermatology";
    /** Dietetic and nutrition as a medical speciality. */
    DietNutrition: "http://schema.org/DietNutrition";
    /** A specific branch of medical science that deals with the evaluation and initial treatment of medical conditions caused by trauma or sudden illness. */
    Emergency: "http://schema.org/Emergency";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of endocrine glands and their secretions. */
    Endocrine: "http://schema.org/Endocrine";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of digestive system. */
    Gastroenterologic: "http://schema.org/Gastroenterologic";
    /** A specific branch of medical science that pertains to hereditary transmission and the variation of inherited characteristics and disorders. */
    Genetic: "http://schema.org/Genetic";
    /** A specific branch of medical science that is concerned with the diagnosis and treatment of diseases, debilities and provision of care to the aged. */
    Geriatric: "http://schema.org/Geriatric";
    /** A specific branch of medical science that pertains to the health care of women, particularly in the diagnosis and treatment of disorders affecting the female reproductive system. */
    Gynecologic: "http://schema.org/Gynecologic";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of blood and blood producing organs. */
    Hematologic: "http://schema.org/Hematologic";
    /** Something in medical science that pertains to infectious diseases i.e caused by bacterial, viral, fungal or parasitic infections. */
    Infectious: "http://schema.org/Infectious";
    /** A medical science pertaining to chemical, hematological, immunologic, microscopic, or bacteriological diagnostic analyses or research */
    LaboratoryScience: "http://schema.org/LaboratoryScience";
    /** A nurse-like health profession that deals with pregnancy, childbirth, and the postpartum period (including care of the newborn), besides sexual and reproductive health of women throughout their lives. */
    Midwifery: "http://schema.org/Midwifery";
    /** A specific branch of medical science that pertains to diagnosis and treatment of disorders of muscles, ligaments and skeletal system. */
    Musculoskeletal: "http://schema.org/Musculoskeletal";
    /** A specific branch of medical science that studies the nerves and nervous system and its respective disease states. */
    Neurologic: "http://schema.org/Neurologic";
    /** A health profession of a person formally educated and trained in the care of the sick or infirm person. */
    Nursing: "http://schema.org/Nursing";
    /** A specific branch of medical science that specializes in the care of women during the prenatal and postnatal care and with the delivery of the child. */
    Obstetric: "http://schema.org/Obstetric";
    /** A specific branch of medical science that deals with benign and malignant tumors, including the study of their development, diagnosis, treatment and prevention. */
    Oncologic: "http://schema.org/Oncologic";
    /** The science or practice of testing visual acuity and prescribing corrective lenses. */
    Optometric: "http://schema.org/Optometric";
    /** A specific branch of medical science that is concerned with the ear, nose and throat and their respective disease states. */
    Otolaryngologic: "http://schema.org/Otolaryngologic";
    /** A specific branch of medical science that is concerned with the study of the cause, origin and nature of a disease state, including its consequences as a result of manifestation of the disease. In clinical care, the term is used to designate a branch of medicine using laboratory tests to diagnose and determine the prognostic significance of illness. */
    Pathology: "http://schema.org/Pathology";
    /** A specific branch of medical science that specializes in the care of infants, children and adolescents. */
    Pediatric: "http://schema.org/Pediatric";
    /** The practice or art and science of preparing and dispensing drugs and medicines. */
    PharmacySpecialty: "http://schema.org/PharmacySpecialty";
    /** The practice of treatment of disease, injury, or deformity by physical methods such as massage, heat treatment, and exercise rather than by drugs or surgery.. */
    Physiotherapy: "http://schema.org/Physiotherapy";
    /** A specific branch of medical science that pertains to therapeutic or cosmetic repair or re-formation of missing, injured or malformed tissues or body parts by manual and instrumental means. */
    PlasticSurgery: "http://schema.org/PlasticSurgery";
    /** Podiatry is the care of the human foot, especially the diagnosis and treatment of foot disorders. */
    Podiatric: "http://schema.org/Podiatric";
    /** The medical care by a physician, or other health-care professional, who is the patient's first contact with the health-care system and who may recommend a specialist if necessary. */
    PrimaryCare: "http://schema.org/PrimaryCare";
    /** A specific branch of medical science that is concerned with the study, treatment, and prevention of mental illness, using both medical and psychological therapies. */
    Psychiatric: "http://schema.org/Psychiatric";
    /** Branch of medicine that pertains to the health services to improve and protect community health, especially epidemiology, sanitation, immunization, and preventive medicine. */
    PublicHealth: "http://schema.org/PublicHealth";
    /** A specific branch of medical science that pertains to the study of the respiratory system and its respective disease states. */
    Pulmonary: "http://schema.org/Pulmonary";
    /** Radiography is an imaging technique that uses electromagnetic radiation other than visible light, especially X-rays, to view the internal structure of a non-uniformly composed and opaque object such as the human body. */
    Radiography: "http://schema.org/Radiography";
    /** A specific branch of medical science that pertains to the study of the kidneys and its respective disease states. */
    Renal: "http://schema.org/Renal";
    /** The therapy that is concerned with the maintenance or improvement of respiratory function (as in patients with pulmonary disease). */
    RespiratoryTherapy: "http://schema.org/RespiratoryTherapy";
    /** A specific branch of medical science that deals with the study and treatment of rheumatic, autoimmune or joint diseases. */
    Rheumatologic: "http://schema.org/Rheumatologic";
    /** The scientific study and treatment of defects, disorders, and malfunctions of speech and voice, as stuttering, lisping, or lalling, and of language disturbances, as aphasia or delayed language acquisition. */
    SpeechPathology: "http://schema.org/SpeechPathology";
    /** A specific branch of medical science that pertains to treating diseases, injuries and deformities by manual and instrumental means. */
    Surgical: "http://schema.org/Surgical";
    /** A specific branch of medical science that is concerned with poisons, their nature, effects and detection and involved in the treatment of poisoning. */
    Toxicologic: "http://schema.org/Toxicologic";
    /** A specific branch of medical science that is concerned with the diagnosis and treatment of diseases pertaining to the urinary tract and the urogenital system. */
    Urologic: "http://schema.org/Urologic";
};
declare type MedicalStudyBase = MedicalEntityBase & {
    /** Specifying the health condition(s) of a patient, medical study, or other target audience. */
    "healthCondition"?: MedicalCondition | readonly MedicalCondition[];
    /** Expected or actual outcomes of the study. */
    "outcome"?: (MedicalEntity | Text) | readonly (MedicalEntity | Text)[];
    /** Any characteristics of the population used in the study, e.g. 'males under 65'. */
    "population"?: Text | readonly Text[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The status of the study (enumerated). */
    "status"?: (EventStatusType | MedicalStudyStatus | Text) | readonly (EventStatusType | MedicalStudyStatus | Text)[];
    /** The location in which the study is taking/took place. */
    "studyLocation"?: AdministrativeArea | readonly AdministrativeArea[];
    /** A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study. */
    "studySubject"?: MedicalEntity | readonly MedicalEntity[];
};
/** A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID. */
export declare type MedicalStudy = ({
    "@type": "MedicalStudy";
} & MedicalStudyBase) | (MedicalObservationalStudy | MedicalTrial);
declare type MedicalStudyStatusBase = MedicalEnumerationBase;
/** The status of a medical study. Enumerated type. */
export declare type MedicalStudyStatus = "http://schema.org/ActiveNotRecruiting" | "http://schema.org/Completed" | "http://schema.org/EnrollingByInvitation" | "http://schema.org/NotYetRecruiting" | "http://schema.org/Recruiting" | "http://schema.org/ResultsAvailable" | "http://schema.org/ResultsNotAvailable" | "http://schema.org/Suspended" | "http://schema.org/Terminated" | "http://schema.org/Withdrawn" | ({
    "@type": "MedicalStudyStatus";
} & MedicalStudyStatusBase);
export declare const MedicalStudyStatus: {
    /** Active, but not recruiting new participants. */
    ActiveNotRecruiting: "http://schema.org/ActiveNotRecruiting";
    /** Completed. */
    Completed: "http://schema.org/Completed";
    /** Enrolling participants by invitation only. */
    EnrollingByInvitation: "http://schema.org/EnrollingByInvitation";
    /** Not yet recruiting. */
    NotYetRecruiting: "http://schema.org/NotYetRecruiting";
    /** Recruiting participants. */
    Recruiting: "http://schema.org/Recruiting";
    /** Results are available. */
    ResultsAvailable: "http://schema.org/ResultsAvailable";
    /** Results are not available. */
    ResultsNotAvailable: "http://schema.org/ResultsNotAvailable";
    /** Suspended. */
    Suspended: "http://schema.org/Suspended";
    /** Terminated. */
    Terminated: "http://schema.org/Terminated";
    /** Withdrawn. */
    Withdrawn: "http://schema.org/Withdrawn";
};
declare type MedicalSymptomBase = MedicalSignOrSymptomBase;
/** Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue. */
export declare type MedicalSymptom = {
    "@type": "MedicalSymptom";
} & MedicalSymptomBase;
declare type MedicalTestBase = MedicalEntityBase & {
    /** Drugs that affect the test's results. */
    "affectedBy"?: Drug | readonly Drug[];
    /** Range of acceptable values for a typical patient, when applicable. */
    "normalRange"?: (MedicalEnumeration | Text) | readonly (MedicalEnumeration | Text)[];
    /** A sign detected by the test. */
    "signDetected"?: MedicalSign | readonly MedicalSign[];
    /** A condition the test is used to diagnose. */
    "usedToDiagnose"?: MedicalCondition | readonly MedicalCondition[];
    /** Device used to perform the test. */
    "usesDevice"?: MedicalDevice | readonly MedicalDevice[];
};
/** Any medical test, typically performed for diagnostic purposes. */
export declare type MedicalTest = ({
    "@type": "MedicalTest";
} & MedicalTestBase) | (BloodTest | ImagingTest | MedicalTestPanel | PathologyTest);
declare type MedicalTestPanelBase = MedicalTestBase & {
    /** A component test of the panel. */
    "subTest"?: MedicalTest | readonly MedicalTest[];
};
/** Any collection of tests commonly ordered together. */
export declare type MedicalTestPanel = {
    "@type": "MedicalTestPanel";
} & MedicalTestPanelBase;
declare type MedicalTherapyBase = TherapeuticProcedureBase & {
    /** A contraindication for this therapy. */
    "contraindication"?: (MedicalContraindication | Text) | readonly (MedicalContraindication | Text)[];
    /** A therapy that duplicates or overlaps this one. */
    "duplicateTherapy"?: MedicalTherapy | readonly MedicalTherapy[];
    /** A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition. */
    "seriousAdverseOutcome"?: MedicalEntity | readonly MedicalEntity[];
};
/** Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition. */
export declare type MedicalTherapy = ({
    "@type": "MedicalTherapy";
} & MedicalTherapyBase) | (OccupationalTherapy | PalliativeProcedure | PhysicalTherapy | RadiationTherapy);
declare type MedicalTrialBase = MedicalStudyBase & {
    /** The phase of the clinical trial. */
    "phase"?: Text | readonly Text[];
    /** Specifics about the trial design (enumerated). */
    "trialDesign"?: MedicalTrialDesign | readonly MedicalTrialDesign[];
};
/** A medical trial is a type of medical study that uses scientific process used to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups. */
export declare type MedicalTrial = {
    "@type": "MedicalTrial";
} & MedicalTrialBase;
declare type MedicalTrialDesignBase = (MedicalEnumerationBase & EnumerationBase);
/** Design models for medical trials. Enumerated type. */
export declare type MedicalTrialDesign = "http://schema.org/DoubleBlindedTrial" | "http://schema.org/InternationalTrial" | "http://schema.org/MultiCenterTrial" | "http://schema.org/OpenTrial" | "http://schema.org/PlaceboControlledTrial" | "http://schema.org/RandomizedTrial" | "http://schema.org/SingleBlindedTrial" | "http://schema.org/SingleCenterTrial" | "http://schema.org/TripleBlindedTrial" | ({
    "@type": "MedicalTrialDesign";
} & MedicalTrialDesignBase);
export declare const MedicalTrialDesign: {
    /** A trial design in which neither the researcher nor the patient knows the details of the treatment the patient was randomly assigned to. */
    DoubleBlindedTrial: "http://schema.org/DoubleBlindedTrial";
    /** An international trial. */
    InternationalTrial: "http://schema.org/InternationalTrial";
    /** A trial that takes place at multiple centers. */
    MultiCenterTrial: "http://schema.org/MultiCenterTrial";
    /** A trial design in which the researcher knows the full details of the treatment, and so does the patient. */
    OpenTrial: "http://schema.org/OpenTrial";
    /** A placebo-controlled trial design. */
    PlaceboControlledTrial: "http://schema.org/PlaceboControlledTrial";
    /** A randomized trial design. */
    RandomizedTrial: "http://schema.org/RandomizedTrial";
    /** A trial design in which the researcher knows which treatment the patient was randomly assigned to but the patient does not. */
    SingleBlindedTrial: "http://schema.org/SingleBlindedTrial";
    /** A trial that takes place at a single center. */
    SingleCenterTrial: "http://schema.org/SingleCenterTrial";
    /** A trial design in which neither the researcher, the person administering the therapy nor the patient knows the details of the treatment the patient was randomly assigned to. */
    TripleBlindedTrial: "http://schema.org/TripleBlindedTrial";
};
declare type MedicalWebPageBase = WebPageBase & {
    /**
     * An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.
     * @deprecated Consider using http://schema.org/mainContentOfPage instead.
     */
    "aspect"?: Text | readonly Text[];
};
/** A web page that provides medical information. */
export declare type MedicalWebPage = {
    "@type": "MedicalWebPage";
} & MedicalWebPageBase;
declare type MedicineSystemBase = MedicalEnumerationBase;
/** Systems of medical practice. */
export declare type MedicineSystem = "http://schema.org/Ayurvedic" | "http://schema.org/Chiropractic" | "http://schema.org/Homeopathic" | "http://schema.org/Osteopathic" | "http://schema.org/TraditionalChinese" | "http://schema.org/WesternConventional" | ({
    "@type": "MedicineSystem";
} & MedicineSystemBase);
export declare const MedicineSystem: {
    /** A system of medicine that originated in India over thousands of years and that focuses on integrating and balancing the body, mind, and spirit. */
    Ayurvedic: "http://schema.org/Ayurvedic";
    /** A system of medicine focused on the relationship between the body's structure, mainly the spine, and its functioning. */
    Chiropractic: "http://schema.org/Chiropractic";
    /** A system of medicine based on the principle that a disease can be cured by a substance that produces similar symptoms in healthy people. */
    Homeopathic: "http://schema.org/Homeopathic";
    /** A system of medicine focused on promoting the body's innate ability to heal itself. */
    Osteopathic: "http://schema.org/Osteopathic";
    /** A system of medicine based on common theoretical concepts that originated in China and evolved over thousands of years, that uses herbs, acupuncture, exercise, massage, dietary therapy, and other methods to treat a wide range of conditions. */
    TraditionalChinese: "http://schema.org/TraditionalChinese";
    /** The conventional Western system of medicine, that aims to apply the best available evidence gained from the scientific method to clinical decision making. Also known as conventional or Western medicine. */
    WesternConventional: "http://schema.org/WesternConventional";
};
declare type MeetingRoomBase = RoomBase;
/**
 * A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/Conference_hall http://en.wikipedia.org/wiki/Conference_hall}).
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type MeetingRoom = ({
    "@type": "MeetingRoom";
} & MeetingRoomBase) | string;
declare type MensClothingStoreBase = StoreBase;
/** A men's clothing store. */
export declare type MensClothingStore = ({
    "@type": "MensClothingStore";
} & MensClothingStoreBase) | string;
declare type MenuBase = CreativeWorkBase & {
    /** A food or drink item contained in a menu or menu section. */
    "hasMenuItem"?: MenuItem | readonly MenuItem[];
    /** A subgrouping of the menu (by dishes, course, serving time period, etc.). */
    "hasMenuSection"?: MenuSection | readonly MenuSection[];
};
/** A structured representation of food or drink items available from a FoodEstablishment. */
export declare type Menu = {
    "@type": "Menu";
} & MenuBase;
declare type MenuItemBase = IntangibleBase & {
    /** Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item. */
    "menuAddOn"?: (MenuItem | MenuSection) | readonly (MenuItem | MenuSection)[];
    /** Nutrition information about the recipe or menu item. */
    "nutrition"?: NutritionInformation | readonly NutritionInformation[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc. */
    "suitableForDiet"?: RestrictedDiet | readonly RestrictedDiet[];
};
/** A food or drink item listed in a menu or menu section. */
export declare type MenuItem = {
    "@type": "MenuItem";
} & MenuItemBase;
declare type MenuSectionBase = CreativeWorkBase & {
    /** A food or drink item contained in a menu or menu section. */
    "hasMenuItem"?: MenuItem | readonly MenuItem[];
    /** A subgrouping of the menu (by dishes, course, serving time period, etc.). */
    "hasMenuSection"?: MenuSection | readonly MenuSection[];
};
/** A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider. */
export declare type MenuSection = {
    "@type": "MenuSection";
} & MenuSectionBase;
declare type MerchantReturnEnumerationBase = EnumerationBase;
/** MerchantReturnEnumeration enumerates several kinds of product return policy. Note that this structure may not capture all aspects of the policy. */
export declare type MerchantReturnEnumeration = "http://schema.org/MerchantReturnFiniteReturnWindow" | "http://schema.org/MerchantReturnNotPermitted" | "http://schema.org/MerchantReturnUnlimitedWindow" | "http://schema.org/MerchantReturnUnspecified" | ({
    "@type": "MerchantReturnEnumeration";
} & MerchantReturnEnumerationBase);
export declare const MerchantReturnEnumeration: {
    /** MerchantReturnFiniteReturnWindow: there is a finite window for product returns. */
    MerchantReturnFiniteReturnWindow: "http://schema.org/MerchantReturnFiniteReturnWindow";
    /** MerchantReturnNotPermitted: product returns are not permitted. */
    MerchantReturnNotPermitted: "http://schema.org/MerchantReturnNotPermitted";
    /** MerchantReturnUnlimitedWindow: there is an unlimited window for product returns. */
    MerchantReturnUnlimitedWindow: "http://schema.org/MerchantReturnUnlimitedWindow";
    /** MerchantReturnUnspecified: a product return policy is not specified here. */
    MerchantReturnUnspecified: "http://schema.org/MerchantReturnUnspecified";
};
declare type MerchantReturnPolicyBase = IntangibleBase & {
    /** Are in-store returns offered? */
    "inStoreReturnsOffered"?: Boolean | readonly Boolean[];
    /** The merchantReturnDays property indicates the number of days (from purchase) within which relevant merchant return policy is applicable. */
    "merchantReturnDays"?: Integer | readonly Integer[];
    /** Indicates a Web page or service by URL, for product return. */
    "merchantReturnLink"?: URL | readonly URL[];
    /** A refundType, from an enumerated list. */
    "refundType"?: RefundTypeEnumeration | readonly RefundTypeEnumeration[];
    /** Indicates (via enumerated options) the return fees policy for a MerchantReturnPolicy */
    "returnFees"?: ReturnFeesEnumeration | readonly ReturnFeesEnumeration[];
    /** A returnPolicyCategory expresses at most one of several enumerated kinds of return. */
    "returnPolicyCategory"?: MerchantReturnEnumeration | readonly MerchantReturnEnumeration[];
};
/** A MerchantReturnPolicy provides information about product return policies associated with an {@link http://schema.org/Organization Organization} or {@link http://schema.org/Product Product}. */
export declare type MerchantReturnPolicy = {
    "@type": "MerchantReturnPolicy";
} & MerchantReturnPolicyBase;
declare type MessageBase = CreativeWorkBase & {
    /** A sub property of recipient. The recipient blind copied on a message. */
    "bccRecipient"?: (ContactPoint | Organization | Person) | readonly (ContactPoint | Organization | Person)[];
    /** A sub property of recipient. The recipient copied on a message. */
    "ccRecipient"?: (ContactPoint | Organization | Person) | readonly (ContactPoint | Organization | Person)[];
    /** The date/time at which the message has been read by the recipient if a single recipient exists. */
    "dateRead"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date/time the message was received if a single recipient exists. */
    "dateReceived"?: DateTime | readonly DateTime[];
    /** The date/time at which the message was sent. */
    "dateSent"?: DateTime | readonly DateTime[];
    /** A CreativeWork attached to the message. */
    "messageAttachment"?: CreativeWork | readonly CreativeWork[];
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
    /** A sub property of participant. The participant who is at the sending end of the action. */
    "sender"?: (Audience | Organization | Person) | readonly (Audience | Organization | Person)[];
    /** A sub property of recipient. The recipient who was directly sent the message. */
    "toRecipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** A single message from a sender to one or more organizations or people. */
export declare type Message = ({
    "@type": "Message";
} & MessageBase) | EmailMessage;
declare type MiddleSchoolBase = EducationalOrganizationBase;
/** A middle school (typically for children aged around 11-14, although this varies somewhat). */
export declare type MiddleSchool = ({
    "@type": "MiddleSchool";
} & MiddleSchoolBase) | string;
declare type MobileApplicationBase = SoftwareApplicationBase & {
    /** Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network). */
    "carrierRequirements"?: Text | readonly Text[];
};
/** A software application designed specifically to work well on a mobile device such as a telephone. */
export declare type MobileApplication = {
    "@type": "MobileApplication";
} & MobileApplicationBase;
declare type MobilePhoneStoreBase = StoreBase;
/** A store that sells mobile phones and related accessories. */
export declare type MobilePhoneStore = ({
    "@type": "MobilePhoneStore";
} & MobilePhoneStoreBase) | string;
declare type MonetaryAmountBase = StructuredValueBase & {
    /**
     * The currency in which the monetary amount is expressed.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currency"?: Text | readonly Text[];
    /** The upper value of some characteristic or property. */
    "maxValue"?: Number | readonly Number[];
    /** The lower value of some characteristic or property. */
    "minValue"?: Number | readonly Number[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /**
     * The value of the quantitative value or property value node.
     *
     * - For {@link http://schema.org/QuantitativeValue QuantitativeValue} and {@link http://schema.org/MonetaryAmount MonetaryAmount}, the recommended type for values is 'Number'.
     * - For {@link http://schema.org/PropertyValue PropertyValue}, it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "value"?: (Boolean | Number | StructuredValue | Text) | readonly (Boolean | Number | StructuredValue | Text)[];
};
/** A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use {@link http://schema.org/PriceSpecification PriceSpecification} Types to describe the price of an Offer, Invoice, etc. */
export declare type MonetaryAmount = {
    "@type": "MonetaryAmount";
} & MonetaryAmountBase;
declare type MonetaryAmountDistributionBase = QuantitativeValueDistributionBase & {
    /**
     * The currency in which the monetary amount is expressed.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "currency"?: Text | readonly Text[];
};
/** A statistical distribution of monetary amounts. */
export declare type MonetaryAmountDistribution = {
    "@type": "MonetaryAmountDistribution";
} & MonetaryAmountDistributionBase;
declare type MonetaryGrantBase = GrantBase & {
    /** The amount of money. */
    "amount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
    /** A person or organization that supports (sponsors) something through some kind of financial contribution. */
    "funder"?: (Organization | Person) | readonly (Organization | Person)[];
};
/** A monetary grant. */
export declare type MonetaryGrant = {
    "@type": "MonetaryGrant";
} & MonetaryGrantBase;
declare type MoneyTransferBase = TransferActionBase & {
    /** The amount of money. */
    "amount"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
    /** A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s bank account or releasing funds for the beneficiary */
    "beneficiaryBank"?: (BankOrCreditUnion | Text) | readonly (BankOrCreditUnion | Text)[];
};
/** The act of transferring money from one place to another place. This may occur electronically or physically. */
export declare type MoneyTransfer = {
    "@type": "MoneyTransfer";
} & MoneyTransferBase;
declare type MortgageLoanBase = LoanOrCreditBase & {
    /** Whether borrower is a resident of the jurisdiction where the property is located. */
    "domiciledMortgage"?: Boolean | readonly Boolean[];
    /** Amount of mortgage mandate that can be converted into a proper mortgage at a later stage. */
    "loanMortgageMandateAmount"?: MonetaryAmount | readonly MonetaryAmount[];
};
/** A loan in which property or real estate is used as collateral. (A loan securitized against some real estate.) */
export declare type MortgageLoan = {
    "@type": "MortgageLoan";
} & MortgageLoanBase;
declare type MosqueBase = PlaceOfWorshipBase;
/** A mosque. */
export declare type Mosque = ({
    "@type": "Mosque";
} & MosqueBase) | string;
declare type MotelBase = LodgingBusinessBase;
/**
 * A motel.
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Motel = ({
    "@type": "Motel";
} & MotelBase) | string;
declare type MotorcycleBase = VehicleBase;
/** A motorcycle or motorbike is a single-track, two-wheeled motor vehicle. */
export declare type Motorcycle = {
    "@type": "Motorcycle";
} & MotorcycleBase;
declare type MotorcycleDealerBase = AutomotiveBusinessBase;
/** A motorcycle dealer. */
export declare type MotorcycleDealer = ({
    "@type": "MotorcycleDealer";
} & MotorcycleDealerBase) | string;
declare type MotorcycleRepairBase = AutomotiveBusinessBase;
/** A motorcycle repair shop. */
export declare type MotorcycleRepair = ({
    "@type": "MotorcycleRepair";
} & MotorcycleRepairBase) | string;
declare type MotorizedBicycleBase = VehicleBase;
/** A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling. */
export declare type MotorizedBicycle = {
    "@type": "MotorizedBicycle";
} & MotorizedBicycleBase;
declare type MountainBase = LandformBase;
/** A mountain, like Mount Whitney or Mount Everest. */
export declare type Mountain = ({
    "@type": "Mountain";
} & MountainBase) | string;
declare type MoveActionBase = ActionBase & {
    /** A sub property of location. The original location of the object or the agent before the action. */
    "fromLocation"?: Place | readonly Place[];
    /** A sub property of location. The final location of the object or the agent after the action. */
    "toLocation"?: Place | readonly Place[];
};
/**
 * The act of an agent relocating to a place.
 *
 * Related actions:
 *
 * - {@link http://schema.org/TransferAction TransferAction}: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
 */
export declare type MoveAction = ({
    "@type": "MoveAction";
} & MoveActionBase) | (ArriveAction | DepartAction | TravelAction);
declare type MovieBase = CreativeWorkBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** The country of the principal offices of the production company or individual responsible for the movie or program. */
    "countryOfOrigin"?: Country | readonly Country[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** Languages in which subtitles/captions are available, in {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard format}. */
    "subtitleLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A movie. */
export declare type Movie = {
    "@type": "Movie";
} & MovieBase;
declare type MovieClipBase = ClipBase;
/** A short segment/part of a movie. */
export declare type MovieClip = {
    "@type": "MovieClip";
} & MovieClipBase;
declare type MovieRentalStoreBase = StoreBase;
/** A movie rental store. */
export declare type MovieRentalStore = ({
    "@type": "MovieRentalStore";
} & MovieRentalStoreBase) | string;
declare type MovieSeriesBase = CreativeWorkSeriesBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A series of movies. Included movies can be indicated with the hasPart property. */
export declare type MovieSeries = {
    "@type": "MovieSeries";
} & MovieSeriesBase;
declare type MovieTheaterBase = (CivicStructureBase & EntertainmentBusinessBase) & {
    /** The number of screens in the movie theater. */
    "screenCount"?: Number | readonly Number[];
};
/** A movie theater. */
export declare type MovieTheater = ({
    "@type": "MovieTheater";
} & MovieTheaterBase) | string;
declare type MovingCompanyBase = HomeAndConstructionBusinessBase;
/** A moving company. */
export declare type MovingCompany = ({
    "@type": "MovingCompany";
} & MovingCompanyBase) | string;
declare type MuscleBase = AnatomicalStructureBase & {
    /** Obsolete term for {@link http://schema.org/muscleAction muscleAction}. Not to be confused with {@link http://schema.org/potentialAction potentialAction}. */
    "action"?: Text | readonly Text[];
    /** The muscle whose action counteracts the specified muscle. */
    "antagonist"?: Muscle | readonly Muscle[];
    /** The blood vessel that carries blood from the heart to the muscle. */
    "bloodSupply"?: Vessel | readonly Vessel[];
    /** The place of attachment of a muscle, or what the muscle moves. */
    "insertion"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** The movement the muscle generates. */
    "muscleAction"?: Text | readonly Text[];
    /** The underlying innervation associated with the muscle. */
    "nerve"?: Nerve | readonly Nerve[];
    /** The place or point where a muscle arises. */
    "origin"?: AnatomicalStructure | readonly AnatomicalStructure[];
};
/** A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement. */
export declare type Muscle = {
    "@type": "Muscle";
} & MuscleBase;
declare type MuseumBase = CivicStructureBase;
/** A museum. */
export declare type Museum = ({
    "@type": "Museum";
} & MuseumBase) | string;
declare type MusicAlbumBase = MusicPlaylistBase & {
    /** Classification of the album by it's type of content: soundtrack, live album, studio album, etc. */
    "albumProductionType"?: MusicAlbumProductionType | readonly MusicAlbumProductionType[];
    /** A release of this album. */
    "albumRelease"?: MusicRelease | readonly MusicRelease[];
    /** The kind of release which this album is: single, EP or album. */
    "albumReleaseType"?: MusicAlbumReleaseType | readonly MusicAlbumReleaseType[];
    /** The artist that performed this album or recording. */
    "byArtist"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
};
/** A collection of music tracks. */
export declare type MusicAlbum = {
    "@type": "MusicAlbum";
} & MusicAlbumBase;
declare type MusicAlbumProductionTypeBase = EnumerationBase;
/** Classification of the album by it's type of content: soundtrack, live album, studio album, etc. */
export declare type MusicAlbumProductionType = "http://schema.org/CompilationAlbum" | "http://schema.org/DemoAlbum" | "http://schema.org/DJMixAlbum" | "http://schema.org/LiveAlbum" | "http://schema.org/MixtapeAlbum" | "http://schema.org/RemixAlbum" | "http://schema.org/SoundtrackAlbum" | "http://schema.org/SpokenWordAlbum" | "http://schema.org/StudioAlbum" | ({
    "@type": "MusicAlbumProductionType";
} & MusicAlbumProductionTypeBase);
export declare const MusicAlbumProductionType: {
    /** CompilationAlbum. */
    CompilationAlbum: "http://schema.org/CompilationAlbum";
    /** DemoAlbum. */
    DemoAlbum: "http://schema.org/DemoAlbum";
    /** DJMixAlbum. */
    DJMixAlbum: "http://schema.org/DJMixAlbum";
    /** LiveAlbum. */
    LiveAlbum: "http://schema.org/LiveAlbum";
    /** MixtapeAlbum. */
    MixtapeAlbum: "http://schema.org/MixtapeAlbum";
    /** RemixAlbum. */
    RemixAlbum: "http://schema.org/RemixAlbum";
    /** SoundtrackAlbum. */
    SoundtrackAlbum: "http://schema.org/SoundtrackAlbum";
    /** SpokenWordAlbum. */
    SpokenWordAlbum: "http://schema.org/SpokenWordAlbum";
    /** StudioAlbum. */
    StudioAlbum: "http://schema.org/StudioAlbum";
};
declare type MusicAlbumReleaseTypeBase = EnumerationBase;
/** The kind of release which this album is: single, EP or album. */
export declare type MusicAlbumReleaseType = "http://schema.org/AlbumRelease" | "http://schema.org/BroadcastRelease" | "http://schema.org/EPRelease" | "http://schema.org/SingleRelease" | ({
    "@type": "MusicAlbumReleaseType";
} & MusicAlbumReleaseTypeBase);
export declare const MusicAlbumReleaseType: {
    /** AlbumRelease. */
    AlbumRelease: "http://schema.org/AlbumRelease";
    /** BroadcastRelease. */
    BroadcastRelease: "http://schema.org/BroadcastRelease";
    /** EPRelease. */
    EPRelease: "http://schema.org/EPRelease";
    /** SingleRelease. */
    SingleRelease: "http://schema.org/SingleRelease";
};
declare type MusicCompositionBase = CreativeWorkBase & {
    /** The person or organization who wrote a composition, or who is the composer of a work performed at some event. */
    "composer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The date and place the work was first performed. */
    "firstPerformance"?: Event | readonly Event[];
    /** Smaller compositions included in this work (e.g. a movement in a symphony). */
    "includedComposition"?: MusicComposition | readonly MusicComposition[];
    /** The International Standard Musical Work Code for the composition. */
    "iswcCode"?: Text | readonly Text[];
    /** The person who wrote the words. */
    "lyricist"?: Person | readonly Person[];
    /** The words in the song. */
    "lyrics"?: CreativeWork | readonly CreativeWork[];
    /** The key, mode, or scale this composition uses. */
    "musicalKey"?: Text | readonly Text[];
    /** An arrangement derived from the composition. */
    "musicArrangement"?: MusicComposition | readonly MusicComposition[];
    /** The type of composition (e.g. overture, sonata, symphony, etc.). */
    "musicCompositionForm"?: Text | readonly Text[];
    /** An audio recording of the work. */
    "recordedAs"?: MusicRecording | readonly MusicRecording[];
};
/** A musical composition. */
export declare type MusicComposition = {
    "@type": "MusicComposition";
} & MusicCompositionBase;
declare type MusicEventBase = EventBase;
/** Event type: Music event. */
export declare type MusicEvent = {
    "@type": "MusicEvent";
} & MusicEventBase;
declare type MusicGroupBase = PerformingGroupBase & {
    /** A music album. */
    "album"?: MusicAlbum | readonly MusicAlbum[];
    /**
     * A collection of music albums.
     * @deprecated Consider using http://schema.org/album instead.
     */
    "albums"?: MusicAlbum | readonly MusicAlbum[];
    /** Genre of the creative work, broadcast channel or group. */
    "genre"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
     * @deprecated Consider using http://schema.org/member instead.
     */
    "musicGroupMember"?: Person | readonly Person[];
    /** A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording. */
    "track"?: (ItemList | MusicRecording) | readonly (ItemList | MusicRecording)[];
    /**
     * A music recording (track)&#x2014;usually a single song.
     * @deprecated Consider using http://schema.org/track instead.
     */
    "tracks"?: MusicRecording | readonly MusicRecording[];
};
/** A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician. */
export declare type MusicGroup = ({
    "@type": "MusicGroup";
} & MusicGroupBase) | string;
declare type MusicPlaylistBase = CreativeWorkBase & {
    /** The number of tracks in this album or playlist. */
    "numTracks"?: Integer | readonly Integer[];
    /** A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording. */
    "track"?: (ItemList | MusicRecording) | readonly (ItemList | MusicRecording)[];
    /**
     * A music recording (track)&#x2014;usually a single song.
     * @deprecated Consider using http://schema.org/track instead.
     */
    "tracks"?: MusicRecording | readonly MusicRecording[];
};
/** A collection of music tracks in playlist form. */
export declare type MusicPlaylist = ({
    "@type": "MusicPlaylist";
} & MusicPlaylistBase) | (MusicAlbum | MusicRelease);
declare type MusicRecordingBase = CreativeWorkBase & {
    /** The artist that performed this album or recording. */
    "byArtist"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** The album to which this recording belongs. */
    "inAlbum"?: MusicAlbum | readonly MusicAlbum[];
    /** The playlist to which this recording belongs. */
    "inPlaylist"?: MusicPlaylist | readonly MusicPlaylist[];
    /** The International Standard Recording Code for the recording. */
    "isrcCode"?: Text | readonly Text[];
    /** The composition this track is a recording of. */
    "recordingOf"?: MusicComposition | readonly MusicComposition[];
};
/** A music recording (track), usually a single song. */
export declare type MusicRecording = {
    "@type": "MusicRecording";
} & MusicRecordingBase;
declare type MusicReleaseBase = MusicPlaylistBase & {
    /** The catalog number for the release. */
    "catalogNumber"?: Text | readonly Text[];
    /** The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga. */
    "creditedTo"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.). */
    "musicReleaseFormat"?: MusicReleaseFormatType | readonly MusicReleaseFormatType[];
    /** The label that issued the release. */
    "recordLabel"?: Organization | readonly Organization[];
    /** The album this is a release of. */
    "releaseOf"?: MusicAlbum | readonly MusicAlbum[];
};
/** A MusicRelease is a specific release of a music album. */
export declare type MusicRelease = {
    "@type": "MusicRelease";
} & MusicReleaseBase;
declare type MusicReleaseFormatTypeBase = EnumerationBase;
/** Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.). */
export declare type MusicReleaseFormatType = "http://schema.org/CassetteFormat" | "http://schema.org/CDFormat" | "http://schema.org/DigitalAudioTapeFormat" | "http://schema.org/DigitalFormat" | "http://schema.org/DVDFormat" | "http://schema.org/LaserDiscFormat" | "http://schema.org/VinylFormat" | ({
    "@type": "MusicReleaseFormatType";
} & MusicReleaseFormatTypeBase);
export declare const MusicReleaseFormatType: {
    /** CassetteFormat. */
    CassetteFormat: "http://schema.org/CassetteFormat";
    /** CDFormat. */
    CDFormat: "http://schema.org/CDFormat";
    /** DigitalAudioTapeFormat. */
    DigitalAudioTapeFormat: "http://schema.org/DigitalAudioTapeFormat";
    /** DigitalFormat. */
    DigitalFormat: "http://schema.org/DigitalFormat";
    /** DVDFormat. */
    DVDFormat: "http://schema.org/DVDFormat";
    /** LaserDiscFormat. */
    LaserDiscFormat: "http://schema.org/LaserDiscFormat";
    /** VinylFormat. */
    VinylFormat: "http://schema.org/VinylFormat";
};
declare type MusicStoreBase = StoreBase;
/** A music store. */
export declare type MusicStore = ({
    "@type": "MusicStore";
} & MusicStoreBase) | string;
declare type MusicVenueBase = CivicStructureBase;
/** A music venue. */
export declare type MusicVenue = ({
    "@type": "MusicVenue";
} & MusicVenueBase) | string;
declare type MusicVideoObjectBase = MediaObjectBase;
/** A music video file. */
export declare type MusicVideoObject = {
    "@type": "MusicVideoObject";
} & MusicVideoObjectBase;
declare type NailSalonBase = HealthAndBeautyBusinessBase;
/** A nail salon. */
export declare type NailSalon = ({
    "@type": "NailSalon";
} & NailSalonBase) | string;
declare type NerveBase = AnatomicalStructureBase & {
    /**
     * The branches that delineate from the nerve bundle. Not to be confused with {@link http://schema.org/branchOf branchOf}.
     * @deprecated Consider using http://schema.org/veinBranch or http://schema.org/nerveBranch or http://schema.org/arterialBranch instead.
     */
    "branch"?: AnatomicalStructure | readonly AnatomicalStructure[];
    /** The neurological pathway extension that involves muscle control. */
    "nerveMotor"?: Muscle | readonly Muscle[];
    /** The neurological pathway extension that inputs and sends information to the brain or spinal cord. */
    "sensoryUnit"?: (AnatomicalStructure | SuperficialAnatomy) | readonly (AnatomicalStructure | SuperficialAnatomy)[];
    /** The neurological pathway that originates the neurons. */
    "sourcedFrom"?: BrainStructure | readonly BrainStructure[];
};
/** A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons. */
export declare type Nerve = {
    "@type": "Nerve";
} & NerveBase;
declare type NewsArticleBase = ArticleBase & {
    /**
     * A {@link https://en.wikipedia.org/wiki/Dateline dateline} is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.
     *
     * Structured representations of dateline-related information can also be expressed more explicitly using {@link http://schema.org/locationCreated locationCreated} (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use {@link http://schema.org/contentLocation contentLocation}.
     *
     * Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".
     */
    "dateline"?: Text | readonly Text[];
    /** The number of the column in which the NewsArticle appears in the print edition. */
    "printColumn"?: Text | readonly Text[];
    /** The edition of the print product in which the NewsArticle appears. */
    "printEdition"?: Text | readonly Text[];
    /** If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18). */
    "printPage"?: Text | readonly Text[];
    /** If this NewsArticle appears in print, this field indicates the print section in which the article appeared. */
    "printSection"?: Text | readonly Text[];
};
/**
 * A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.
 *
 * A more detailed overview of {@link /docs/news.html schema.org News markup} is also available.
 */
export declare type NewsArticle = ({
    "@type": "NewsArticle";
} & NewsArticleBase) | (AnalysisNewsArticle | AskPublicNewsArticle | BackgroundNewsArticle | OpinionNewsArticle | ReportageNewsArticle | ReviewNewsArticle);
declare type NewsMediaOrganizationBase = OrganizationBase & {
    /** For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} or other news-related {@link http://schema.org/Organization Organization}, a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication. */
    "actionableFeedbackPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For an {@link http://schema.org/Organization Organization} (e.g. {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors. */
    "correctionsPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Statement on diversity policy by an {@link http://schema.org/Organization Organization} e.g. a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}. For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data. */
    "diversityPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For an {@link http://schema.org/Organization Organization} (often but not necessarily a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported. */
    "diversityStaffingReport"?: (Article | URL) | readonly (Article | URL)[];
    /** Statement about ethics policy, e.g. of a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} regarding journalistic and publishing practices, or of a {@link http://schema.org/Restaurant Restaurant}, a page describing food source policies. In the case of a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization. */
    "ethicsPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, a link to the masthead page or a page listing top editorial management. */
    "masthead"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, a statement on coverage priorities, including any public agenda or stance on issues. */
    "missionCoveragePrioritiesPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} or other news-related {@link http://schema.org/Organization Organization}, a statement explaining when authors of articles are not named in bylines. */
    "noBylinesPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For an {@link http://schema.org/Organization Organization} (often but not necessarily a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the {@link http://schema.org/funder funder} is also available and can be used to make basic funder information machine-readable. */
    "ownershipFundingInfo"?: (AboutPage | CreativeWork | Text | URL) | readonly (AboutPage | CreativeWork | Text | URL)[];
    /** For an {@link http://schema.org/Organization Organization} (typically a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a statement about policy on use of unnamed sources and the decision process required. */
    "unnamedSourcesPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Disclosure about verification and fact-checking processes for a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} or other fact-checking {@link http://schema.org/Organization Organization}. */
    "verificationFactCheckingPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
};
/** A News/Media organization such as a newspaper or TV station. */
export declare type NewsMediaOrganization = ({
    "@type": "NewsMediaOrganization";
} & NewsMediaOrganizationBase) | string;
declare type NewspaperBase = PeriodicalBase;
/** A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily. */
export declare type Newspaper = {
    "@type": "Newspaper";
} & NewspaperBase;
declare type NGOBase = OrganizationBase;
/** Organization: Non-governmental Organization. */
export declare type NGO = ({
    "@type": "NGO";
} & NGOBase) | string;
declare type NightClubBase = EntertainmentBusinessBase;
/** A nightclub or discotheque. */
export declare type NightClub = ({
    "@type": "NightClub";
} & NightClubBase) | string;
declare type NotaryBase = LegalServiceBase;
/** A notary. */
export declare type Notary = ({
    "@type": "Notary";
} & NotaryBase) | string;
declare type NoteDigitalDocumentBase = DigitalDocumentBase;
/** A file containing a note, primarily for the author. */
export declare type NoteDigitalDocument = {
    "@type": "NoteDigitalDocument";
} & NoteDigitalDocumentBase;
declare type NutritionInformationBase = StructuredValueBase & {
    /** The number of calories. */
    "calories"?: Energy | readonly Energy[];
    /** The number of grams of carbohydrates. */
    "carbohydrateContent"?: Mass | readonly Mass[];
    /** The number of milligrams of cholesterol. */
    "cholesterolContent"?: Mass | readonly Mass[];
    /** The number of grams of fat. */
    "fatContent"?: Mass | readonly Mass[];
    /** The number of grams of fiber. */
    "fiberContent"?: Mass | readonly Mass[];
    /** The number of grams of protein. */
    "proteinContent"?: Mass | readonly Mass[];
    /** The number of grams of saturated fat. */
    "saturatedFatContent"?: Mass | readonly Mass[];
    /** The serving size, in terms of the number of volume or mass. */
    "servingSize"?: Text | readonly Text[];
    /** The number of milligrams of sodium. */
    "sodiumContent"?: Mass | readonly Mass[];
    /** The number of grams of sugar. */
    "sugarContent"?: Mass | readonly Mass[];
    /** The number of grams of trans fat. */
    "transFatContent"?: Mass | readonly Mass[];
    /** The number of grams of unsaturated fat. */
    "unsaturatedFatContent"?: Mass | readonly Mass[];
};
/** Nutritional information about the recipe. */
export declare type NutritionInformation = {
    "@type": "NutritionInformation";
} & NutritionInformationBase;
declare type ObservationBase = IntangibleBase & {
    /** A marginOfError for an {@link http://schema.org/Observation Observation}. */
    "marginOfError"?: DateTime | readonly DateTime[];
    /** The measuredProperty of an {@link http://schema.org/Observation Observation}, either a schema.org property, a property from other RDF-compatible systems e.g. W3C RDF Data Cube, or schema.org extensions such as {@link https://www.gs1.org/voc/?show=properties GS1's}. */
    "measuredProperty"?: Property | readonly Property[];
    /** The measuredValue of an {@link http://schema.org/Observation Observation}. */
    "measuredValue"?: DataType | readonly DataType[];
    /** The observationDate of an {@link http://schema.org/Observation Observation}. */
    "observationDate"?: DateTime | readonly DateTime[];
    /** The observedNode of an {@link http://schema.org/Observation Observation}, often a {@link http://schema.org/StatisticalPopulation StatisticalPopulation}. */
    "observedNode"?: StatisticalPopulation | readonly StatisticalPopulation[];
};
/** Instances of the class {@link http://schema.org/Observation Observation} are used to specify observations about an entity (which may or may not be an instance of a {@link http://schema.org/StatisticalPopulation StatisticalPopulation}), at a particular time. The principal properties of an {@link http://schema.org/Observation Observation} are {@link http://schema.org/observedNode observedNode}, {@link http://schema.org/measuredProperty measuredProperty}, {@link http://schema.org/measuredValue measuredValue} (or {@link http://schema.org/median median}, etc.) and {@link http://schema.org/observationDate observationDate} ({@link http://schema.org/measuredProperty measuredProperty} properties can, but need not always, be W3C RDF Data Cube "measure properties", as in the {@link https://www.w3.org/TR/vocab-data-cube/#dsd-example lifeExpectancy example}).See also {@link http://schema.org/StatisticalPopulation StatisticalPopulation}, and the {@link /docs/data-and-datasets.html data and datasets} overview for more details. */
export declare type Observation = {
    "@type": "Observation";
} & ObservationBase;
declare type OccupationBase = IntangibleBase & {
    /** Educational background needed for the position or Occupation. */
    "educationRequirements"?: (EducationalOccupationalCredential | Text) | readonly (EducationalOccupationalCredential | Text)[];
    /** An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value. */
    "estimatedSalary"?: (MonetaryAmount | MonetaryAmountDistribution | Number) | readonly (MonetaryAmount | MonetaryAmountDistribution | Number)[];
    /** Description of skills and experience needed for the position or Occupation. */
    "experienceRequirements"?: Text | readonly Text[];
    /**
     * A category describing the job, preferably using a term from a taxonomy such as {@link http://www.onetcenter.org/taxonomy.html BLS O*NET-SOC}, {@link https://www.ilo.org/public/english/bureau/stat/isco/isco08/ ISCO-08} or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.
     *
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     */
    "occupationalCategory"?: (CategoryCode | Text) | readonly (CategoryCode | Text)[];
    /** The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions. */
    "occupationLocation"?: AdministrativeArea | readonly AdministrativeArea[];
    /** Specific qualifications required for this role or Occupation. */
    "qualifications"?: (EducationalOccupationalCredential | Text) | readonly (EducationalOccupationalCredential | Text)[];
    /** Responsibilities associated with this role or Occupation. */
    "responsibilities"?: Text | readonly Text[];
    /** A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation. */
    "skills"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
};
/** A profession, may involve prolonged training and/or a formal qualification. */
export declare type Occupation = {
    "@type": "Occupation";
} & OccupationBase;
declare type OccupationalTherapyBase = MedicalTherapyBase;
/** A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems. */
export declare type OccupationalTherapy = {
    "@type": "OccupationalTherapy";
} & OccupationalTherapyBase;
declare type OceanBodyOfWaterBase = BodyOfWaterBase;
/** An ocean (for example, the Pacific). */
export declare type OceanBodyOfWater = ({
    "@type": "OceanBodyOfWater";
} & OceanBodyOfWaterBase) | string;
declare type OfferBase = IntangibleBase & {
    /** The payment method(s) accepted by seller for this offer. */
    "acceptedPaymentMethod"?: (LoanOrCredit | PaymentMethod) | readonly (LoanOrCredit | PaymentMethod)[];
    /** An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge). */
    "addOn"?: Offer | readonly Offer[];
    /** The amount of time that is required between accepting the offer and the actual usage of the resource or service. */
    "advanceBookingRequirement"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /** The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc. */
    "availability"?: ItemAvailability | readonly ItemAvailability[];
    /** The end of the availability of the product or service included in the offer. */
    "availabilityEnds"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** The beginning of the availability of the product or service included in the offer. */
    "availabilityStarts"?: (Date | DateTime | Time) | readonly (Date | DateTime | Time)[];
    /** The place(s) from which the offer can be obtained (e.g. store locations). */
    "availableAtOrFrom"?: Place | readonly Place[];
    /** The delivery method(s) available for this offer. */
    "availableDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell. */
    "businessFunction"?: BusinessFunction | readonly BusinessFunction[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /** The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. */
    "deliveryLeadTime"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The type(s) of customers for which the given offer is valid. */
    "eligibleCustomerType"?: BusinessEntityType | readonly BusinessEntityType[];
    /** The duration for which the given offer is valid. */
    "eligibleDuration"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity. */
    "eligibleQuantity"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.
     *
     * See also {@link http://schema.org/ineligibleRegion ineligibleRegion}.
     */
    "eligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount. */
    "eligibleTransactionVolume"?: PriceSpecification | readonly PriceSpecification[];
    /** A Global Trade Item Number ({@link https://www.gs1.org/standards/id-keys/gtin GTIN}). GTINs identify trade items, including products and services, using numeric identification codes. The {@link http://schema.org/gtin gtin} property generalizes the earlier {@link http://schema.org/gtin8 gtin8}, {@link http://schema.org/gtin12 gtin12}, {@link http://schema.org/gtin13 gtin13}, and {@link http://schema.org/gtin14 gtin14} properties. The GS1 {@link https://www.gs1.org/standards/Digital-Link/ digital link specifications} express GTINs as URLs. A correct {@link http://schema.org/gtin gtin} value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a {@link https://www.gs1.org/services/check-digit-calculator valid GS1 check digit} and meet the other rules for valid GTINs. See also {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1's GTIN Summary} and {@link https://en.wikipedia.org/wiki/Global_Trade_Item_Number Wikipedia} for more details. Left-padding of the gtin values is not required or encouraged. */
    "gtin"?: Text | readonly Text[];
    /** The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin12"?: Text | readonly Text[];
    /** The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin13"?: Text | readonly Text[];
    /** The GTIN-14 code of the product, or the product to which the offer refers. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin14"?: Text | readonly Text[];
    /** The {@link http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx GTIN-8} code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin8"?: Text | readonly Text[];
    /** This links to a node or nodes indicating the exact quantity of the products included in the offer. */
    "includesObject"?: TypeAndQuantityNode | readonly TypeAndQuantityNode[];
    /**
     * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.
     *
     * See also {@link http://schema.org/eligibleRegion eligibleRegion}.
     */
    "ineligibleRegion"?: (GeoShape | Place | Text) | readonly (GeoShape | Place | Text)[];
    /** The current approximate inventory level for the item or items. */
    "inventoryLevel"?: QuantitativeValue | readonly QuantitativeValue[];
    /** A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer. */
    "itemCondition"?: OfferItemCondition | readonly OfferItemCondition[];
    /** An item being offered (or demanded). The transactional nature of the offer or demand is documented using {@link http://schema.org/businessFunction businessFunction}, e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "itemOffered"?: (AggregateOffer | CreativeWork | Event | MenuItem | Product | Service | Trip) | readonly (AggregateOffer | CreativeWork | Event | MenuItem | Product | Service | Trip)[];
    /** Length of the lease for some {@link http://schema.org/Accommodation Accommodation}, either particular to some {@link http://schema.org/Offer Offer} or in some cases intrinsic to the property. */
    "leaseLength"?: (Duration | QuantitativeValue) | readonly (Duration | QuantitativeValue)[];
    /** The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers. */
    "mpn"?: Text | readonly Text[];
    /** A pointer to the organization or person making the offer. */
    "offeredBy"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
     *
     * Usage guidelines:
     *
     * - Use the {@link http://schema.org/priceCurrency priceCurrency} property (with standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR") instead of including {@link http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign ambiguous symbols} such as '$' in the value.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     * - Note that both {@link http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute RDFa} and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     */
    "price"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * The currency of the price, or a price component when attached to {@link http://schema.org/PriceSpecification PriceSpecification} and its subtypes.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "priceCurrency"?: Text | readonly Text[];
    /** One or more detailed price specifications, indicating the unit price and delivery or payment charges. */
    "priceSpecification"?: PriceSpecification | readonly PriceSpecification[];
    /** The date after which the price is no longer available. */
    "priceValidUntil"?: Date | readonly Date[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * Review of the item.
     * @deprecated Consider using http://schema.org/review instead.
     */
    "reviews"?: Review | readonly Review[];
    /** An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider. */
    "seller"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer. */
    "serialNumber"?: Text | readonly Text[];
    /** The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. */
    "sku"?: Text | readonly Text[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The warranty promise(s) included in the offer. */
    "warranty"?: WarrantyPromise | readonly WarrantyPromise[];
};
/**
 * An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.
 *
 * Note: As the {@link http://schema.org/businessFunction businessFunction} property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.
 *
 * For {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GTIN}-related fields, see {@link http://www.gs1.org/barcodes/support/check_digit_calculator Check Digit calculator} and {@link http://www.gs1us.org/resources/standards/gtin-validation-guide validation guide} from {@link http://www.gs1.org/ GS1}.
 */
export declare type Offer = ({
    "@type": "Offer";
} & OfferBase) | (AggregateOffer | OfferForLease | OfferForPurchase);
declare type OfferCatalogBase = ItemListBase;
/** An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider. */
export declare type OfferCatalog = {
    "@type": "OfferCatalog";
} & OfferCatalogBase;
declare type OfferForLeaseBase = OfferBase;
/** An {@link http://schema.org/OfferForLease OfferForLease} in Schema.org represents an {@link http://schema.org/Offer Offer} to lease out something, i.e. an {@link http://schema.org/Offer Offer} whose  {@link http://schema.org/businessFunction businessFunction} is {@link http://purl.org/goodrelations/v1#LeaseOut. lease out}. See {@link https://en.wikipedia.org/wiki/GoodRelations Good Relations} for  background on the underlying concepts. */
export declare type OfferForLease = {
    "@type": "OfferForLease";
} & OfferForLeaseBase;
declare type OfferForPurchaseBase = OfferBase;
/** An {@link http://schema.org/OfferForPurchase OfferForPurchase} in Schema.org represents an {@link http://schema.org/Offer Offer} to sell something, i.e. an {@link http://schema.org/Offer Offer} whose  {@link http://schema.org/businessFunction businessFunction} is {@link http://purl.org/goodrelations/v1#Sell. sell}. See {@link https://en.wikipedia.org/wiki/GoodRelations Good Relations} for  background on the underlying concepts. */
export declare type OfferForPurchase = {
    "@type": "OfferForPurchase";
} & OfferForPurchaseBase;
declare type OfferItemConditionBase = EnumerationBase;
/** A list of possible conditions for the item. */
export declare type OfferItemCondition = "http://schema.org/DamagedCondition" | "http://schema.org/NewCondition" | "http://schema.org/RefurbishedCondition" | "http://schema.org/UsedCondition" | ({
    "@type": "OfferItemCondition";
} & OfferItemConditionBase);
export declare const OfferItemCondition: {
    /** Indicates that the item is damaged. */
    DamagedCondition: "http://schema.org/DamagedCondition";
    /** Indicates that the item is new. */
    NewCondition: "http://schema.org/NewCondition";
    /** Indicates that the item is refurbished. */
    RefurbishedCondition: "http://schema.org/RefurbishedCondition";
    /** Indicates that the item is used. */
    UsedCondition: "http://schema.org/UsedCondition";
};
declare type OfficeEquipmentStoreBase = StoreBase;
/** An office equipment store. */
export declare type OfficeEquipmentStore = ({
    "@type": "OfficeEquipmentStore";
} & OfficeEquipmentStoreBase) | string;
declare type OnDemandEventBase = PublicationEventBase;
/** A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand. */
export declare type OnDemandEvent = {
    "@type": "OnDemandEvent";
} & OnDemandEventBase;
declare type OpeningHoursSpecificationBase = StructuredValueBase & {
    /** The closing hour of the place or service on the given day(s) of the week. */
    "closes"?: Time | readonly Time[];
    /** The day of the week for which these opening hours are valid. */
    "dayOfWeek"?: DayOfWeek | readonly DayOfWeek[];
    /** The opening hour of the place or service on the given day(s) of the week. */
    "opens"?: Time | readonly Time[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
};
/**
 * A structured value providing information about the opening hours of a place or a certain service inside a place.
 *
 * The place is __open__ if the {@link http://schema.org/opens opens} property is specified, and __closed__ otherwise.
 *
 * If the value for the {@link http://schema.org/closes closes} property is less than the value for the {@link http://schema.org/opens opens} property then the hour range is assumed to span over the next day.
 */
export declare type OpeningHoursSpecification = {
    "@type": "OpeningHoursSpecification";
} & OpeningHoursSpecificationBase;
declare type OpinionNewsArticleBase = NewsArticleBase;
/** An {@link http://schema.org/OpinionNewsArticle OpinionNewsArticle} is a {@link http://schema.org/NewsArticle NewsArticle} that primarily expresses opinions rather than journalistic reporting of news and events. For example, a {@link http://schema.org/NewsArticle NewsArticle} consisting of a column or {@link http://schema.org/Blog Blog}/{@link http://schema.org/BlogPosting BlogPosting} entry in the Opinions section of a news publication. */
export declare type OpinionNewsArticle = {
    "@type": "OpinionNewsArticle";
} & OpinionNewsArticleBase;
declare type OpticianBase = MedicalBusinessBase;
/** A store that sells reading glasses and similar devices for improving vision. */
export declare type Optician = ({
    "@type": "Optician";
} & OpticianBase) | string;
declare type OrderBase = IntangibleBase & {
    /** The offer(s) -- e.g., product, quantity and price combinations -- included in the order. */
    "acceptedOffer"?: Offer | readonly Offer[];
    /** The billing address for the order. */
    "billingAddress"?: PostalAddress | readonly PostalAddress[];
    /** An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred. */
    "broker"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A number that confirms the given order or payment has been received. */
    "confirmationNumber"?: Text | readonly Text[];
    /** Party placing the order or paying the invoice. */
    "customer"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Any discount applied (to an Order). */
    "discount"?: (Number | Text) | readonly (Number | Text)[];
    /** Code used to redeem a discount. */
    "discountCode"?: Text | readonly Text[];
    /**
     * The currency of the discount.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "discountCurrency"?: Text | readonly Text[];
    /** Was the offer accepted as a gift for someone other than the buyer. */
    "isGift"?: Boolean | readonly Boolean[];
    /**
     * 'merchant' is an out-dated term for 'seller'.
     * @deprecated Consider using http://schema.org/seller instead.
     */
    "merchant"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Date order was placed. */
    "orderDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The delivery of the parcel related to this order or order item. */
    "orderDelivery"?: ParcelDelivery | readonly ParcelDelivery[];
    /** The item ordered. */
    "orderedItem"?: (OrderItem | Product | Service) | readonly (OrderItem | Product | Service)[];
    /** The identifier of the transaction. */
    "orderNumber"?: Text | readonly Text[];
    /** The current status of the order. */
    "orderStatus"?: OrderStatus | readonly OrderStatus[];
    /** The order is being paid as part of the referenced Invoice. */
    "partOfInvoice"?: Invoice | readonly Invoice[];
    /**
     * The date that payment is due.
     * @deprecated Consider using http://schema.org/paymentDueDate instead.
     */
    "paymentDue"?: DateTime | readonly DateTime[];
    /** The date that payment is due. */
    "paymentDueDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The name of the credit card or other method of payment for the order. */
    "paymentMethod"?: PaymentMethod | readonly PaymentMethod[];
    /** An identifier for the method of payment used (e.g. the last 4 digits of the credit card). */
    "paymentMethodId"?: Text | readonly Text[];
    /** The URL for sending a payment. */
    "paymentUrl"?: URL | readonly URL[];
    /** An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider. */
    "seller"?: (Organization | Person) | readonly (Organization | Person)[];
};
/** An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer. */
export declare type Order = {
    "@type": "Order";
} & OrderBase;
declare type OrderActionBase = TradeActionBase & {
    /** A sub property of instrument. The method of delivery. */
    "deliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
};
/** An agent orders an object/product/service to be delivered/sent. */
export declare type OrderAction = {
    "@type": "OrderAction";
} & OrderActionBase;
declare type OrderItemBase = IntangibleBase & {
    /** The delivery of the parcel related to this order or order item. */
    "orderDelivery"?: ParcelDelivery | readonly ParcelDelivery[];
    /** The item ordered. */
    "orderedItem"?: (OrderItem | Product | Service) | readonly (OrderItem | Product | Service)[];
    /** The identifier of the order item. */
    "orderItemNumber"?: Text | readonly Text[];
    /** The current status of the order item. */
    "orderItemStatus"?: OrderStatus | readonly OrderStatus[];
    /** The number of the item ordered. If the property is not set, assume the quantity is one. */
    "orderQuantity"?: Number | readonly Number[];
};
/** An order item is a line of an order. It includes the quantity and shipping details of a bought offer. */
export declare type OrderItem = {
    "@type": "OrderItem";
} & OrderItemBase;
declare type OrderStatusBase = EnumerationBase;
/** Enumerated status values for Order. */
export declare type OrderStatus = "http://schema.org/OrderCancelled" | "http://schema.org/OrderDelivered" | "http://schema.org/OrderInTransit" | "http://schema.org/OrderPaymentDue" | "http://schema.org/OrderPickupAvailable" | "http://schema.org/OrderProblem" | "http://schema.org/OrderProcessing" | "http://schema.org/OrderReturned" | ({
    "@type": "OrderStatus";
} & OrderStatusBase);
export declare const OrderStatus: {
    /** OrderStatus representing cancellation of an order. */
    OrderCancelled: "http://schema.org/OrderCancelled";
    /** OrderStatus representing successful delivery of an order. */
    OrderDelivered: "http://schema.org/OrderDelivered";
    /** OrderStatus representing that an order is in transit. */
    OrderInTransit: "http://schema.org/OrderInTransit";
    /** OrderStatus representing that payment is due on an order. */
    OrderPaymentDue: "http://schema.org/OrderPaymentDue";
    /** OrderStatus representing availability of an order for pickup. */
    OrderPickupAvailable: "http://schema.org/OrderPickupAvailable";
    /** OrderStatus representing that there is a problem with the order. */
    OrderProblem: "http://schema.org/OrderProblem";
    /** OrderStatus representing that an order is being processed. */
    OrderProcessing: "http://schema.org/OrderProcessing";
    /** OrderStatus representing that an order has been returned. */
    OrderReturned: "http://schema.org/OrderReturned";
};
declare type OrganizationBase = ThingBase & {
    /** For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} or other news-related {@link http://schema.org/Organization Organization}, a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication. */
    "actionableFeedbackPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Physical address of the item. */
    "address"?: (PostalAddress | Text) | readonly (PostalAddress | Text)[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** Alumni of an organization. */
    "alumni"?: Person | readonly Person[];
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /** An award won by or for this item. */
    "award"?: Text | readonly Text[];
    /**
     * Awards won by or for this item.
     * @deprecated Consider using http://schema.org/award instead.
     */
    "awards"?: Text | readonly Text[];
    /** The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person. */
    "brand"?: (Brand | Organization) | readonly (Brand | Organization)[];
    /** A contact point for a person or organization. */
    "contactPoint"?: ContactPoint | readonly ContactPoint[];
    /**
     * A contact point for a person or organization.
     * @deprecated Consider using http://schema.org/contactPoint instead.
     */
    "contactPoints"?: ContactPoint | readonly ContactPoint[];
    /** For an {@link http://schema.org/Organization Organization} (e.g. {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors. */
    "correctionsPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe. */
    "department"?: Organization | readonly Organization[];
    /** The date that this organization was dissolved. */
    "dissolutionDate"?: Date | readonly Date[];
    /** Statement on diversity policy by an {@link http://schema.org/Organization Organization} e.g. a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}. For a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data. */
    "diversityPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** For an {@link http://schema.org/Organization Organization} (often but not necessarily a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported. */
    "diversityStaffingReport"?: (Article | URL) | readonly (Article | URL)[];
    /** The Dun &amp; Bradstreet DUNS number for identifying an organization or business person. */
    "duns"?: Text | readonly Text[];
    /** Email address. */
    "email"?: Text | readonly Text[];
    /** Someone working for this organization. */
    "employee"?: Person | readonly Person[];
    /**
     * People working for this organization.
     * @deprecated Consider using http://schema.org/employee instead.
     */
    "employees"?: Person | readonly Person[];
    /** Statement about ethics policy, e.g. of a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization} regarding journalistic and publishing practices, or of a {@link http://schema.org/Restaurant Restaurant}, a page describing food source policies. In the case of a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}, an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization. */
    "ethicsPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
    /**
     * Upcoming or past events associated with this place or organization.
     * @deprecated Consider using http://schema.org/event instead.
     */
    "events"?: Event | readonly Event[];
    /** The fax number. */
    "faxNumber"?: Text | readonly Text[];
    /** A person who founded this organization. */
    "founder"?: Person | readonly Person[];
    /**
     * A person who founded this organization.
     * @deprecated Consider using http://schema.org/founder instead.
     */
    "founders"?: Person | readonly Person[];
    /** The date that this organization was founded. */
    "foundingDate"?: Date | readonly Date[];
    /** The place where the Organization was founded. */
    "foundingLocation"?: Place | readonly Place[];
    /** A person or organization that supports (sponsors) something through some kind of financial contribution. */
    "funder"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The {@link http://www.gs1.org/gln Global Location Number} (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations. */
    "globalLocationNumber"?: Text | readonly Text[];
    /** A credential awarded to the Person or Organization. */
    "hasCredential"?: EducationalOccupationalCredential | readonly EducationalOccupationalCredential[];
    /** Indicates a MerchantReturnPolicy that may be applicable. */
    "hasMerchantReturnPolicy"?: MerchantReturnPolicy | readonly MerchantReturnPolicy[];
    /** Indicates an OfferCatalog listing for this Organization, Person, or Service. */
    "hasOfferCatalog"?: OfferCatalog | readonly OfferCatalog[];
    /** Points-of-Sales operated by the organization or person. */
    "hasPOS"?: Place | readonly Place[];
    /**
     * Indicates a ProductReturnPolicy that may be applicable.
     * @deprecated Consider using http://schema.org/hasMerchantReturnPolicy instead.
     */
    "hasProductReturnPolicy"?: ProductReturnPolicy | readonly ProductReturnPolicy[];
    /** The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used. */
    "interactionStatistic"?: InteractionCounter | readonly InteractionCounter[];
    /** The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place. */
    "isicV4"?: Text | readonly Text[];
    /** Of a {@link http://schema.org/Person Person}, and less typically of an {@link http://schema.org/Organization Organization}, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or {@link http://schema.org/JobPosting JobPosting} descriptions. */
    "knowsAbout"?: (Text | Thing | URL) | readonly (Text | Thing | URL)[];
    /** Of a {@link http://schema.org/Person Person}, and less typically of an {@link http://schema.org/Organization Organization}, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. */
    "knowsLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The official name of the organization, e.g. the registered company name. */
    "legalName"?: Text | readonly Text[];
    /** An organization identifier that uniquely identifies a legal entity as defined in ISO 17442. */
    "leiCode"?: Text | readonly Text[];
    /** The location of for example where the event is happening, an organization is located, or where an action takes place. */
    "location"?: (Place | PostalAddress | Text) | readonly (Place | PostalAddress | Text)[];
    /** An associated logo. */
    "logo"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** A pointer to products or services offered by the organization or person. */
    "makesOffer"?: Offer | readonly Offer[];
    /** A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals. */
    "member"?: (Organization | Person) | readonly (Organization | Person)[];
    /** An Organization (or ProgramMembership) to which this Person or Organization belongs. */
    "memberOf"?: (Organization | ProgramMembership) | readonly (Organization | ProgramMembership)[];
    /**
     * A member of this organization.
     * @deprecated Consider using http://schema.org/member instead.
     */
    "members"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The North American Industry Classification System (NAICS) code for a particular organization or business person. */
    "naics"?: Text | readonly Text[];
    /** The number of employees in an organization e.g. business. */
    "numberOfEmployees"?: QuantitativeValue | readonly QuantitativeValue[];
    /** For an {@link http://schema.org/Organization Organization} (often but not necessarily a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the {@link http://schema.org/funder funder} is also available and can be used to make basic funder information machine-readable. */
    "ownershipFundingInfo"?: (AboutPage | CreativeWork | Text | URL) | readonly (AboutPage | CreativeWork | Text | URL)[];
    /** Products owned by the organization or person. */
    "owns"?: (OwnershipInfo | Product) | readonly (OwnershipInfo | Product)[];
    /** The larger organization that this organization is a {@link http://schema.org/subOrganization subOrganization} of, if any. */
    "parentOrganization"?: Organization | readonly Organization[];
    /**
     * The publishingPrinciples property indicates (typically via {@link http://schema.org/URL URL}) a document describing the editorial principles of an {@link http://schema.org/Organization Organization} (or individual e.g. a {@link http://schema.org/Person Person} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {@link http://schema.org/CreativeWork CreativeWork} (e.g. {@link http://schema.org/NewsArticle NewsArticle}) the principles are those of the party primarily responsible for the creation of the {@link http://schema.org/CreativeWork CreativeWork}.
     *
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {@link http://schema.org/funder funder}) can be expressed using schema.org terminology.
     */
    "publishingPrinciples"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * Review of the item.
     * @deprecated Consider using http://schema.org/review instead.
     */
    "reviews"?: Review | readonly Review[];
    /** A pointer to products or services sought by the organization or person (demand). */
    "seeks"?: Demand | readonly Demand[];
    /**
     * The geographic area where the service is provided.
     * @deprecated Consider using http://schema.org/areaServed instead.
     */
    "serviceArea"?: (AdministrativeArea | GeoShape | Place) | readonly (AdministrativeArea | GeoShape | Place)[];
    /** A slogan or motto associated with the item. */
    "slogan"?: Text | readonly Text[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property. */
    "subOrganization"?: Organization | readonly Organization[];
    /** The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain. */
    "taxID"?: Text | readonly Text[];
    /** The telephone number. */
    "telephone"?: Text | readonly Text[];
    /** For an {@link http://schema.org/Organization Organization} (typically a {@link http://schema.org/NewsMediaOrganization NewsMediaOrganization}), a statement about policy on use of unnamed sources and the decision process required. */
    "unnamedSourcesPolicy"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** The Value-added Tax ID of the organization or person. */
    "vatID"?: Text | readonly Text[];
};
/** An organization such as a school, NGO, corporation, club, etc. */
export declare type Organization = ({
    "@type": "Organization";
} & OrganizationBase) | (Airline | Consortium | Corporation | EducationalOrganization | FundingScheme | GovernmentOrganization | LibrarySystem | LocalBusiness | MedicalOrganization | NewsMediaOrganization | NGO | PerformingGroup | Project | SportsOrganization | WorkersUnion | string);
declare type OrganizationRoleBase = RoleBase & {
    /** A number associated with a role in an organization, for example, the number on an athlete's jersey. */
    "numberedPosition"?: Number | readonly Number[];
};
/** A subclass of Role used to describe roles within organizations. */
export declare type OrganizationRole = ({
    "@type": "OrganizationRole";
} & OrganizationRoleBase) | EmployeeRole;
declare type OrganizeActionBase = ActionBase;
/** The act of manipulating/administering/supervising/controlling one or more objects. */
export declare type OrganizeAction = ({
    "@type": "OrganizeAction";
} & OrganizeActionBase) | (AllocateAction | ApplyAction | BookmarkAction | PlanAction);
declare type OutletStoreBase = StoreBase;
/** An outlet store. */
export declare type OutletStore = ({
    "@type": "OutletStore";
} & OutletStoreBase) | string;
declare type OwnershipInfoBase = StructuredValueBase & {
    /** The organization or person from which the product was acquired. */
    "acquiredFrom"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The date and time of obtaining the product. */
    "ownedFrom"?: DateTime | readonly DateTime[];
    /** The date and time of giving up ownership on the product. */
    "ownedThrough"?: DateTime | readonly DateTime[];
    /** The product that this structured value is referring to. */
    "typeOfGood"?: (Product | Service) | readonly (Product | Service)[];
};
/** A structured value providing information about when a certain organization or person owned a certain product. */
export declare type OwnershipInfo = {
    "@type": "OwnershipInfo";
} & OwnershipInfoBase;
declare type PaintActionBase = CreateActionBase;
/** The act of producing a painting, typically with paint and canvas as instruments. */
export declare type PaintAction = {
    "@type": "PaintAction";
} & PaintActionBase;
declare type PaintingBase = CreativeWorkBase;
/** A painting. */
export declare type Painting = {
    "@type": "Painting";
} & PaintingBase;
declare type PalliativeProcedureBase = (MedicalTherapyBase & MedicalProcedureBase);
/** A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition. */
export declare type PalliativeProcedure = {
    "@type": "PalliativeProcedure";
} & PalliativeProcedureBase;
declare type ParcelDeliveryBase = IntangibleBase & {
    /**
     * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
     * @deprecated Consider using http://schema.org/provider instead.
     */
    "carrier"?: Organization | readonly Organization[];
    /** Destination address. */
    "deliveryAddress"?: PostalAddress | readonly PostalAddress[];
    /** New entry added as the package passes through each leg of its journey (from shipment to final delivery). */
    "deliveryStatus"?: DeliveryEvent | readonly DeliveryEvent[];
    /** The earliest date the package may arrive. */
    "expectedArrivalFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The latest date the package may arrive. */
    "expectedArrivalUntil"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** Method used for delivery or shipping. */
    "hasDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** Item(s) being shipped. */
    "itemShipped"?: Product | readonly Product[];
    /** Shipper's address. */
    "originAddress"?: PostalAddress | readonly PostalAddress[];
    /** The overall order the items in this delivery were included in. */
    "partOfOrder"?: Order | readonly Order[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Shipper tracking number. */
    "trackingNumber"?: Text | readonly Text[];
    /** Tracking url for the parcel delivery. */
    "trackingUrl"?: URL | readonly URL[];
};
/** The delivery of a parcel either via the postal service or a commercial service. */
export declare type ParcelDelivery = {
    "@type": "ParcelDelivery";
} & ParcelDeliveryBase;
declare type ParcelServiceBase = DeliveryMethodBase;
/**
 * A private parcel service as the delivery mode available for a certain offer.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#DHL
 * - http://purl.org/goodrelations/v1#FederalExpress
 * - http://purl.org/goodrelations/v1#UPS
 */
export declare type ParcelService = {
    "@type": "ParcelService";
} & ParcelServiceBase;
declare type ParentAudienceBase = PeopleAudienceBase & {
    /** Maximal age of the child. */
    "childMaxAge"?: Number | readonly Number[];
    /** Minimal age of the child. */
    "childMinAge"?: Number | readonly Number[];
};
/** A set of characteristics describing parents, who can be interested in viewing some content. */
export declare type ParentAudience = {
    "@type": "ParentAudience";
} & ParentAudienceBase;
declare type ParkBase = CivicStructureBase;
/** A park. */
export declare type Park = ({
    "@type": "Park";
} & ParkBase) | string;
declare type ParkingFacilityBase = CivicStructureBase;
/** A parking lot or other parking facility. */
export declare type ParkingFacility = ({
    "@type": "ParkingFacility";
} & ParkingFacilityBase) | string;
declare type PathologyTestBase = MedicalTestBase & {
    /** The type of tissue sample required for the test. */
    "tissueSample"?: Text | readonly Text[];
};
/** A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist. */
export declare type PathologyTest = {
    "@type": "PathologyTest";
} & PathologyTestBase;
declare type PatientBase = (PersonBase & MedicalAudienceBase) & {
    /** One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process. */
    "diagnosis"?: MedicalCondition | readonly MedicalCondition[];
    /** Specifying a drug or medicine used in a medication procedure */
    "drug"?: Drug | readonly Drug[];
    /** Specifying the health condition(s) of a patient, medical study, or other target audience. */
    "healthCondition"?: MedicalCondition | readonly MedicalCondition[];
};
/** A patient is any person recipient of health care services. */
export declare type Patient = ({
    "@type": "Patient";
} & PatientBase) | string;
declare type PawnShopBase = StoreBase;
/** A shop that will buy, or lend money against the security of, personal possessions. */
export declare type PawnShop = ({
    "@type": "PawnShop";
} & PawnShopBase) | string;
declare type PayActionBase = TradeActionBase & {
    /** A goal towards an action is taken. Can be concrete or abstract. */
    "purpose"?: (MedicalDevicePurpose | Thing) | readonly (MedicalDevicePurpose | Thing)[];
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** An agent pays a price to a participant. */
export declare type PayAction = {
    "@type": "PayAction";
} & PayActionBase;
declare type PaymentCardBase = (FinancialProductBase & PaymentMethodBase) & {
    /** A cardholder benefit that pays the cardholder a small percentage of their net expenditures. */
    "cashBack"?: (Boolean | Number) | readonly (Boolean | Number)[];
    /** A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology. */
    "contactlessPayment"?: Boolean | readonly Boolean[];
    /** A floor limit is the amount of money above which credit card transactions must be authorized. */
    "floorLimit"?: MonetaryAmount | readonly MonetaryAmount[];
};
/** A payment method using a credit, debit, store or other card to associate the payment with an account. */
export declare type PaymentCard = ({
    "@type": "PaymentCard";
} & PaymentCardBase) | CreditCard;
declare type PaymentChargeSpecificationBase = PriceSpecificationBase & {
    /** The delivery method(s) to which the delivery charge or payment charge specification applies. */
    "appliesToDeliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** The payment method(s) to which the payment charge specification applies. */
    "appliesToPaymentMethod"?: PaymentMethod | readonly PaymentMethod[];
};
/** The costs of settling the payment using a particular payment method. */
export declare type PaymentChargeSpecification = {
    "@type": "PaymentChargeSpecification";
} & PaymentChargeSpecificationBase;
declare type PaymentMethodBase = EnumerationBase;
/**
 * A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#ByBankTransferInAdvance
 * - http://purl.org/goodrelations/v1#ByInvoice
 * - http://purl.org/goodrelations/v1#Cash
 * - http://purl.org/goodrelations/v1#CheckInAdvance
 * - http://purl.org/goodrelations/v1#COD
 * - http://purl.org/goodrelations/v1#DirectDebit
 * - http://purl.org/goodrelations/v1#GoogleCheckout
 * - http://purl.org/goodrelations/v1#PayPal
 * - http://purl.org/goodrelations/v1#PaySwarm
 */
export declare type PaymentMethod = ({
    "@type": "PaymentMethod";
} & PaymentMethodBase) | PaymentCard;
declare type PaymentServiceBase = FinancialProductBase;
/** A Service to transfer funds from a person or organization to a beneficiary person or organization. */
export declare type PaymentService = {
    "@type": "PaymentService";
} & PaymentServiceBase;
declare type PaymentStatusTypeBase = EnumerationBase;
/** A specific payment status. For example, PaymentDue, PaymentComplete, etc. */
export declare type PaymentStatusType = "http://schema.org/PaymentAutomaticallyApplied" | "http://schema.org/PaymentComplete" | "http://schema.org/PaymentDeclined" | "http://schema.org/PaymentDue" | "http://schema.org/PaymentPastDue" | ({
    "@type": "PaymentStatusType";
} & PaymentStatusTypeBase);
export declare const PaymentStatusType: {
    /** An automatic payment system is in place and will be used. */
    PaymentAutomaticallyApplied: "http://schema.org/PaymentAutomaticallyApplied";
    /** The payment has been received and processed. */
    PaymentComplete: "http://schema.org/PaymentComplete";
    /** The payee received the payment, but it was declined for some reason. */
    PaymentDeclined: "http://schema.org/PaymentDeclined";
    /** The payment is due, but still within an acceptable time to be received. */
    PaymentDue: "http://schema.org/PaymentDue";
    /** The payment is due and considered late. */
    PaymentPastDue: "http://schema.org/PaymentPastDue";
};
declare type PeopleAudienceBase = AudienceBase & {
    /** Specifying the health condition(s) of a patient, medical study, or other target audience. */
    "healthCondition"?: MedicalCondition | readonly MedicalCondition[];
    /** Audiences defined by a person's gender. */
    "requiredGender"?: Text | readonly Text[];
    /** Audiences defined by a person's maximum age. */
    "requiredMaxAge"?: Integer | readonly Integer[];
    /** Audiences defined by a person's minimum age. */
    "requiredMinAge"?: Integer | readonly Integer[];
    /** The gender of the person or audience. */
    "suggestedGender"?: Text | readonly Text[];
    /** Maximal age recommended for viewing content. */
    "suggestedMaxAge"?: Number | readonly Number[];
    /** Minimal age recommended for viewing content. */
    "suggestedMinAge"?: Number | readonly Number[];
};
/** A set of characteristics belonging to people, e.g. who compose an item's target audience. */
export declare type PeopleAudience = ({
    "@type": "PeopleAudience";
} & PeopleAudienceBase) | (MedicalAudience | ParentAudience);
declare type PerformActionBase = PlayActionBase & {
    /** A sub property of location. The entertainment business where the action occurred. */
    "entertainmentBusiness"?: EntertainmentBusiness | readonly EntertainmentBusiness[];
};
/** The act of participating in performance arts. */
export declare type PerformAction = {
    "@type": "PerformAction";
} & PerformActionBase;
declare type PerformanceRoleBase = RoleBase & {
    /** The name of a character played in some acting or performing role, i.e. in a PerformanceRole. */
    "characterName"?: Text | readonly Text[];
};
/** A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc. */
export declare type PerformanceRole = {
    "@type": "PerformanceRole";
} & PerformanceRoleBase;
declare type PerformingArtsTheaterBase = CivicStructureBase;
/** A theater or other performing art center. */
export declare type PerformingArtsTheater = ({
    "@type": "PerformingArtsTheater";
} & PerformingArtsTheaterBase) | string;
declare type PerformingGroupBase = OrganizationBase;
/** A performance group, such as a band, an orchestra, or a circus. */
export declare type PerformingGroup = ({
    "@type": "PerformingGroup";
} & PerformingGroupBase) | (DanceGroup | MusicGroup | TheaterGroup | string);
declare type PeriodicalBase = CreativeWorkSeriesBase;
/**
 * A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.
 *
 * See also {@link http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html blog post}.
 */
export declare type Periodical = ({
    "@type": "Periodical";
} & PeriodicalBase) | (ComicSeries | Newspaper);
declare type PermitBase = IntangibleBase & {
    /** The organization issuing the ticket or permit. */
    "issuedBy"?: Organization | readonly Organization[];
    /** The service through with the permit was granted. */
    "issuedThrough"?: Service | readonly Service[];
    /** The target audience for this permit. */
    "permitAudience"?: Audience | readonly Audience[];
    /** The duration of validity of a permit or similar thing. */
    "validFor"?: Duration | readonly Duration[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The geographic area where a permit or similar thing is valid. */
    "validIn"?: AdministrativeArea | readonly AdministrativeArea[];
    /** The date when the item is no longer valid. */
    "validUntil"?: Date | readonly Date[];
};
/** A permit issued by an organization, e.g. a parking pass. */
export declare type Permit = ({
    "@type": "Permit";
} & PermitBase) | GovernmentPermit;
declare type PersonBase = ThingBase & {
    /** An additional name for a Person, can be used for a middle name. */
    "additionalName"?: Text | readonly Text[];
    /** Physical address of the item. */
    "address"?: (PostalAddress | Text) | readonly (PostalAddress | Text)[];
    /** An organization that this person is affiliated with. For example, a school/university, a club, or a team. */
    "affiliation"?: Organization | readonly Organization[];
    /** An organization that the person is an alumni of. */
    "alumniOf"?: (EducationalOrganization | Organization) | readonly (EducationalOrganization | Organization)[];
    /** An award won by or for this item. */
    "award"?: Text | readonly Text[];
    /**
     * Awards won by or for this item.
     * @deprecated Consider using http://schema.org/award instead.
     */
    "awards"?: Text | readonly Text[];
    /** Date of birth. */
    "birthDate"?: Date | readonly Date[];
    /** The place where the person was born. */
    "birthPlace"?: Place | readonly Place[];
    /** The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person. */
    "brand"?: (Brand | Organization) | readonly (Brand | Organization)[];
    /** A {@link https://en.wikipedia.org/wiki/Call_sign callsign}, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. */
    "callSign"?: Text | readonly Text[];
    /** A child of the person. */
    "children"?: Person | readonly Person[];
    /** A colleague of the person. */
    "colleague"?: (Person | URL) | readonly (Person | URL)[];
    /**
     * A colleague of the person.
     * @deprecated Consider using http://schema.org/colleague instead.
     */
    "colleagues"?: Person | readonly Person[];
    /** A contact point for a person or organization. */
    "contactPoint"?: ContactPoint | readonly ContactPoint[];
    /**
     * A contact point for a person or organization.
     * @deprecated Consider using http://schema.org/contactPoint instead.
     */
    "contactPoints"?: ContactPoint | readonly ContactPoint[];
    /** Date of death. */
    "deathDate"?: Date | readonly Date[];
    /** The place where the person died. */
    "deathPlace"?: Place | readonly Place[];
    /** The Dun &amp; Bradstreet DUNS number for identifying an organization or business person. */
    "duns"?: Text | readonly Text[];
    /** Email address. */
    "email"?: Text | readonly Text[];
    /** Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property. */
    "familyName"?: Text | readonly Text[];
    /** The fax number. */
    "faxNumber"?: Text | readonly Text[];
    /** The most generic uni-directional social relation. */
    "follows"?: Person | readonly Person[];
    /** A person or organization that supports (sponsors) something through some kind of financial contribution. */
    "funder"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Gender of something, typically a {@link http://schema.org/Person Person}, but possibly also fictional characters, animals, etc. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The {@link http://schema.org/gender gender} property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender {@link http://schema.org/SportsTeam SportsTeam} can be indicated with a text value of "Mixed". */
    "gender"?: (GenderType | Text) | readonly (GenderType | Text)[];
    /** Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property. */
    "givenName"?: Text | readonly Text[];
    /** The {@link http://www.gs1.org/gln Global Location Number} (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations. */
    "globalLocationNumber"?: Text | readonly Text[];
    /** A credential awarded to the Person or Organization. */
    "hasCredential"?: EducationalOccupationalCredential | readonly EducationalOccupationalCredential[];
    /** The Person's occupation. For past professions, use Role for expressing dates. */
    "hasOccupation"?: Occupation | readonly Occupation[];
    /** Indicates an OfferCatalog listing for this Organization, Person, or Service. */
    "hasOfferCatalog"?: OfferCatalog | readonly OfferCatalog[];
    /** Points-of-Sales operated by the organization or person. */
    "hasPOS"?: Place | readonly Place[];
    /** The height of the item. */
    "height"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** A contact location for a person's residence. */
    "homeLocation"?: (ContactPoint | Place) | readonly (ContactPoint | Place)[];
    /** An honorific prefix preceding a Person's name such as Dr/Mrs/Mr. */
    "honorificPrefix"?: Text | readonly Text[];
    /** An honorific suffix preceding a Person's name such as M.D. /PhD/MSCSW. */
    "honorificSuffix"?: Text | readonly Text[];
    /** The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used. */
    "interactionStatistic"?: InteractionCounter | readonly InteractionCounter[];
    /** The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place. */
    "isicV4"?: Text | readonly Text[];
    /** The job title of the person (for example, Financial Manager). */
    "jobTitle"?: (DefinedTerm | Text) | readonly (DefinedTerm | Text)[];
    /** The most generic bi-directional social/work relation. */
    "knows"?: Person | readonly Person[];
    /** Of a {@link http://schema.org/Person Person}, and less typically of an {@link http://schema.org/Organization Organization}, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or {@link http://schema.org/JobPosting JobPosting} descriptions. */
    "knowsAbout"?: (Text | Thing | URL) | readonly (Text | Thing | URL)[];
    /** Of a {@link http://schema.org/Person Person}, and less typically of an {@link http://schema.org/Organization Organization}, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. */
    "knowsLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** A pointer to products or services offered by the organization or person. */
    "makesOffer"?: Offer | readonly Offer[];
    /** An Organization (or ProgramMembership) to which this Person or Organization belongs. */
    "memberOf"?: (Organization | ProgramMembership) | readonly (Organization | ProgramMembership)[];
    /** The North American Industry Classification System (NAICS) code for a particular organization or business person. */
    "naics"?: Text | readonly Text[];
    /** Nationality of the person. */
    "nationality"?: Country | readonly Country[];
    /** The total financial value of the person as calculated by subtracting assets from liabilities. */
    "netWorth"?: (MonetaryAmount | PriceSpecification) | readonly (MonetaryAmount | PriceSpecification)[];
    /** Products owned by the organization or person. */
    "owns"?: (OwnershipInfo | Product) | readonly (OwnershipInfo | Product)[];
    /** A parent of this person. */
    "parent"?: Person | readonly Person[];
    /**
     * A parents of the person.
     * @deprecated Consider using http://schema.org/parent instead.
     */
    "parents"?: Person | readonly Person[];
    /** Event that this person is a performer or participant in. */
    "performerIn"?: Event | readonly Event[];
    /**
     * The publishingPrinciples property indicates (typically via {@link http://schema.org/URL URL}) a document describing the editorial principles of an {@link http://schema.org/Organization Organization} (or individual e.g. a {@link http://schema.org/Person Person} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {@link http://schema.org/CreativeWork CreativeWork} (e.g. {@link http://schema.org/NewsArticle NewsArticle}) the principles are those of the party primarily responsible for the creation of the {@link http://schema.org/CreativeWork CreativeWork}.
     *
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {@link http://schema.org/funder funder}) can be expressed using schema.org terminology.
     */
    "publishingPrinciples"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** The most generic familial relation. */
    "relatedTo"?: Person | readonly Person[];
    /** A pointer to products or services sought by the organization or person (demand). */
    "seeks"?: Demand | readonly Demand[];
    /** A sibling of the person. */
    "sibling"?: Person | readonly Person[];
    /**
     * A sibling of the person.
     * @deprecated Consider using http://schema.org/sibling instead.
     */
    "siblings"?: Person | readonly Person[];
    /** A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event. */
    "sponsor"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The person's spouse. */
    "spouse"?: Person | readonly Person[];
    /** The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain. */
    "taxID"?: Text | readonly Text[];
    /** The telephone number. */
    "telephone"?: Text | readonly Text[];
    /** The Value-added Tax ID of the organization or person. */
    "vatID"?: Text | readonly Text[];
    /** The weight of the product or person. */
    "weight"?: QuantitativeValue | readonly QuantitativeValue[];
    /** A contact location for a person's place of work. */
    "workLocation"?: (ContactPoint | Place) | readonly (ContactPoint | Place)[];
    /** Organizations that the person works for. */
    "worksFor"?: Organization | readonly Organization[];
};
/** A person (alive, dead, undead, or fictional). */
export declare type Person = ({
    "@type": "Person";
} & PersonBase) | (Patient | string);
declare type PetStoreBase = StoreBase;
/** A pet store. */
export declare type PetStore = ({
    "@type": "PetStore";
} & PetStoreBase) | string;
declare type PharmacyBase = (MedicalOrganizationBase & MedicalBusinessBase);
/** A pharmacy or drugstore. */
export declare type Pharmacy = ({
    "@type": "Pharmacy";
} & PharmacyBase) | string;
declare type PhotographBase = CreativeWorkBase;
/** A photograph. */
export declare type Photograph = {
    "@type": "Photograph";
} & PhotographBase;
declare type PhotographActionBase = CreateActionBase;
/** The act of capturing still images of objects using a camera. */
export declare type PhotographAction = {
    "@type": "PhotographAction";
} & PhotographActionBase;
declare type PhysicalActivityBase = LifestyleModificationBase & {
    /** The anatomy of the underlying organ system or structures associated with this entity. */
    "associatedAnatomy"?: (AnatomicalStructure | AnatomicalSystem | SuperficialAnatomy) | readonly (AnatomicalStructure | AnatomicalSystem | SuperficialAnatomy)[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /** The characteristics of associated patients, such as age, gender, race etc. */
    "epidemiology"?: Text | readonly Text[];
    /** Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition. */
    "pathophysiology"?: Text | readonly Text[];
};
/** Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan. */
export declare type PhysicalActivity = ({
    "@type": "PhysicalActivity";
} & PhysicalActivityBase) | ExercisePlan;
declare type PhysicalActivityCategoryBase = EnumerationBase;
/** Categories of physical activity, organized by physiologic classification. */
export declare type PhysicalActivityCategory = "http://schema.org/AerobicActivity" | "http://schema.org/AnaerobicActivity" | "http://schema.org/Balance" | "http://schema.org/Flexibility" | "http://schema.org/LeisureTimeActivity" | "http://schema.org/OccupationalActivity" | "http://schema.org/StrengthTraining" | ({
    "@type": "PhysicalActivityCategory";
} & PhysicalActivityCategoryBase);
export declare const PhysicalActivityCategory: {
    /** Physical activity of relatively low intensity that depends primarily on the aerobic energy-generating process; during activity, the aerobic metabolism uses oxygen to adequately meet energy demands during exercise. */
    AerobicActivity: "http://schema.org/AerobicActivity";
    /** Physical activity that is of high-intensity which utilizes the anaerobic metabolism of the body. */
    AnaerobicActivity: "http://schema.org/AnaerobicActivity";
    /** Physical activity that is engaged to help maintain posture and balance. */
    Balance: "http://schema.org/Balance";
    /** Physical activity that is engaged in to improve joint and muscle flexibility. */
    Flexibility: "http://schema.org/Flexibility";
    /** Any physical activity engaged in for recreational purposes. Examples may include ballroom dancing, roller skating, canoeing, fishing, etc. */
    LeisureTimeActivity: "http://schema.org/LeisureTimeActivity";
    /** Any physical activity engaged in for job-related purposes. Examples may include waiting tables, maid service, carrying a mailbag, picking fruits or vegetables, construction work, etc. */
    OccupationalActivity: "http://schema.org/OccupationalActivity";
    /** Physical activity that is engaged in to improve muscle and bone strength. Also referred to as resistance training. */
    StrengthTraining: "http://schema.org/StrengthTraining";
};
declare type PhysicalExamBase = (MedicalProcedureBase & MedicalEnumerationBase);
/** A type of physical examination of a patient performed by a physician. */
export declare type PhysicalExam = "http://schema.org/Abdomen" | "http://schema.org/Appearance" | "http://schema.org/CardiovascularExam" | "http://schema.org/Ear" | "http://schema.org/Eye" | "http://schema.org/Genitourinary" | "http://schema.org/Head" | "http://schema.org/Lung" | "http://schema.org/MusculoskeletalExam" | "http://schema.org/Neck" | "http://schema.org/Neuro" | "http://schema.org/Nose" | "http://schema.org/Skin" | "http://schema.org/Throat" | ({
    "@type": "PhysicalExam";
} & PhysicalExamBase);
export declare const PhysicalExam: {
    /** Abdomen clinical examination. */
    Abdomen: "http://schema.org/Abdomen";
    /** Appearance assessment with clinical examination. */
    Appearance: "http://schema.org/Appearance";
    /** Cardiovascular system assessment withclinical examination. */
    CardiovascularExam: "http://schema.org/CardiovascularExam";
    /** Ear function assessment with clinical examination. */
    Ear: "http://schema.org/Ear";
    /** Eye or ophtalmological function assessment with clinical examination. */
    Eye: "http://schema.org/Eye";
    /** Genitourinary system function assessment with clinical examination. */
    Genitourinary: "http://schema.org/Genitourinary";
    /** Head assessment with clinical examination. */
    Head: "http://schema.org/Head";
    /** Lung and respiratory system clinical examination. */
    Lung: "http://schema.org/Lung";
    /** Musculoskeletal system clinical examination. */
    MusculoskeletalExam: "http://schema.org/MusculoskeletalExam";
    /** Neck assessment with clinical examination. */
    Neck: "http://schema.org/Neck";
    /** Neurological system clinical examination. */
    Neuro: "http://schema.org/Neuro";
    /** Nose function assessment with clinical examination. */
    Nose: "http://schema.org/Nose";
    /** Skin assessment with clinical examination. */
    Skin: "http://schema.org/Skin";
    /** Throat assessment with  clinical examination. */
    Throat: "http://schema.org/Throat";
};
declare type PhysicalTherapyBase = MedicalTherapyBase;
/** A process of progressive physical care and rehabilitation aimed at improving a health condition. */
export declare type PhysicalTherapy = {
    "@type": "PhysicalTherapy";
} & PhysicalTherapyBase;
declare type PhysicianBase = (MedicalOrganizationBase & MedicalBusinessBase) & {
    /** A medical service available from this provider. */
    "availableService"?: (MedicalProcedure | MedicalTest | MedicalTherapy) | readonly (MedicalProcedure | MedicalTest | MedicalTherapy)[];
    /** A hospital with which the physician or office is affiliated. */
    "hospitalAffiliation"?: Hospital | readonly Hospital[];
    /** A medical specialty of the provider. */
    "medicalSpecialty"?: MedicalSpecialty | readonly MedicalSpecialty[];
};
/** A doctor's office. */
export declare type Physician = ({
    "@type": "Physician";
} & PhysicianBase) | string;
declare type PlaceBase = ThingBase & {
    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.
     *
     * Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     */
    "additionalProperty"?: PropertyValue | readonly PropertyValue[];
    /** Physical address of the item. */
    "address"?: (PostalAddress | Text) | readonly (PostalAddress | Text)[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs. */
    "amenityFeature"?: LocationFeatureSpecification | readonly LocationFeatureSpecification[];
    /**
     * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.
     *
     * For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
     */
    "branchCode"?: Text | readonly Text[];
    /**
     * The basic containment relation between a place and one that contains it.
     * @deprecated Consider using http://schema.org/containedInPlace instead.
     */
    "containedIn"?: Place | readonly Place[];
    /** The basic containment relation between a place and one that contains it. */
    "containedInPlace"?: Place | readonly Place[];
    /** The basic containment relation between a place and another that it contains. */
    "containsPlace"?: Place | readonly Place[];
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
    /**
     * Upcoming or past events associated with this place or organization.
     * @deprecated Consider using http://schema.org/event instead.
     */
    "events"?: Event | readonly Event[];
    /** The fax number. */
    "faxNumber"?: Text | readonly Text[];
    /** The geo coordinates of the place. */
    "geo"?: (GeoCoordinates | GeoShape) | readonly (GeoCoordinates | GeoShape)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoContains"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCoveredBy"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCovers"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoCrosses"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}) */
    "geoDisjoint"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship) */
    "geoEquals"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoIntersects"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoOverlaps"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM} ) */
    "geoTouches"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in {@link https://en.wikipedia.org/wiki/DE-9IM DE-9IM}. */
    "geoWithin"?: (GeospatialGeometry | Place) | readonly (GeospatialGeometry | Place)[];
    /** The {@link http://www.gs1.org/gln Global Location Number} (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations. */
    "globalLocationNumber"?: Text | readonly Text[];
    /** A URL to a map of the place. */
    "hasMap"?: (Map | URL) | readonly (Map | URL)[];
    /** A flag to signal that the item, event, or place is accessible for free. */
    "isAccessibleForFree"?: Boolean | readonly Boolean[];
    /** The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place. */
    "isicV4"?: Text | readonly Text[];
    /** The latitude of a location. For example `37.42242` ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). */
    "latitude"?: (Number | Text) | readonly (Number | Text)[];
    /** An associated logo. */
    "logo"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** The longitude of a location. For example `-122.08585` ({@link https://en.wikipedia.org/wiki/World_Geodetic_System WGS 84}). */
    "longitude"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * A URL to a map of the place.
     * @deprecated Consider using http://schema.org/hasMap instead.
     */
    "map"?: URL | readonly URL[];
    /**
     * A URL to a map of the place.
     * @deprecated Consider using http://schema.org/hasMap instead.
     */
    "maps"?: URL | readonly URL[];
    /** The total number of individuals that may attend an event or venue. */
    "maximumAttendeeCapacity"?: Integer | readonly Integer[];
    /** The opening hours of a certain place. */
    "openingHoursSpecification"?: OpeningHoursSpecification | readonly OpeningHoursSpecification[];
    /** A photograph of this place. */
    "photo"?: (ImageObject | Photograph) | readonly (ImageObject | Photograph)[];
    /**
     * Photographs of this place.
     * @deprecated Consider using http://schema.org/photo instead.
     */
    "photos"?: (ImageObject | Photograph) | readonly (ImageObject | Photograph)[];
    /** A flag to signal that the {@link http://schema.org/Place Place} is open to public visitors.  If this property is omitted there is no assumed default boolean value */
    "publicAccess"?: Boolean | readonly Boolean[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * Review of the item.
     * @deprecated Consider using http://schema.org/review instead.
     */
    "reviews"?: Review | readonly Review[];
    /** A slogan or motto associated with the item. */
    "slogan"?: Text | readonly Text[];
    /** Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room. */
    "smokingAllowed"?: Boolean | readonly Boolean[];
    /**
     * The special opening hours of a certain place.
     *
     * Use this to explicitly override general opening hours brought in scope by {@link http://schema.org/openingHoursSpecification openingHoursSpecification} or {@link http://schema.org/openingHours openingHours}.
     */
    "specialOpeningHoursSpecification"?: OpeningHoursSpecification | readonly OpeningHoursSpecification[];
    /** The telephone number. */
    "telephone"?: Text | readonly Text[];
};
/** Entities that have a somewhat fixed, physical extension. */
export declare type Place = ({
    "@type": "Place";
} & PlaceBase) | (Accommodation | AdministrativeArea | CivicStructure | Landform | LandmarksOrHistoricalBuildings | LocalBusiness | Residence | TouristAttraction | TouristDestination | string);
declare type PlaceOfWorshipBase = CivicStructureBase;
/** Place of worship, such as a church, synagogue, or mosque. */
export declare type PlaceOfWorship = ({
    "@type": "PlaceOfWorship";
} & PlaceOfWorshipBase) | (BuddhistTemple | Church | HinduTemple | Mosque | Synagogue | string);
declare type PlanActionBase = OrganizeActionBase & {
    /** The time the object is scheduled to. */
    "scheduledTime"?: DateTime | readonly DateTime[];
};
/** The act of planning the execution of an event/task/action/reservation/plan to a future date. */
export declare type PlanAction = ({
    "@type": "PlanAction";
} & PlanActionBase) | (CancelAction | ReserveAction | ScheduleAction);
declare type PlayBase = CreativeWorkBase;
/** A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note the peformance of a Play would be a {@link http://schema.org/TheaterEvent TheaterEvent} - the _Play_ being the {@link http://schema.org/workPerformed workPerformed}. */
export declare type Play = {
    "@type": "Play";
} & PlayBase;
declare type PlayActionBase = ActionBase & {
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** Upcoming or past event associated with this place, organization, or action. */
    "event"?: Event | readonly Event[];
};
/**
 * The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.
 *
 * Related actions:
 *
 * - {@link http://schema.org/ListenAction ListenAction}: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.
 * - {@link http://schema.org/WatchAction WatchAction}: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
 */
export declare type PlayAction = ({
    "@type": "PlayAction";
} & PlayActionBase) | (ExerciseAction | PerformAction);
declare type PlaygroundBase = CivicStructureBase;
/** A playground. */
export declare type Playground = ({
    "@type": "Playground";
} & PlaygroundBase) | string;
declare type PlumberBase = HomeAndConstructionBusinessBase;
/** A plumbing service. */
export declare type Plumber = ({
    "@type": "Plumber";
} & PlumberBase) | string;
declare type PodcastEpisodeBase = EpisodeBase;
/** A single episode of a podcast series. */
export declare type PodcastEpisode = {
    "@type": "PodcastEpisode";
} & PodcastEpisodeBase;
declare type PodcastSeasonBase = CreativeWorkSeasonBase;
/** A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used. */
export declare type PodcastSeason = {
    "@type": "PodcastSeason";
} & PodcastSeasonBase;
declare type PodcastSeriesBase = CreativeWorkSeriesBase & {
    /** The URL for the feed associated with the podcast series. This is usually RSS or Atom. */
    "webFeed"?: URL | readonly URL[];
};
/** A podcast is an episodic series of digital audio or video files which a user can download and listen to. */
export declare type PodcastSeries = {
    "@type": "PodcastSeries";
} & PodcastSeriesBase;
declare type PoliceStationBase = (CivicStructureBase & EmergencyServiceBase);
/** A police station. */
export declare type PoliceStation = ({
    "@type": "PoliceStation";
} & PoliceStationBase) | string;
declare type PondBase = BodyOfWaterBase;
/** A pond. */
export declare type Pond = ({
    "@type": "Pond";
} & PondBase) | string;
declare type PostalAddressBase = ContactPointBase & {
    /** The country. For example, USA. You can also provide the two-letter {@link http://en.wikipedia.org/wiki/ISO_3166-1 ISO 3166-1 alpha-2 country code}. */
    "addressCountry"?: (Country | Text) | readonly (Country | Text)[];
    /** The locality in which the street address is, and which is in the region. For example, Mountain View. */
    "addressLocality"?: Text | readonly Text[];
    /** The region in which the locality is, and which is in the country. For example, California or another appropriate first-level {@link https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country Administrative division} */
    "addressRegion"?: Text | readonly Text[];
    /** The postal code. For example, 94043. */
    "postalCode"?: Text | readonly Text[];
    /** The post office box number for PO box addresses. */
    "postOfficeBoxNumber"?: Text | readonly Text[];
    /** The street address. For example, 1600 Amphitheatre Pkwy. */
    "streetAddress"?: Text | readonly Text[];
};
/** The mailing address. */
export declare type PostalAddress = {
    "@type": "PostalAddress";
} & PostalAddressBase;
declare type PosterBase = CreativeWorkBase;
/** A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something. */
export declare type Poster = {
    "@type": "Poster";
} & PosterBase;
declare type PostOfficeBase = GovernmentOfficeBase;
/** A post office. */
export declare type PostOffice = ({
    "@type": "PostOffice";
} & PostOfficeBase) | string;
declare type PreOrderActionBase = TradeActionBase;
/** An agent orders a (not yet released) object/product/service to be delivered/sent. */
export declare type PreOrderAction = {
    "@type": "PreOrderAction";
} & PreOrderActionBase;
declare type PrependActionBase = InsertActionBase;
/** The act of inserting at the beginning if an ordered collection. */
export declare type PrependAction = {
    "@type": "PrependAction";
} & PrependActionBase;
declare type PreschoolBase = EducationalOrganizationBase;
/** A preschool. */
export declare type Preschool = ({
    "@type": "Preschool";
} & PreschoolBase) | string;
declare type PresentationDigitalDocumentBase = DigitalDocumentBase;
/** A file containing slides or used for a presentation. */
export declare type PresentationDigitalDocument = {
    "@type": "PresentationDigitalDocument";
} & PresentationDigitalDocumentBase;
declare type PreventionIndicationBase = MedicalIndicationBase;
/** An indication for preventing an underlying condition, symptom, etc. */
export declare type PreventionIndication = {
    "@type": "PreventionIndication";
} & PreventionIndicationBase;
declare type PriceSpecificationBase = StructuredValueBase & {
    /** The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity. */
    "eligibleQuantity"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount. */
    "eligibleTransactionVolume"?: PriceSpecification | readonly PriceSpecification[];
    /** The highest price if the price is a range. */
    "maxPrice"?: Number | readonly Number[];
    /** The lowest price if the price is a range. */
    "minPrice"?: Number | readonly Number[];
    /**
     * The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
     *
     * Usage guidelines:
     *
     * - Use the {@link http://schema.org/priceCurrency priceCurrency} property (with standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR") instead of including {@link http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign ambiguous symbols} such as '$' in the value.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     * - Note that both {@link http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute RDFa} and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     */
    "price"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * The currency of the price, or a price component when attached to {@link http://schema.org/PriceSpecification PriceSpecification} and its subtypes.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "priceCurrency"?: Text | readonly Text[];
    /** The date when the item becomes valid. */
    "validFrom"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. */
    "validThrough"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** Specifies whether the applicable value-added tax (VAT) is included in the price specification or not. */
    "valueAddedTaxIncluded"?: Boolean | readonly Boolean[];
};
/** A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use {@link http://schema.org/MonetaryAmount MonetaryAmount} to describe independent amounts of money such as a salary, credit card limits, etc. */
export declare type PriceSpecification = ({
    "@type": "PriceSpecification";
} & PriceSpecificationBase) | (CompoundPriceSpecification | DeliveryChargeSpecification | PaymentChargeSpecification | UnitPriceSpecification);
declare type ProductBase = ThingBase & {
    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.
     *
     * Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     */
    "additionalProperty"?: PropertyValue | readonly PropertyValue[];
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** An award won by or for this item. */
    "award"?: Text | readonly Text[];
    /**
     * Awards won by or for this item.
     * @deprecated Consider using http://schema.org/award instead.
     */
    "awards"?: Text | readonly Text[];
    /** The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person. */
    "brand"?: (Brand | Organization) | readonly (Brand | Organization)[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /** The color of the product. */
    "color"?: Text | readonly Text[];
    /** The depth of the item. */
    "depth"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** A Global Trade Item Number ({@link https://www.gs1.org/standards/id-keys/gtin GTIN}). GTINs identify trade items, including products and services, using numeric identification codes. The {@link http://schema.org/gtin gtin} property generalizes the earlier {@link http://schema.org/gtin8 gtin8}, {@link http://schema.org/gtin12 gtin12}, {@link http://schema.org/gtin13 gtin13}, and {@link http://schema.org/gtin14 gtin14} properties. The GS1 {@link https://www.gs1.org/standards/Digital-Link/ digital link specifications} express GTINs as URLs. A correct {@link http://schema.org/gtin gtin} value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a {@link https://www.gs1.org/services/check-digit-calculator valid GS1 check digit} and meet the other rules for valid GTINs. See also {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1's GTIN Summary} and {@link https://en.wikipedia.org/wiki/Global_Trade_Item_Number Wikipedia} for more details. Left-padding of the gtin values is not required or encouraged. */
    "gtin"?: Text | readonly Text[];
    /** The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin12"?: Text | readonly Text[];
    /** The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin13"?: Text | readonly Text[];
    /** The GTIN-14 code of the product, or the product to which the offer refers. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin14"?: Text | readonly Text[];
    /** The {@link http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx GTIN-8} code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See {@link http://www.gs1.org/barcodes/technical/idkeys/gtin GS1 GTIN Summary} for more details. */
    "gtin8"?: Text | readonly Text[];
    /** Indicates a MerchantReturnPolicy that may be applicable. */
    "hasMerchantReturnPolicy"?: MerchantReturnPolicy | readonly MerchantReturnPolicy[];
    /**
     * Indicates a ProductReturnPolicy that may be applicable.
     * @deprecated Consider using http://schema.org/hasMerchantReturnPolicy instead.
     */
    "hasProductReturnPolicy"?: ProductReturnPolicy | readonly ProductReturnPolicy[];
    /** The height of the item. */
    "height"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** A pointer to another product (or multiple products) for which this product is an accessory or spare part. */
    "isAccessoryOrSparePartFor"?: Product | readonly Product[];
    /** A pointer to another product (or multiple products) for which this product is a consumable. */
    "isConsumableFor"?: Product | readonly Product[];
    /** A pointer to another, somehow related product (or multiple products). */
    "isRelatedTo"?: (Product | Service) | readonly (Product | Service)[];
    /** A pointer to another, functionally similar product (or multiple products). */
    "isSimilarTo"?: (Product | Service) | readonly (Product | Service)[];
    /** A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer. */
    "itemCondition"?: OfferItemCondition | readonly OfferItemCondition[];
    /** An associated logo. */
    "logo"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** The manufacturer of the product. */
    "manufacturer"?: Organization | readonly Organization[];
    /** A material that something is made from, e.g. leather, wool, cotton, paper. */
    "material"?: (Product | Text | URL) | readonly (Product | Text | URL)[];
    /** The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties. */
    "model"?: (ProductModel | Text) | readonly (ProductModel | Text)[];
    /** The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers. */
    "mpn"?: Text | readonly Text[];
    /** Indicates the {@link https://en.wikipedia.org/wiki/NATO_Stock_Number NATO stock number} (nsn) of a {@link http://schema.org/Product Product}. */
    "nsn"?: Text | readonly Text[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** The product identifier, such as ISBN. For example: `meta itemprop="productID" content="isbn:123-456-789"`. */
    "productID"?: Text | readonly Text[];
    /** The date of production of the item, e.g. vehicle. */
    "productionDate"?: Date | readonly Date[];
    /** The date the item e.g. vehicle was purchased by the current owner. */
    "purchaseDate"?: Date | readonly Date[];
    /** The release date of a product or product model. This can be used to distinguish the exact variant of a product. */
    "releaseDate"?: Date | readonly Date[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * Review of the item.
     * @deprecated Consider using http://schema.org/review instead.
     */
    "reviews"?: Review | readonly Review[];
    /** The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. */
    "sku"?: Text | readonly Text[];
    /** A slogan or motto associated with the item. */
    "slogan"?: Text | readonly Text[];
    /** The weight of the product or person. */
    "weight"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The width of the item. */
    "width"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
};
/** Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online. */
export declare type Product = ({
    "@type": "Product";
} & ProductBase) | (IndividualProduct | ProductModel | SomeProducts | Vehicle);
declare type ProductModelBase = ProductBase & {
    /** A pointer to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. */
    "isVariantOf"?: ProductModel | readonly ProductModel[];
    /** A pointer from a previous, often discontinued variant of the product to its newer variant. */
    "predecessorOf"?: ProductModel | readonly ProductModel[];
    /** A pointer from a newer variant of a product  to its previous, often discontinued predecessor. */
    "successorOf"?: ProductModel | readonly ProductModel[];
};
/** A datasheet or vendor specification of a product (in the sense of a prototypical description). */
export declare type ProductModel = {
    "@type": "ProductModel";
} & ProductModelBase;
declare type ProductReturnEnumerationBase = EnumerationBase;
/**
 * ProductReturnEnumeration enumerates several kinds of product return policy. Note that this structure may not capture all aspects of the policy.
 * @deprecated Use MerchantReturnEnumeration instead.
 */
export declare type ProductReturnEnumeration = "http://schema.org/ProductReturnFiniteReturnWindow" | "http://schema.org/ProductReturnNotPermitted" | "http://schema.org/ProductReturnUnlimitedWindow" | "http://schema.org/ProductReturnUnspecified" | ({
    "@type": "ProductReturnEnumeration";
} & ProductReturnEnumerationBase);
export declare const ProductReturnEnumeration: {
    /** ProductReturnFiniteReturnWindow: there is a finite window for product returns. */
    ProductReturnFiniteReturnWindow: "http://schema.org/ProductReturnFiniteReturnWindow";
    /** ProductReturnNotPermitted: product returns are not permitted. */
    ProductReturnNotPermitted: "http://schema.org/ProductReturnNotPermitted";
    /** ProductReturnUnlimitedWindow: there is an unlimited window for product returns. */
    ProductReturnUnlimitedWindow: "http://schema.org/ProductReturnUnlimitedWindow";
    /** ProductReturnUnspecified: a product return policy is not specified here. */
    ProductReturnUnspecified: "http://schema.org/ProductReturnUnspecified";
};
declare type ProductReturnPolicyBase = IntangibleBase & {
    /**
     * The productReturnDays property indicates the number of days (from purchase) within which relevant product return policy is applicable.
     * @deprecated Consider using http://schema.org/merchantReturnDays instead.
     */
    "productReturnDays"?: Integer | readonly Integer[];
    /**
     * Indicates a Web page or service by URL, for product return.
     * @deprecated Consider using http://schema.org/merchantReturnLink instead.
     */
    "productReturnLink"?: URL | readonly URL[];
};
/**
 * A ProductReturnPolicy provides information about product return policies associated with an {@link http://schema.org/Organization Organization} or {@link http://schema.org/Product Product}.
 * @deprecated Use MerchantReturnPolicy instead.
 */
export declare type ProductReturnPolicy = {
    "@type": "ProductReturnPolicy";
} & ProductReturnPolicyBase;
declare type ProfessionalServiceBase = LocalBusinessBase;
/**
 * Original definition: "provider of professional services."
 *
 * The general {@link http://schema.org/ProfessionalService ProfessionalService} type for local businesses was deprecated due to confusion with {@link http://schema.org/Service Service}. For reference, the types that it included were: {@link http://schema.org/Dentist Dentist},        {@link http://schema.org/AccountingService AccountingService}, {@link http://schema.org/Attorney Attorney}, {@link http://schema.org/Notary Notary}, as well as types for several kinds of {@link http://schema.org/HomeAndConstructionBusiness HomeAndConstructionBusiness}: {@link http://schema.org/Electrician Electrician}, {@link http://schema.org/GeneralContractor GeneralContractor},        {@link http://schema.org/HousePainter HousePainter}, {@link http://schema.org/Locksmith Locksmith}, {@link http://schema.org/Plumber Plumber}, {@link http://schema.org/RoofingContractor RoofingContractor}. {@link http://schema.org/LegalService LegalService} was introduced as a more inclusive supertype of {@link http://schema.org/Attorney Attorney}.
 */
export declare type ProfessionalService = ({
    "@type": "ProfessionalService";
} & ProfessionalServiceBase) | string;
declare type ProfilePageBase = WebPageBase;
/** Web page type: Profile page. */
export declare type ProfilePage = {
    "@type": "ProfilePage";
} & ProfilePageBase;
declare type ProgramMembershipBase = IntangibleBase & {
    /** The organization (airline, travelers' club, etc.) the membership is made with. */
    "hostingOrganization"?: Organization | readonly Organization[];
    /** A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals. */
    "member"?: (Organization | Person) | readonly (Organization | Person)[];
    /**
     * A member of this organization.
     * @deprecated Consider using http://schema.org/member instead.
     */
    "members"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A unique identifier for the membership. */
    "membershipNumber"?: Text | readonly Text[];
    /** The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (e.g. stars, miles, etc.) */
    "membershipPointsEarned"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** The program providing the membership. */
    "programName"?: Text | readonly Text[];
};
/** Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc. */
export declare type ProgramMembership = {
    "@type": "ProgramMembership";
} & ProgramMembershipBase;
declare type ProjectBase = OrganizationBase;
/** An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.Use properties from {@link http://schema.org/Organization Organization}, {@link http://schema.org/subOrganization subOrganization}/{@link http://schema.org/parentOrganization parentOrganization} to indicate project sub-structures. */
export declare type Project = ({
    "@type": "Project";
} & ProjectBase) | (FundingAgency | ResearchProject | string);
declare type PronounceableTextBase = Text & {
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** Representation of a text {@link http://schema.org/textValue textValue} using the specified {@link http://schema.org/speechToTextMarkup speechToTextMarkup}. For example the city name of Houston in IPA: /\u02C8hju\u02D0st\u0259n/. */
    "phoneticText"?: Text | readonly Text[];
    /** Form of markup used. eg. {@link https://www.w3.org/TR/speech-synthesis11 SSML} or {@link https://www.wikidata.org/wiki/Property:P898 IPA}. */
    "speechToTextMarkup"?: Text | readonly Text[];
    /** Text value being annotated. */
    "textValue"?: Text | readonly Text[];
};
/** Data type: PronounceableText. */
export declare type PronounceableText = PronounceableTextBase;
declare type PropertyBase = IntangibleBase & {
    /** Relates a property to a class that is (one of) the type(s) the property is expected to be used on. */
    "domainIncludes"?: Class | readonly Class[];
    /** Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used. */
    "inverseOf"?: Property | readonly Property[];
    /** Relates a property to a class that constitutes (one of) the expected type(s) for values of the property. */
    "rangeIncludes"?: Class | readonly Class[];
    /** Relates a term (i.e. a property, class or enumeration) to one that supersedes it. */
    "supersededBy"?: (Class | Enumeration | Property) | readonly (Class | Enumeration | Property)[];
};
/** A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property. */
export declare type Property = {
    "@type": "Property";
} & PropertyBase;
declare type PropertyValueBase = StructuredValueBase & {
    /** The upper value of some characteristic or property. */
    "maxValue"?: Number | readonly Number[];
    /**
     * A technique or technology used in a {@link http://schema.org/Dataset Dataset} (or {@link http://schema.org/DataDownload DataDownload}, {@link http://schema.org/DataCatalog DataCatalog}),corresponding to the method used for measuring the corresponding variable(s) (described using {@link http://schema.org/variableMeasured variableMeasured}). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.
     *
     * For example, if {@link http://schema.org/variableMeasured variableMeasured} is: molecule concentration, {@link http://schema.org/measurementTechnique measurementTechnique} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".
     *
     * If the {@link http://schema.org/variableMeasured variableMeasured} is "depression rating", the {@link http://schema.org/measurementTechnique measurementTechnique} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
     *
     * If there are several {@link http://schema.org/variableMeasured variableMeasured} properties recorded for some given data object, use a {@link http://schema.org/PropertyValue PropertyValue} for each {@link http://schema.org/variableMeasured variableMeasured} and attach the corresponding {@link http://schema.org/measurementTechnique measurementTechnique}.
     */
    "measurementTechnique"?: (Text | URL) | readonly (Text | URL)[];
    /** The lower value of some characteristic or property. */
    "minValue"?: Number | readonly Number[];
    /** A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be(1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).Standards bodies should promote a standard prefix for the identifiers of properties from their standards. */
    "propertyID"?: (Text | URL) | readonly (Text | URL)[];
    /** The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. */
    "unitCode"?: (Text | URL) | readonly (Text | URL)[];
    /** A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for{@link unitCode unitCode}. */
    "unitText"?: Text | readonly Text[];
    /**
     * The value of the quantitative value or property value node.
     *
     * - For {@link http://schema.org/QuantitativeValue QuantitativeValue} and {@link http://schema.org/MonetaryAmount MonetaryAmount}, the recommended type for values is 'Number'.
     * - For {@link http://schema.org/PropertyValue PropertyValue}, it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "value"?: (Boolean | Number | StructuredValue | Text) | readonly (Boolean | Number | StructuredValue | Text)[];
    /** A pointer to a secondary value that provides additional information on the original value, e.g. a reference temperature. */
    "valueReference"?: (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue) | readonly (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue)[];
};
/**
 * A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.
 *
 * Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
 */
export declare type PropertyValue = ({
    "@type": "PropertyValue";
} & PropertyValueBase) | LocationFeatureSpecification;
declare type PropertyValueSpecificationBase = IntangibleBase & {
    /** The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values. */
    "defaultValue"?: (Text | Thing) | readonly (Text | Thing)[];
    /** The upper value of some characteristic or property. */
    "maxValue"?: Number | readonly Number[];
    /** The lower value of some characteristic or property. */
    "minValue"?: Number | readonly Number[];
    /** Whether multiple values are allowed for the property.  Default is false. */
    "multipleValues"?: Boolean | readonly Boolean[];
    /** Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form. */
    "readonlyValue"?: Boolean | readonly Boolean[];
    /** The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification. */
    "stepValue"?: Number | readonly Number[];
    /** Specifies the allowed range for number of characters in a literal value. */
    "valueMaxLength"?: Number | readonly Number[];
    /** Specifies the minimum allowed range for number of characters in a literal value. */
    "valueMinLength"?: Number | readonly Number[];
    /** Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name. */
    "valueName"?: Text | readonly Text[];
    /** Specifies a regular expression for testing literal values according to the HTML spec. */
    "valuePattern"?: Text | readonly Text[];
    /** Whether the property must be filled in to complete the action.  Default is false. */
    "valueRequired"?: Boolean | readonly Boolean[];
};
/** A Property value specification. */
export declare type PropertyValueSpecification = {
    "@type": "PropertyValueSpecification";
} & PropertyValueSpecificationBase;
declare type PsychologicalTreatmentBase = TherapeuticProcedureBase;
/** A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs. */
export declare type PsychologicalTreatment = {
    "@type": "PsychologicalTreatment";
} & PsychologicalTreatmentBase;
declare type PublicationEventBase = EventBase & {
    /**
     * A flag to signal that the item, event, or place is accessible for free.
     * @deprecated Consider using http://schema.org/isAccessibleForFree instead.
     */
    "free"?: Boolean | readonly Boolean[];
    /** A flag to signal that the item, event, or place is accessible for free. */
    "isAccessibleForFree"?: Boolean | readonly Boolean[];
    /** An agent associated with the publication event. */
    "publishedBy"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A broadcast service associated with the publication event. */
    "publishedOn"?: BroadcastService | readonly BroadcastService[];
};
/** A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media. */
export declare type PublicationEvent = ({
    "@type": "PublicationEvent";
} & PublicationEventBase) | (BroadcastEvent | OnDemandEvent);
declare type PublicationIssueBase = CreativeWorkBase & {
    /** Identifies the issue of publication; for example, "iii" or "2". */
    "issueNumber"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The page on which the work ends; for example "138" or "xvi". */
    "pageEnd"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The page on which the work starts; for example "135" or "xiii". */
    "pageStart"?: (Integer | Text) | readonly (Integer | Text)[];
    /** Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49". */
    "pagination"?: Text | readonly Text[];
};
/**
 * A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.
 *
 * See also {@link http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html blog post}.
 */
export declare type PublicationIssue = ({
    "@type": "PublicationIssue";
} & PublicationIssueBase) | ComicIssue;
declare type PublicationVolumeBase = CreativeWorkBase & {
    /** The page on which the work ends; for example "138" or "xvi". */
    "pageEnd"?: (Integer | Text) | readonly (Integer | Text)[];
    /** The page on which the work starts; for example "135" or "xiii". */
    "pageStart"?: (Integer | Text) | readonly (Integer | Text)[];
    /** Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49". */
    "pagination"?: Text | readonly Text[];
    /** Identifies the volume of publication or multi-part work; for example, "iii" or "2". */
    "volumeNumber"?: (Integer | Text) | readonly (Integer | Text)[];
};
/**
 * A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.
 *
 * See also {@link http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html blog post}.
 */
export declare type PublicationVolume = {
    "@type": "PublicationVolume";
} & PublicationVolumeBase;
declare type PublicSwimmingPoolBase = SportsActivityLocationBase;
/** A public swimming pool. */
export declare type PublicSwimmingPool = ({
    "@type": "PublicSwimmingPool";
} & PublicSwimmingPoolBase) | string;
declare type PublicToiletBase = CivicStructureBase;
/** A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses. */
export declare type PublicToilet = ({
    "@type": "PublicToilet";
} & PublicToiletBase) | string;
declare type QAPageBase = WebPageBase;
/** A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs). */
export declare type QAPage = {
    "@type": "QAPage";
} & QAPageBase;
declare type QualitativeValueBase = EnumerationBase & {
    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.
     *
     * Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     */
    "additionalProperty"?: PropertyValue | readonly PropertyValue[];
    /** This ordering relation for qualitative values indicates that the subject is equal to the object. */
    "equal"?: QualitativeValue | readonly QualitativeValue[];
    /** This ordering relation for qualitative values indicates that the subject is greater than the object. */
    "greater"?: QualitativeValue | readonly QualitativeValue[];
    /** This ordering relation for qualitative values indicates that the subject is greater than or equal to the object. */
    "greaterOrEqual"?: QualitativeValue | readonly QualitativeValue[];
    /** This ordering relation for qualitative values indicates that the subject is lesser than the object. */
    "lesser"?: QualitativeValue | readonly QualitativeValue[];
    /** This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object. */
    "lesserOrEqual"?: QualitativeValue | readonly QualitativeValue[];
    /** This ordering relation for qualitative values indicates that the subject is not equal to the object. */
    "nonEqual"?: QualitativeValue | readonly QualitativeValue[];
    /** A pointer to a secondary value that provides additional information on the original value, e.g. a reference temperature. */
    "valueReference"?: (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue) | readonly (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue)[];
};
/** A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'. */
export declare type QualitativeValue = ({
    "@type": "QualitativeValue";
} & QualitativeValueBase) | (BedType | CarUsageType | DriveWheelConfigurationValue | SteeringPositionValue);
declare type QuantitativeValueBase = StructuredValueBase & {
    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.
     *
     * Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     */
    "additionalProperty"?: PropertyValue | readonly PropertyValue[];
    /** The upper value of some characteristic or property. */
    "maxValue"?: Number | readonly Number[];
    /** The lower value of some characteristic or property. */
    "minValue"?: Number | readonly Number[];
    /** The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. */
    "unitCode"?: (Text | URL) | readonly (Text | URL)[];
    /** A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for{@link unitCode unitCode}. */
    "unitText"?: Text | readonly Text[];
    /**
     * The value of the quantitative value or property value node.
     *
     * - For {@link http://schema.org/QuantitativeValue QuantitativeValue} and {@link http://schema.org/MonetaryAmount MonetaryAmount}, the recommended type for values is 'Number'.
     * - For {@link http://schema.org/PropertyValue PropertyValue}, it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "value"?: (Boolean | Number | StructuredValue | Text) | readonly (Boolean | Number | StructuredValue | Text)[];
    /** A pointer to a secondary value that provides additional information on the original value, e.g. a reference temperature. */
    "valueReference"?: (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue) | readonly (Enumeration | PropertyValue | QualitativeValue | QuantitativeValue | StructuredValue)[];
};
/** A point value or interval for product characteristics and other purposes. */
export declare type QuantitativeValue = {
    "@type": "QuantitativeValue";
} & QuantitativeValueBase;
declare type QuantitativeValueDistributionBase = StructuredValueBase & {
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** The median value. */
    "median"?: Number | readonly Number[];
    /** The 10th percentile value. */
    "percentile10"?: Number | readonly Number[];
    /** The 25th percentile value. */
    "percentile25"?: Number | readonly Number[];
    /** The 75th percentile value. */
    "percentile75"?: Number | readonly Number[];
    /** The 90th percentile value. */
    "percentile90"?: Number | readonly Number[];
};
/** A statistical distribution of values. */
export declare type QuantitativeValueDistribution = ({
    "@type": "QuantitativeValueDistribution";
} & QuantitativeValueDistributionBase) | MonetaryAmountDistribution;
declare type QuantityBase = IntangibleBase;
/** Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'. */
export declare type Quantity = ({
    "@type": "Quantity";
} & QuantityBase) | (Distance | Duration | Energy | Mass | string);
declare type QuestionBase = CreativeWorkBase & {
    /** The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author. */
    "acceptedAnswer"?: (Answer | ItemList) | readonly (Answer | ItemList)[];
    /** The number of answers this question has received. */
    "answerCount"?: Integer | readonly Integer[];
    /** The number of downvotes this question, answer or comment has received from the community. */
    "downvoteCount"?: Integer | readonly Integer[];
    /** An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site. */
    "suggestedAnswer"?: (Answer | ItemList) | readonly (Answer | ItemList)[];
    /** The number of upvotes this question, answer or comment has received from the community. */
    "upvoteCount"?: Integer | readonly Integer[];
};
/** A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document. */
export declare type Question = {
    "@type": "Question";
} & QuestionBase;
declare type QuotationBase = CreativeWorkBase & {
    /** The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork. */
    "spokenByCharacter"?: (Organization | Person) | readonly (Organization | Person)[];
};
/** A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use {@link http://schema.org/isBasedOn isBasedOn} to link to source/origin. The {@link http://schema.org/recordedIn recordedIn} property can be used to reference a Quotation from an {@link http://schema.org/Event Event}. */
export declare type Quotation = {
    "@type": "Quotation";
} & QuotationBase;
declare type QuoteActionBase = TradeActionBase;
/** An agent quotes/estimates/appraises an object/product/service with a price at a location/store. */
export declare type QuoteAction = {
    "@type": "QuoteAction";
} & QuoteActionBase;
declare type RadiationTherapyBase = MedicalTherapyBase;
/** A process of care using radiation aimed at improving a health condition. */
export declare type RadiationTherapy = {
    "@type": "RadiationTherapy";
} & RadiationTherapyBase;
declare type RadioBroadcastServiceBase = BroadcastServiceBase;
/** A delivery service through which radio content is provided via broadcast over the air or online. */
export declare type RadioBroadcastService = {
    "@type": "RadioBroadcastService";
} & RadioBroadcastServiceBase;
declare type RadioChannelBase = BroadcastChannelBase;
/** A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup. */
export declare type RadioChannel = ({
    "@type": "RadioChannel";
} & RadioChannelBase) | (AMRadioChannel | FMRadioChannel);
declare type RadioClipBase = ClipBase;
/** A short radio program or a segment/part of a radio program. */
export declare type RadioClip = {
    "@type": "RadioClip";
} & RadioClipBase;
declare type RadioEpisodeBase = EpisodeBase;
/** A radio episode which can be part of a series or season. */
export declare type RadioEpisode = {
    "@type": "RadioEpisode";
} & RadioEpisodeBase;
declare type RadioSeasonBase = CreativeWorkSeasonBase;
/** Season dedicated to radio broadcast and associated online delivery. */
export declare type RadioSeason = {
    "@type": "RadioSeason";
} & RadioSeasonBase;
declare type RadioSeriesBase = CreativeWorkSeriesBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** A season that is part of the media series. */
    "containsSeason"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** An episode of a tv, radio or game media within a series or season. */
    "episode"?: Episode | readonly Episode[];
    /**
     * An episode of a TV/radio series or season.
     * @deprecated Consider using http://schema.org/episode instead.
     */
    "episodes"?: Episode | readonly Episode[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The number of episodes in this season or series. */
    "numberOfEpisodes"?: Integer | readonly Integer[];
    /** The number of seasons in this series. */
    "numberOfSeasons"?: Integer | readonly Integer[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/containsSeason instead.
     */
    "season"?: (CreativeWorkSeason | URL) | readonly (CreativeWorkSeason | URL)[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/season instead.
     */
    "seasons"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** CreativeWorkSeries dedicated to radio broadcast and associated online delivery. */
export declare type RadioSeries = {
    "@type": "RadioSeries";
} & RadioSeriesBase;
declare type RadioStationBase = LocalBusinessBase;
/** A radio station. */
export declare type RadioStation = ({
    "@type": "RadioStation";
} & RadioStationBase) | string;
declare type RatingBase = IntangibleBase & {
    /** The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably. */
    "author"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed. */
    "bestRating"?: (Number | Text) | readonly (Number | Text)[];
    /** A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup using {@link http://schema.org/ClaimReview ClaimReview}. */
    "ratingExplanation"?: Text | readonly Text[];
    /**
     * The rating for the content.
     *
     * Usage guidelines:
     *
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "ratingValue"?: (Number | Text) | readonly (Number | Text)[];
    /** This Review or Rating is relevant to this part or facet of the itemReviewed. */
    "reviewAspect"?: Text | readonly Text[];
    /** The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed. */
    "worstRating"?: (Number | Text) | readonly (Number | Text)[];
};
/** A rating is an evaluation on a numeric scale, such as 1 to 5 stars. */
export declare type Rating = ({
    "@type": "Rating";
} & RatingBase) | (AggregateRating | EndorsementRating);
declare type ReactActionBase = AssessActionBase;
/** The act of responding instinctively and emotionally to an object, expressing a sentiment. */
export declare type ReactAction = ({
    "@type": "ReactAction";
} & ReactActionBase) | (AgreeAction | DisagreeAction | DislikeAction | EndorseAction | LikeAction | WantAction);
declare type ReadActionBase = ConsumeActionBase;
/** The act of consuming written content. */
export declare type ReadAction = {
    "@type": "ReadAction";
} & ReadActionBase;
declare type RealEstateAgentBase = LocalBusinessBase;
/** A real-estate agent. */
export declare type RealEstateAgent = ({
    "@type": "RealEstateAgent";
} & RealEstateAgentBase) | string;
declare type RealEstateListingBase = WebPageBase & {
    /** Publication date of an online listing. */
    "datePosted"?: Date | readonly Date[];
    /** Length of the lease for some {@link http://schema.org/Accommodation Accommodation}, either particular to some {@link http://schema.org/Offer Offer} or in some cases intrinsic to the property. */
    "leaseLength"?: (Duration | QuantitativeValue) | readonly (Duration | QuantitativeValue)[];
};
/** A {@link http://schema.org/RealEstateListing RealEstateListing} is a listing that describes one or more real-estate {@link http://schema.org/Offer Offer}s (whose {@link http://schema.org/businessFunction businessFunction} is typically to lease out, or to sell).  The {@link http://schema.org/RealEstateListing RealEstateListing} type itself represents the overall listing, as manifested in some {@link http://schema.org/WebPage WebPage}. */
export declare type RealEstateListing = {
    "@type": "RealEstateListing";
} & RealEstateListingBase;
declare type ReceiveActionBase = TransferActionBase & {
    /** A sub property of instrument. The method of delivery. */
    "deliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** A sub property of participant. The participant who is at the sending end of the action. */
    "sender"?: (Audience | Organization | Person) | readonly (Audience | Organization | Person)[];
};
/**
 * The act of physically/electronically taking delivery of an object thathas been transferred from an origin to a destination. Reciprocal of SendAction.
 *
 * Related actions:
 *
 * - {@link http://schema.org/SendAction SendAction}: The reciprocal of ReceiveAction.
 * - {@link http://schema.org/TakeAction TakeAction}: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).
 */
export declare type ReceiveAction = {
    "@type": "ReceiveAction";
} & ReceiveActionBase;
declare type RecipeBase = HowToBase & {
    /** The method of cooking, such as Frying, Steaming, ... */
    "cookingMethod"?: Text | readonly Text[];
    /** The time it takes to actually cook the dish, in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 duration format}. */
    "cookTime"?: Duration | readonly Duration[];
    /**
     * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
     * @deprecated Consider using http://schema.org/recipeIngredient instead.
     */
    "ingredients"?: Text | readonly Text[];
    /** Nutrition information about the recipe or menu item. */
    "nutrition"?: NutritionInformation | readonly NutritionInformation[];
    /** The category of the recipe—for example, appetizer, entree, etc. */
    "recipeCategory"?: Text | readonly Text[];
    /** The cuisine of the recipe (for example, French or Ethiopian). */
    "recipeCuisine"?: Text | readonly Text[];
    /** A single ingredient used in the recipe, e.g. sugar, flour or garlic. */
    "recipeIngredient"?: Text | readonly Text[];
    /** A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items. */
    "recipeInstructions"?: (CreativeWork | ItemList | Text) | readonly (CreativeWork | ItemList | Text)[];
    /** The quantity produced by the recipe (for example, number of people served, number of servings, etc). */
    "recipeYield"?: (QuantitativeValue | Text) | readonly (QuantitativeValue | Text)[];
    /** Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc. */
    "suitableForDiet"?: RestrictedDiet | readonly RestrictedDiet[];
};
/** A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via {@link http://schema.org/suitableForDiet suitableForDiet}. The {@link http://schema.org/keywords keywords} property can also be used to add more detail. */
export declare type Recipe = {
    "@type": "Recipe";
} & RecipeBase;
declare type RecommendationBase = ReviewBase & {
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
};
/** {@link http://schema.org/Recommendation Recommendation} is a type of {@link http://schema.org/Review Review} that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A {@link http://schema.org/Guide Guide} may list multiple recommendations for different categories. For example, in a {@link http://schema.org/Guide Guide} about which TVs to buy, the author may have several {@link http://schema.org/Recommendation Recommendation}s. */
export declare type Recommendation = {
    "@type": "Recommendation";
} & RecommendationBase;
declare type RecommendedDoseScheduleBase = DoseScheduleBase;
/** A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity. */
export declare type RecommendedDoseSchedule = {
    "@type": "RecommendedDoseSchedule";
} & RecommendedDoseScheduleBase;
declare type RecyclingCenterBase = LocalBusinessBase;
/** A recycling center. */
export declare type RecyclingCenter = ({
    "@type": "RecyclingCenter";
} & RecyclingCenterBase) | string;
declare type RefundTypeEnumerationBase = EnumerationBase;
/** RefundTypeEnumeration enumerates several kinds of product return refund types. */
export declare type RefundTypeEnumeration = "http://schema.org/ExchangeRefund" | "http://schema.org/FullRefund" | "http://schema.org/StoreCreditRefund" | ({
    "@type": "RefundTypeEnumeration";
} & RefundTypeEnumerationBase);
export declare const RefundTypeEnumeration: {
    /** A ExchangeRefund ... */
    ExchangeRefund: "http://schema.org/ExchangeRefund";
    /** A FullRefund ... */
    FullRefund: "http://schema.org/FullRefund";
    /** A StoreCreditRefund ... */
    StoreCreditRefund: "http://schema.org/StoreCreditRefund";
};
declare type RegisterActionBase = InteractActionBase;
/**
 * The act of registering to be a user of a service, product or web page.
 *
 * Related actions:
 *
 * - {@link http://schema.org/JoinAction JoinAction}: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, _not_ a group/team of people.
 * - [FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.
 * - {@link http://schema.org/SubscribeAction SubscribeAction}: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
 */
export declare type RegisterAction = {
    "@type": "RegisterAction";
} & RegisterActionBase;
declare type RejectActionBase = AllocateActionBase;
/**
 * The act of rejecting to/adopting an object.
 *
 * Related actions:
 *
 * - {@link http://schema.org/AcceptAction AcceptAction}: The antonym of RejectAction.
 */
export declare type RejectAction = {
    "@type": "RejectAction";
} & RejectActionBase;
declare type RentActionBase = TradeActionBase & {
    /** A sub property of participant. The owner of the real estate property. */
    "landlord"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A sub property of participant. The real estate agent involved in the action. */
    "realEstateAgent"?: RealEstateAgent | readonly RealEstateAgent[];
};
/** The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment. */
export declare type RentAction = {
    "@type": "RentAction";
} & RentActionBase;
declare type RentalCarReservationBase = ReservationBase & {
    /** Where a rental car can be dropped off. */
    "dropoffLocation"?: Place | readonly Place[];
    /** When a rental car can be dropped off. */
    "dropoffTime"?: DateTime | readonly DateTime[];
    /** Where a taxi will pick up a passenger or a rental car can be picked up. */
    "pickupLocation"?: Place | readonly Place[];
    /** When a taxi will pickup a passenger or a rental car can be picked up. */
    "pickupTime"?: DateTime | readonly DateTime[];
};
/**
 * A reservation for a rental car.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 */
export declare type RentalCarReservation = {
    "@type": "RentalCarReservation";
} & RentalCarReservationBase;
declare type RepaymentSpecificationBase = StructuredValueBase & {
    /** a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price. */
    "downPayment"?: (MonetaryAmount | Number) | readonly (MonetaryAmount | Number)[];
    /** The amount to be paid as a penalty in the event of early payment of the loan. */
    "earlyPrepaymentPenalty"?: MonetaryAmount | readonly MonetaryAmount[];
    /** The amount of money to pay in a single payment. */
    "loanPaymentAmount"?: MonetaryAmount | readonly MonetaryAmount[];
    /** Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time. */
    "loanPaymentFrequency"?: Number | readonly Number[];
    /** The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date. */
    "numberOfLoanPayments"?: Number | readonly Number[];
};
/** A structured value representing repayment. */
export declare type RepaymentSpecification = {
    "@type": "RepaymentSpecification";
} & RepaymentSpecificationBase;
declare type ReplaceActionBase = UpdateActionBase & {
    /** A sub property of object. The object that is being replaced. */
    "replacee"?: Thing | readonly Thing[];
    /** A sub property of object. The object that replaces. */
    "replacer"?: Thing | readonly Thing[];
};
/** The act of editing a recipient by replacing an old object with a new object. */
export declare type ReplaceAction = {
    "@type": "ReplaceAction";
} & ReplaceActionBase;
declare type ReplyActionBase = CommunicateActionBase & {
    /** A sub property of result. The Comment created or sent as a result of this action. */
    "resultComment"?: Comment | readonly Comment[];
};
/**
 * The act of responding to a question/message asked/sent by the object. Related to {@link http://schema.org/AskAction AskAction}
 *
 * Related actions:
 *
 * - {@link http://schema.org/AskAction AskAction}: Appears generally as an origin of a ReplyAction.
 */
export declare type ReplyAction = {
    "@type": "ReplyAction";
} & ReplyActionBase;
declare type ReportBase = ArticleBase & {
    /** The number or other unique designator assigned to a Report by the publishing organization. */
    "reportNumber"?: Text | readonly Text[];
};
/** A Report generated by governmental or non-governmental organization. */
export declare type Report = {
    "@type": "Report";
} & ReportBase;
declare type ReportageNewsArticleBase = NewsArticleBase;
/**
 * The {@link http://schema.org/ReportageNewsArticle ReportageNewsArticle} type is a subtype of {@link http://schema.org/NewsArticle NewsArticle} representing news articles which are the result of journalistic news reporting conventions.
 *
 * In practice many news publishers produce a wide variety of article types, many of which might be considered a {@link http://schema.org/NewsArticle NewsArticle} but not a {@link http://schema.org/ReportageNewsArticle ReportageNewsArticle}. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.
 *
 * The {@link http://schema.org/ReportageNewsArticle ReportageNewsArticle} type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the {@link http://schema.org/ReportageNewsArticle ReportageNewsArticle} sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.
 *
 * A {@link http://schema.org/ReportageNewsArticle ReportageNewsArticle} which goes deeper into analysis can also be marked with an additional type of {@link http://schema.org/AnalysisNewsArticle AnalysisNewsArticle}.
 */
export declare type ReportageNewsArticle = {
    "@type": "ReportageNewsArticle";
} & ReportageNewsArticleBase;
declare type ReportedDoseScheduleBase = DoseScheduleBase;
/** A patient-reported or observed dosing schedule for a drug or supplement. */
export declare type ReportedDoseSchedule = {
    "@type": "ReportedDoseSchedule";
} & ReportedDoseScheduleBase;
declare type ResearchProjectBase = ProjectBase;
/** A Research project. */
export declare type ResearchProject = ({
    "@type": "ResearchProject";
} & ResearchProjectBase) | string;
declare type ReservationBase = IntangibleBase & {
    /**
     * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
     * @deprecated Consider using http://schema.org/broker instead.
     */
    "bookingAgent"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The date and time the reservation was booked. */
    "bookingTime"?: DateTime | readonly DateTime[];
    /** An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred. */
    "broker"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The date and time the reservation was modified. */
    "modifiedTime"?: DateTime | readonly DateTime[];
    /**
     * The currency of the price, or a price component when attached to {@link http://schema.org/PriceSpecification PriceSpecification} and its subtypes.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "priceCurrency"?: Text | readonly Text[];
    /** Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation. */
    "programMembershipUsed"?: ProgramMembership | readonly ProgramMembership[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** The thing -- flight, event, restaurant,etc. being reserved. */
    "reservationFor"?: Thing | readonly Thing[];
    /** A unique identifier for the reservation. */
    "reservationId"?: Text | readonly Text[];
    /** The current status of the reservation. */
    "reservationStatus"?: ReservationStatusType | readonly ReservationStatusType[];
    /** A ticket associated with the reservation. */
    "reservedTicket"?: Ticket | readonly Ticket[];
    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.
     *
     * Usage guidelines:
     *
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "totalPrice"?: (Number | PriceSpecification | Text) | readonly (Number | PriceSpecification | Text)[];
    /** The person or organization the reservation or ticket is for. */
    "underName"?: (Organization | Person) | readonly (Organization | Person)[];
};
/**
 * Describes a reservation for travel, dining or an event. Some reservations require tickets.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use {@link http://schema.org/Offer Offer}.
 */
export declare type Reservation = ({
    "@type": "Reservation";
} & ReservationBase) | (BusReservation | EventReservation | FlightReservation | FoodEstablishmentReservation | LodgingReservation | RentalCarReservation | ReservationPackage | TaxiReservation | TrainReservation);
declare type ReservationPackageBase = ReservationBase & {
    /** The individual reservations included in the package. Typically a repeated property. */
    "subReservation"?: Reservation | readonly Reservation[];
};
/** A group of multiple reservations with common values for all sub-reservations. */
export declare type ReservationPackage = {
    "@type": "ReservationPackage";
} & ReservationPackageBase;
declare type ReservationStatusTypeBase = EnumerationBase;
/** Enumerated status values for Reservation. */
export declare type ReservationStatusType = "http://schema.org/ReservationCancelled" | "http://schema.org/ReservationConfirmed" | "http://schema.org/ReservationHold" | "http://schema.org/ReservationPending" | ({
    "@type": "ReservationStatusType";
} & ReservationStatusTypeBase);
export declare const ReservationStatusType: {
    /** The status for a previously confirmed reservation that is now cancelled. */
    ReservationCancelled: "http://schema.org/ReservationCancelled";
    /** The status of a confirmed reservation. */
    ReservationConfirmed: "http://schema.org/ReservationConfirmed";
    /** The status of a reservation on hold pending an update like credit card number or flight changes. */
    ReservationHold: "http://schema.org/ReservationHold";
    /** The status of a reservation when a request has been sent, but not confirmed. */
    ReservationPending: "http://schema.org/ReservationPending";
};
declare type ReserveActionBase = PlanActionBase;
/**
 * Reserving a concrete object.
 *
 * Related actions:
 *
 * - {@link http://schema.org/ScheduleAction ScheduleAction}: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
 */
export declare type ReserveAction = {
    "@type": "ReserveAction";
} & ReserveActionBase;
declare type ReservoirBase = BodyOfWaterBase;
/** A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir. */
export declare type Reservoir = ({
    "@type": "Reservoir";
} & ReservoirBase) | string;
declare type ResidenceBase = PlaceBase & {
    /** A floorplan of some {@link http://schema.org/Accommodation Accommodation}. */
    "accommodationFloorPlan"?: FloorPlan | readonly FloorPlan[];
};
/** The place where a person lives. */
export declare type Residence = ({
    "@type": "Residence";
} & ResidenceBase) | (ApartmentComplex | GatedResidenceCommunity | string);
declare type ResortBase = LodgingBusinessBase;
/**
 * A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/Resort http://en.wikipedia.org/wiki/Resort}).
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Resort = ({
    "@type": "Resort";
} & ResortBase) | string;
declare type RestaurantBase = FoodEstablishmentBase;
/** A restaurant. */
export declare type Restaurant = ({
    "@type": "Restaurant";
} & RestaurantBase) | string;
declare type RestrictedDietBase = EnumerationBase;
/** A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons. */
export declare type RestrictedDiet = "http://schema.org/DiabeticDiet" | "http://schema.org/GlutenFreeDiet" | "http://schema.org/HalalDiet" | "http://schema.org/HinduDiet" | "http://schema.org/KosherDiet" | "http://schema.org/LowCalorieDiet" | "http://schema.org/LowFatDiet" | "http://schema.org/LowLactoseDiet" | "http://schema.org/LowSaltDiet" | "http://schema.org/VeganDiet" | "http://schema.org/VegetarianDiet" | ({
    "@type": "RestrictedDiet";
} & RestrictedDietBase);
export declare const RestrictedDiet: {
    /** A diet appropriate for people with diabetes. */
    DiabeticDiet: "http://schema.org/DiabeticDiet";
    /** A diet exclusive of gluten. */
    GlutenFreeDiet: "http://schema.org/GlutenFreeDiet";
    /** A diet conforming to Islamic dietary practices. */
    HalalDiet: "http://schema.org/HalalDiet";
    /** A diet conforming to Hindu dietary practices, in particular, beef-free. */
    HinduDiet: "http://schema.org/HinduDiet";
    /** A diet conforming to Jewish dietary practices. */
    KosherDiet: "http://schema.org/KosherDiet";
    /** A diet focused on reduced calorie intake. */
    LowCalorieDiet: "http://schema.org/LowCalorieDiet";
    /** A diet focused on reduced fat and cholesterol intake. */
    LowFatDiet: "http://schema.org/LowFatDiet";
    /** A diet appropriate for people with lactose intolerance. */
    LowLactoseDiet: "http://schema.org/LowLactoseDiet";
    /** A diet focused on reduced sodium intake. */
    LowSaltDiet: "http://schema.org/LowSaltDiet";
    /** A diet exclusive of all animal products. */
    VeganDiet: "http://schema.org/VeganDiet";
    /** A diet exclusive of animal meat. */
    VegetarianDiet: "http://schema.org/VegetarianDiet";
};
declare type ResumeActionBase = ControlActionBase;
/** The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer). */
export declare type ResumeAction = {
    "@type": "ResumeAction";
} & ResumeActionBase;
declare type ReturnActionBase = TransferActionBase & {
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** The act of returning to the origin that which was previously received (concrete objects) or taken (ownership). */
export declare type ReturnAction = {
    "@type": "ReturnAction";
} & ReturnActionBase;
declare type ReturnFeesEnumerationBase = EnumerationBase;
/** ReturnFeesEnumeration expresses policies for return fees. */
export declare type ReturnFeesEnumeration = "http://schema.org/OriginalShippingFees" | "http://schema.org/RestockingFees" | "http://schema.org/ReturnShippingFees" | ({
    "@type": "ReturnFeesEnumeration";
} & ReturnFeesEnumerationBase);
export declare const ReturnFeesEnumeration: {
    /** OriginalShippingFees ... */
    OriginalShippingFees: "http://schema.org/OriginalShippingFees";
    /** RestockingFees ... */
    RestockingFees: "http://schema.org/RestockingFees";
    /** ReturnShippingFees ... */
    ReturnShippingFees: "http://schema.org/ReturnShippingFees";
};
declare type ReviewBase = CreativeWorkBase & {
    /** The item that is being reviewed/rated. */
    "itemReviewed"?: Thing | readonly Thing[];
    /** This Review or Rating is relevant to this part or facet of the itemReviewed. */
    "reviewAspect"?: Text | readonly Text[];
    /** The actual body of the review. */
    "reviewBody"?: Text | readonly Text[];
    /** The rating given in this review. Note that reviews can themselves be rated. The `reviewRating` applies to rating given by the review. The {@link http://schema.org/aggregateRating aggregateRating} property applies to the review itself, as a creative work. */
    "reviewRating"?: Rating | readonly Rating[];
};
/** A review of an item - for example, of a restaurant, movie, or store. */
export declare type Review = ({
    "@type": "Review";
} & ReviewBase) | (ClaimReview | CriticReview | EmployerReview | Recommendation | UserReview);
declare type ReviewActionBase = AssessActionBase & {
    /** A sub property of result. The review that resulted in the performing of the action. */
    "resultReview"?: Review | readonly Review[];
};
/** The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review. */
export declare type ReviewAction = {
    "@type": "ReviewAction";
} & ReviewActionBase;
declare type ReviewNewsArticleBase = (CriticReviewBase & NewsArticleBase);
/** A {@link http://schema.org/NewsArticle NewsArticle} and {@link http://schema.org/CriticReview CriticReview} providing a professional critic's assessment of a service, product, performance, or artistic or literary work. */
export declare type ReviewNewsArticle = {
    "@type": "ReviewNewsArticle";
} & ReviewNewsArticleBase;
declare type RiverBodyOfWaterBase = BodyOfWaterBase;
/** A river (for example, the broad majestic Shannon). */
export declare type RiverBodyOfWater = ({
    "@type": "RiverBodyOfWater";
} & RiverBodyOfWaterBase) | string;
declare type RoleBase = IntangibleBase & {
    /** The end date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "endDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /**
     * A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
     * @deprecated Consider using http://schema.org/roleName instead.
     */
    "namedPosition"?: (Text | URL) | readonly (Text | URL)[];
    /** A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'. */
    "roleName"?: (Text | URL) | readonly (Text | URL)[];
    /** The start date and time of the item (in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}). */
    "startDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
};
/**
 * Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.
 *
 * See also {@link http://blog.schema.org/2014/06/introducing-role.html blog post}.
 */
export declare type Role = ({
    "@type": "Role";
} & RoleBase) | (LinkRole | OrganizationRole | PerformanceRole);
declare type RoofingContractorBase = HomeAndConstructionBusinessBase;
/** A roofing contractor. */
export declare type RoofingContractor = ({
    "@type": "RoofingContractor";
} & RoofingContractorBase) | string;
declare type RoomBase = AccommodationBase;
/**
 * A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/Room http://en.wikipedia.org/wiki/Room}).
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Room = ({
    "@type": "Room";
} & RoomBase) | (HotelRoom | MeetingRoom | string);
declare type RsvpActionBase = InformActionBase & {
    /** If responding yes, the number of guests who will attend in addition to the invitee. */
    "additionalNumberOfGuests"?: Number | readonly Number[];
    /** Comments, typically from users. */
    "comment"?: Comment | readonly Comment[];
    /** The response (yes, no, maybe) to the RSVP. */
    "rsvpResponse"?: RsvpResponseType | readonly RsvpResponseType[];
};
/** The act of notifying an event organizer as to whether you expect to attend the event. */
export declare type RsvpAction = {
    "@type": "RsvpAction";
} & RsvpActionBase;
declare type RsvpResponseTypeBase = EnumerationBase;
/** RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request. */
export declare type RsvpResponseType = "http://schema.org/RsvpResponseMaybe" | "http://schema.org/RsvpResponseNo" | "http://schema.org/RsvpResponseYes" | ({
    "@type": "RsvpResponseType";
} & RsvpResponseTypeBase);
export declare const RsvpResponseType: {
    /** The invitee may or may not attend. */
    RsvpResponseMaybe: "http://schema.org/RsvpResponseMaybe";
    /** The invitee will not attend. */
    RsvpResponseNo: "http://schema.org/RsvpResponseNo";
    /** The invitee will attend. */
    RsvpResponseYes: "http://schema.org/RsvpResponseYes";
};
declare type RVParkBase = CivicStructureBase;
/** A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like. */
export declare type RVPark = ({
    "@type": "RVPark";
} & RVParkBase) | string;
declare type SaleEventBase = EventBase;
/** Event type: Sales event. */
export declare type SaleEvent = {
    "@type": "SaleEvent";
} & SaleEventBase;
declare type SatiricalArticleBase = ArticleBase;
/** An {@link http://schema.org/Article Article} whose content is primarily {@link https://en.wikipedia.org/wiki/Satire [satirical]} in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a {@link http://schema.org/NewsArticle NewsArticle}. {@link http://schema.org/ScholarlyArticle ScholarlyArticle}s are also sometimes satirized. */
export declare type SatiricalArticle = {
    "@type": "SatiricalArticle";
} & SatiricalArticleBase;
declare type ScheduleBase = IntangibleBase & {
    /** Defines the day(s) of the week on which a recurring {@link http://schema.org/Event Event} takes place. May be specified using either {@link http://schema.org/DayOfWeek DayOfWeek}, or alternatively {@link http://schema.org/Text Text} conforming to iCal's syntax for byDay recurrence rules */
    "byDay"?: (DayOfWeek | Text) | readonly (DayOfWeek | Text)[];
    /** Defines the month(s) of the year on which a recurring {@link http://schema.org/Event Event} takes place. Specified as an {@link http://schema.org/Integer Integer} between 1-12. January is 1. */
    "byMonth"?: Integer | readonly Integer[];
    /** Defines the day(s) of the month on which a recurring {@link http://schema.org/Event Event} takes place. Specified as an {@link http://schema.org/Integer Integer} between 1-31. */
    "byMonthDay"?: Integer | readonly Integer[];
    /** The duration of the item (movie, audio recording, event, etc.) in {@link http://en.wikipedia.org/wiki/ISO_8601 ISO 8601 date format}. */
    "duration"?: Duration | readonly Duration[];
    /** Defines a {@link http://schema.org/Date Date} or {@link http://schema.org/DateTime DateTime} during which a scheduled {@link http://schema.org/Event Event} will not take place. The property allows exceptions to      a {@link http://schema.org/Schedule Schedule} to be specified. If an exception is specified as a {@link http://schema.org/DateTime DateTime} then only the event that would have started at that specific date and time      should be excluded from the schedule. If an exception is specified as a {@link http://schema.org/Date Date} then any event that is scheduled for that 24 hour period should be      excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event. */
    "exceptDate"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** Defines the number of times a recurring {@link http://schema.org/Event Event} will take place */
    "repeatCount"?: Integer | readonly Integer[];
    /** Defines the frequency at which {@link http://schema.org/Events Events} will occur according to a schedule {@link http://schema.org/Schedule Schedule}. The intervals between      events should be defined as a {@link http://schema.org/Duration Duration} of time. */
    "repeatFrequency"?: (Duration | Text) | readonly (Duration | Text)[];
    /** Indicates the timezone for which the time(s) indicated in the {@link http://schema.org/Schedule Schedule} are given. The value provided should be among those listed in the IANA Time Zone Database. */
    "scheduleTimezone"?: Text | readonly Text[];
};
/** A schedule defines a repeating time period used to describe a regularly occurring {@link http://schema.org/Event Event}. At a minimum a schedule will specify {@link http://schema.org/repeatFrequency repeatFrequency} which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.      This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also      have start and end dates to indicate when they are active, e.g. to define a limited calendar of events. */
export declare type Schedule = {
    "@type": "Schedule";
} & ScheduleBase;
declare type ScheduleActionBase = PlanActionBase;
/**
 * Scheduling future actions, events, or tasks.
 *
 * Related actions:
 *
 * - {@link http://schema.org/ReserveAction ReserveAction}: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
 */
export declare type ScheduleAction = {
    "@type": "ScheduleAction";
} & ScheduleActionBase;
declare type ScholarlyArticleBase = ArticleBase;
/** A scholarly article. */
export declare type ScholarlyArticle = ({
    "@type": "ScholarlyArticle";
} & ScholarlyArticleBase) | MedicalScholarlyArticle;
declare type SchoolBase = EducationalOrganizationBase;
/** A school. */
export declare type School = ({
    "@type": "School";
} & SchoolBase) | string;
declare type ScreeningEventBase = EventBase & {
    /** Languages in which subtitles/captions are available, in {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard format}. */
    "subtitleLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.). */
    "videoFormat"?: Text | readonly Text[];
    /** The movie presented during this event. */
    "workPresented"?: Movie | readonly Movie[];
};
/** A screening of a movie or other video. */
export declare type ScreeningEvent = {
    "@type": "ScreeningEvent";
} & ScreeningEventBase;
declare type SculptureBase = CreativeWorkBase;
/** A piece of sculpture. */
export declare type Sculpture = {
    "@type": "Sculpture";
} & SculptureBase;
declare type SeaBodyOfWaterBase = BodyOfWaterBase;
/** A sea (for example, the Caspian sea). */
export declare type SeaBodyOfWater = ({
    "@type": "SeaBodyOfWater";
} & SeaBodyOfWaterBase) | string;
declare type SearchActionBase = ActionBase & {
    /** A sub property of instrument. The query used on this action. */
    "query"?: Text | readonly Text[];
};
/**
 * The act of searching for an object.
 *
 * Related actions:
 *
 * - {@link http://schema.org/FindAction FindAction}: SearchAction generally leads to a FindAction, but not necessarily.
 */
export declare type SearchAction = {
    "@type": "SearchAction";
} & SearchActionBase;
declare type SearchResultsPageBase = WebPageBase;
/** Web page type: Search results page. */
export declare type SearchResultsPage = {
    "@type": "SearchResultsPage";
} & SearchResultsPageBase;
declare type SeasonBase = CreativeWorkBase;
/**
 * A media season e.g. tv, radio, video game etc.
 * @deprecated Use CreativeWorkSeason instead.
 */
export declare type Season = {
    "@type": "Season";
} & SeasonBase;
declare type SeatBase = IntangibleBase & {
    /** The type/class of the seat. */
    "seatingType"?: (QualitativeValue | Text) | readonly (QualitativeValue | Text)[];
    /** The location of the reserved seat (e.g., 27). */
    "seatNumber"?: Text | readonly Text[];
    /** The row location of the reserved seat (e.g., B). */
    "seatRow"?: Text | readonly Text[];
    /** The section location of the reserved seat (e.g. Orchestra). */
    "seatSection"?: Text | readonly Text[];
};
/** Used to describe a seat, such as a reserved seat in an event reservation. */
export declare type Seat = {
    "@type": "Seat";
} & SeatBase;
declare type SelfStorageBase = LocalBusinessBase;
/** A self-storage facility. */
export declare type SelfStorage = ({
    "@type": "SelfStorage";
} & SelfStorageBase) | string;
declare type SellActionBase = TradeActionBase & {
    /** A sub property of participant. The participant/person/organization that bought the object. */
    "buyer"?: Person | readonly Person[];
    /**
     * The warranty promise(s) included in the offer.
     * @deprecated Consider using http://schema.org/warranty instead.
     */
    "warrantyPromise"?: WarrantyPromise | readonly WarrantyPromise[];
};
/** The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction. */
export declare type SellAction = {
    "@type": "SellAction";
} & SellActionBase;
declare type SendActionBase = TransferActionBase & {
    /** A sub property of instrument. The method of delivery. */
    "deliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/**
 * The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:
 *
 * - {@link http://schema.org/ReceiveAction ReceiveAction}: The reciprocal of SendAction.
 * - {@link http://schema.org/GiveAction GiveAction}: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
 */
export declare type SendAction = {
    "@type": "SendAction";
} & SendActionBase;
declare type SeriesBase = IntangibleBase;
/** A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also {@link http://schema.org/CreativeWorkSeries CreativeWorkSeries}, {@link http://schema.org/EventSeries EventSeries}. */
export declare type Series = ({
    "@type": "Series";
} & SeriesBase) | (CreativeWorkSeries | EventSeries);
declare type ServiceBase = IntangibleBase & {
    /** The overall rating, based on a collection of reviews or ratings, of the item. */
    "aggregateRating"?: AggregateRating | readonly AggregateRating[];
    /** The geographic area where a service or offered item is provided. */
    "areaServed"?: (AdministrativeArea | GeoShape | Place | Text) | readonly (AdministrativeArea | GeoShape | Place | Text)[];
    /** An intended audience, i.e. a group for whom something was created. */
    "audience"?: Audience | readonly Audience[];
    /** A means of accessing the service (e.g. a phone bank, a web site, a location, etc.). */
    "availableChannel"?: ServiceChannel | readonly ServiceChannel[];
    /** An award won by or for this item. */
    "award"?: Text | readonly Text[];
    /** The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person. */
    "brand"?: (Brand | Organization) | readonly (Brand | Organization)[];
    /** An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred. */
    "broker"?: (Organization | Person) | readonly (Organization | Person)[];
    /** A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. */
    "category"?: (PhysicalActivityCategory | Text | Thing) | readonly (PhysicalActivityCategory | Text | Thing)[];
    /** Indicates an OfferCatalog listing for this Organization, Person, or Service. */
    "hasOfferCatalog"?: OfferCatalog | readonly OfferCatalog[];
    /** The hours during which this service or contact is available. */
    "hoursAvailable"?: OpeningHoursSpecification | readonly OpeningHoursSpecification[];
    /** A pointer to another, somehow related product (or multiple products). */
    "isRelatedTo"?: (Product | Service) | readonly (Product | Service)[];
    /** A pointer to another, functionally similar product (or multiple products). */
    "isSimilarTo"?: (Product | Service) | readonly (Product | Service)[];
    /** An associated logo. */
    "logo"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /**
     * The tangible thing generated by the service, e.g. a passport, permit, etc.
     * @deprecated Consider using http://schema.org/serviceOutput instead.
     */
    "produces"?: Thing | readonly Thing[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Indicates the mobility of a provided service (e.g. 'static', 'dynamic'). */
    "providerMobility"?: Text | readonly Text[];
    /** A review of the item. */
    "review"?: Review | readonly Review[];
    /**
     * The geographic area where the service is provided.
     * @deprecated Consider using http://schema.org/areaServed instead.
     */
    "serviceArea"?: (AdministrativeArea | GeoShape | Place) | readonly (AdministrativeArea | GeoShape | Place)[];
    /**
     * The audience eligible for this service.
     * @deprecated Consider using http://schema.org/audience instead.
     */
    "serviceAudience"?: Audience | readonly Audience[];
    /** The tangible thing generated by the service, e.g. a passport, permit, etc. */
    "serviceOutput"?: Thing | readonly Thing[];
    /** The type of service being offered, e.g. veterans' benefits, emergency relief, etc. */
    "serviceType"?: Text | readonly Text[];
    /** A slogan or motto associated with the item. */
    "slogan"?: Text | readonly Text[];
    /** Human-readable terms of service documentation. */
    "termsOfService"?: (Text | URL) | readonly (Text | URL)[];
};
/** A service provided by an organization, e.g. delivery service, print services, etc. */
export declare type Service = ({
    "@type": "Service";
} & ServiceBase) | (BroadcastService | CableOrSatelliteService | FinancialProduct | FoodService | GovernmentService | Taxi | TaxiService | WebAPI);
declare type ServiceChannelBase = IntangibleBase & {
    /** A language someone may use with or at the item, service or place. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/inLanguage inLanguage} */
    "availableLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** Estimated processing time for the service using this channel. */
    "processingTime"?: Duration | readonly Duration[];
    /** The service provided by this channel. */
    "providesService"?: Service | readonly Service[];
    /** The location (e.g. civic structure, local business, etc.) where a person can go to access the service. */
    "serviceLocation"?: Place | readonly Place[];
    /** The phone number to use to access the service. */
    "servicePhone"?: ContactPoint | readonly ContactPoint[];
    /** The address for accessing the service by mail. */
    "servicePostalAddress"?: PostalAddress | readonly PostalAddress[];
    /** The number to access the service by text message. */
    "serviceSmsNumber"?: ContactPoint | readonly ContactPoint[];
    /** The website to access the service. */
    "serviceUrl"?: URL | readonly URL[];
};
/** A means for accessing a service, e.g. a government office location, web site, or phone number. */
export declare type ServiceChannel = {
    "@type": "ServiceChannel";
} & ServiceChannelBase;
declare type ShareActionBase = CommunicateActionBase;
/** The act of distributing content to people for their amusement or edification. */
export declare type ShareAction = {
    "@type": "ShareAction";
} & ShareActionBase;
declare type SheetMusicBase = CreativeWorkBase;
/** Printed music, as opposed to performed or recorded music. */
export declare type SheetMusic = {
    "@type": "SheetMusic";
} & SheetMusicBase;
declare type ShoeStoreBase = StoreBase;
/** A shoe store. */
export declare type ShoeStore = ({
    "@type": "ShoeStore";
} & ShoeStoreBase) | string;
declare type ShoppingCenterBase = LocalBusinessBase;
/** A shopping center or mall. */
export declare type ShoppingCenter = ({
    "@type": "ShoppingCenter";
} & ShoppingCenterBase) | string;
declare type ShortStoryBase = CreativeWorkBase;
/** Short story or tale. A brief work of literature, usually written in narrative prose. */
export declare type ShortStory = {
    "@type": "ShortStory";
} & ShortStoryBase;
declare type SingleFamilyResidenceBase = HouseBase & {
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).Typical unit code(s): C62 for person */
    "occupancy"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** Residence type: Single-family home. */
export declare type SingleFamilyResidence = ({
    "@type": "SingleFamilyResidence";
} & SingleFamilyResidenceBase) | string;
declare type SiteNavigationElementBase = WebPageElementBase;
/** A navigation element of the page. */
export declare type SiteNavigationElement = {
    "@type": "SiteNavigationElement";
} & SiteNavigationElementBase;
declare type SkiResortBase = SportsActivityLocationBase;
/** A ski resort. */
export declare type SkiResort = ({
    "@type": "SkiResort";
} & SkiResortBase) | string;
declare type SocialEventBase = EventBase;
/** Event type: Social event. */
export declare type SocialEvent = {
    "@type": "SocialEvent";
} & SocialEventBase;
declare type SocialMediaPostingBase = ArticleBase & {
    /** A CreativeWork such as an image, video, or audio clip shared as part of this posting. */
    "sharedContent"?: CreativeWork | readonly CreativeWork[];
};
/** A post to a social media platform, including blog posts, tweets, Facebook posts, etc. */
export declare type SocialMediaPosting = ({
    "@type": "SocialMediaPosting";
} & SocialMediaPostingBase) | (BlogPosting | DiscussionForumPosting);
declare type SoftwareApplicationBase = CreativeWorkBase & {
    /** Type of software application, e.g. 'Game, Multimedia'. */
    "applicationCategory"?: (Text | URL) | readonly (Text | URL)[];
    /** Subcategory of the application, e.g. 'Arcade Game'. */
    "applicationSubCategory"?: (Text | URL) | readonly (Text | URL)[];
    /** The name of the application suite to which the application belongs (e.g. Excel belongs to Office). */
    "applicationSuite"?: Text | readonly Text[];
    /** Device required to run the application. Used in cases where a specific make/model is required to run the application. */
    "availableOnDevice"?: Text | readonly Text[];
    /** Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code. */
    "countriesNotSupported"?: Text | readonly Text[];
    /** Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code. */
    "countriesSupported"?: Text | readonly Text[];
    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     * @deprecated Consider using http://schema.org/availableOnDevice instead.
     */
    "device"?: Text | readonly Text[];
    /** If the file can be downloaded, URL to download the binary. */
    "downloadUrl"?: URL | readonly URL[];
    /** Features or modules provided by this application (and possibly required by other applications). */
    "featureList"?: (Text | URL) | readonly (Text | URL)[];
    /** Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed. */
    "fileSize"?: Text | readonly Text[];
    /** URL at which the app may be installed, if different from the URL of the item. */
    "installUrl"?: URL | readonly URL[];
    /** Minimum memory requirements. */
    "memoryRequirements"?: (Text | URL) | readonly (Text | URL)[];
    /** Operating systems supported (Windows 7, OSX 10.6, Android 1.6). */
    "operatingSystem"?: Text | readonly Text[];
    /** Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi). */
    "permissions"?: Text | readonly Text[];
    /** Processor architecture required to run the application (e.g. IA64). */
    "processorRequirements"?: Text | readonly Text[];
    /** Description of what changed in this version. */
    "releaseNotes"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     * @deprecated Consider using http://schema.org/softwareRequirements instead.
     */
    "requirements"?: (Text | URL) | readonly (Text | URL)[];
    /** A link to a screenshot image of the app. */
    "screenshot"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** Additional content for a software application. */
    "softwareAddOn"?: SoftwareApplication | readonly SoftwareApplication[];
    /** Software application help. */
    "softwareHelp"?: CreativeWork | readonly CreativeWork[];
    /** Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime). */
    "softwareRequirements"?: (Text | URL) | readonly (Text | URL)[];
    /** Version of the software instance. */
    "softwareVersion"?: Text | readonly Text[];
    /** Storage requirements (free space required). */
    "storageRequirements"?: (Text | URL) | readonly (Text | URL)[];
    /** Supporting data for a SoftwareApplication. */
    "supportingData"?: DataFeed | readonly DataFeed[];
};
/** A software application. */
export declare type SoftwareApplication = ({
    "@type": "SoftwareApplication";
} & SoftwareApplicationBase) | (MobileApplication | VideoGame | WebApplication);
declare type SoftwareSourceCodeBase = CreativeWorkBase & {
    /** Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex). */
    "codeRepository"?: URL | readonly URL[];
    /** What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template. */
    "codeSampleType"?: Text | readonly Text[];
    /** The computer programming language. */
    "programmingLanguage"?: (ComputerLanguage | Text) | readonly (ComputerLanguage | Text)[];
    /**
     * Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
     * @deprecated Consider using http://schema.org/runtimePlatform instead.
     */
    "runtime"?: Text | readonly Text[];
    /** Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0). */
    "runtimePlatform"?: Text | readonly Text[];
    /**
     * What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
     * @deprecated Consider using http://schema.org/codeSampleType instead.
     */
    "sampleType"?: Text | readonly Text[];
    /** Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used. */
    "targetProduct"?: SoftwareApplication | readonly SoftwareApplication[];
};
/** Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates. */
export declare type SoftwareSourceCode = {
    "@type": "SoftwareSourceCode";
} & SoftwareSourceCodeBase;
declare type SomeProductsBase = ProductBase & {
    /** The current approximate inventory level for the item or items. */
    "inventoryLevel"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A placeholder for multiple similar products of the same kind. */
export declare type SomeProducts = {
    "@type": "SomeProducts";
} & SomeProductsBase;
declare type SpeakableSpecificationBase = IntangibleBase & {
    /** A CSS selector, e.g. of a {@link http://schema.org/SpeakableSpecification SpeakableSpecification} or {@link http://schema.org/WebPageElement WebPageElement}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element". */
    "cssSelector"?: CssSelectorType | readonly CssSelectorType[];
    /** An XPath, e.g. of a {@link http://schema.org/SpeakableSpecification SpeakableSpecification} or {@link http://schema.org/WebPageElement WebPageElement}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element". */
    "xpath"?: XPathType | readonly XPathType[];
};
/** A SpeakableSpecification indicates (typically via {@link http://schema.org/xpath xpath} or {@link http://schema.org/cssSelector cssSelector}) sections of a document that are highlighted as particularly {@link http://schema.org/speakable speakable}. Instances of this type are expected to be used primarily as values of the {@link http://schema.org/speakable speakable} property. */
export declare type SpeakableSpecification = {
    "@type": "SpeakableSpecification";
} & SpeakableSpecificationBase;
declare type SpecialtyBase = EnumerationBase;
/** Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort. */
export declare type Specialty = ({
    "@type": "Specialty";
} & SpecialtyBase) | MedicalSpecialty;
declare type SportingGoodsStoreBase = StoreBase;
/** A sporting goods store. */
export declare type SportingGoodsStore = ({
    "@type": "SportingGoodsStore";
} & SportingGoodsStoreBase) | string;
declare type SportsActivityLocationBase = LocalBusinessBase;
/** A sports location, such as a playing field. */
export declare type SportsActivityLocation = ({
    "@type": "SportsActivityLocation";
} & SportsActivityLocationBase) | (BowlingAlley | ExerciseGym | GolfCourse | HealthClub | PublicSwimmingPool | SkiResort | SportsClub | StadiumOrArena | TennisComplex | string);
declare type SportsClubBase = SportsActivityLocationBase;
/** A sports club. */
export declare type SportsClub = ({
    "@type": "SportsClub";
} & SportsClubBase) | string;
declare type SportsEventBase = EventBase & {
    /** The away team in a sports event. */
    "awayTeam"?: (Person | SportsTeam) | readonly (Person | SportsTeam)[];
    /** A competitor in a sports event. */
    "competitor"?: (Person | SportsTeam) | readonly (Person | SportsTeam)[];
    /** The home team in a sports event. */
    "homeTeam"?: (Person | SportsTeam) | readonly (Person | SportsTeam)[];
    /** A type of sport (e.g. Baseball). */
    "sport"?: (Text | URL) | readonly (Text | URL)[];
};
/** Event type: Sports event. */
export declare type SportsEvent = {
    "@type": "SportsEvent";
} & SportsEventBase;
declare type SportsOrganizationBase = OrganizationBase & {
    /** A type of sport (e.g. Baseball). */
    "sport"?: (Text | URL) | readonly (Text | URL)[];
};
/** Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations. */
export declare type SportsOrganization = ({
    "@type": "SportsOrganization";
} & SportsOrganizationBase) | (SportsTeam | string);
declare type SportsTeamBase = SportsOrganizationBase & {
    /** A person that acts as performing member of a sports team; a player as opposed to a coach. */
    "athlete"?: Person | readonly Person[];
    /** A person that acts in a coaching role for a sports team. */
    "coach"?: Person | readonly Person[];
    /** Gender of something, typically a {@link http://schema.org/Person Person}, but possibly also fictional characters, animals, etc. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The {@link http://schema.org/gender gender} property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender {@link http://schema.org/SportsTeam SportsTeam} can be indicated with a text value of "Mixed". */
    "gender"?: (GenderType | Text) | readonly (GenderType | Text)[];
};
/** Organization: Sports team. */
export declare type SportsTeam = ({
    "@type": "SportsTeam";
} & SportsTeamBase) | string;
declare type SpreadsheetDigitalDocumentBase = DigitalDocumentBase;
/** A spreadsheet file. */
export declare type SpreadsheetDigitalDocument = {
    "@type": "SpreadsheetDigitalDocument";
} & SpreadsheetDigitalDocumentBase;
declare type StadiumOrArenaBase = (CivicStructureBase & SportsActivityLocationBase);
/** A stadium. */
export declare type StadiumOrArena = ({
    "@type": "StadiumOrArena";
} & StadiumOrArenaBase) | string;
declare type StateBase = AdministrativeAreaBase;
/** A state or province of a country. */
export declare type State = ({
    "@type": "State";
} & StateBase) | string;
declare type StatisticalPopulationBase = IntangibleBase & {
    /** Indicates a property used as a constraint to define a {@link http://schema.org/StatisticalPopulation StatisticalPopulation} with respect to the set of entities  corresponding to an indicated type (via {@link http://schema.org/populationType populationType}). */
    "constrainingProperty"?: Integer | readonly Integer[];
    /** Indicates the number of constraints (not counting {@link http://schema.org/populationType populationType}) defined for a particular {@link http://schema.org/StatisticalPopulation StatisticalPopulation}. This helps applications understand if they have access to a sufficiently complete description of a {@link http://schema.org/StatisticalPopulation StatisticalPopulation}. */
    "numConstraints"?: Integer | readonly Integer[];
    /** Indicates the populationType common to all members of a {@link http://schema.org/StatisticalPopulation StatisticalPopulation}. */
    "populationType"?: Class | readonly Class[];
};
/** A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property {@link http://schema.org/populationType populationType} is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a {@link http://schema.org/StatisticalPopulation StatisticalPopulation} representing all {@link http://schema.org/Person Person}s with a {@link http://schema.org/homeLocation homeLocation} of East Podunk California, would be described by applying the appropriate {@link http://schema.org/homeLocation homeLocation} and {@link http://schema.org/populationType populationType} properties to a {@link http://schema.org/StatisticalPopulation StatisticalPopulation} item that stands for that set of people.The properties {@link http://schema.org/numConstraints numConstraints} and {@link http://schema.org/constrainingProperties constrainingProperties} are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statisticalpopulation, and does not imply that the population consists of people. For example, a {@link http://schema.org/populationType populationType} of {@link http://schema.org/Event Event} or {@link http://schema.org/NewsArticle NewsArticle} could be used. See also {@link http://schema.org/Observation Observation}, and the {@link /docs/data-and-datasets.html data and datasets} overview for more details. */
export declare type StatisticalPopulation = {
    "@type": "StatisticalPopulation";
} & StatisticalPopulationBase;
declare type SteeringPositionValueBase = QualitativeValueBase;
/** A value indicating a steering position. */
export declare type SteeringPositionValue = "http://schema.org/LeftHandDriving" | "http://schema.org/RightHandDriving" | ({
    "@type": "SteeringPositionValue";
} & SteeringPositionValueBase);
export declare const SteeringPositionValue: {
    /** The steering position is on the left side of the vehicle (viewed from the main direction of driving). */
    LeftHandDriving: "http://schema.org/LeftHandDriving";
    /** The steering position is on the right side of the vehicle (viewed from the main direction of driving). */
    RightHandDriving: "http://schema.org/RightHandDriving";
};
declare type StoreBase = LocalBusinessBase;
/** A retail good store. */
export declare type Store = ({
    "@type": "Store";
} & StoreBase) | (AutoPartsStore | BikeStore | BookStore | ClothingStore | ComputerStore | ConvenienceStore | DepartmentStore | ElectronicsStore | Florist | FurnitureStore | GardenStore | GroceryStore | HardwareStore | HobbyShop | HomeGoodsStore | JewelryStore | LiquorStore | MensClothingStore | MobilePhoneStore | MovieRentalStore | MusicStore | OfficeEquipmentStore | OutletStore | PawnShop | PetStore | ShoeStore | SportingGoodsStore | TireShop | ToyStore | WholesaleStore | string);
declare type StructuredValueBase = IntangibleBase;
/** Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing. */
export declare type StructuredValue = ({
    "@type": "StructuredValue";
} & StructuredValueBase) | (ContactPoint | DatedMoneySpecification | EngineSpecification | ExchangeRateSpecification | GeoCoordinates | GeoShape | InteractionCounter | MonetaryAmount | NutritionInformation | OpeningHoursSpecification | OwnershipInfo | PriceSpecification | PropertyValue | QuantitativeValue | QuantitativeValueDistribution | RepaymentSpecification | TypeAndQuantityNode | WarrantyPromise);
declare type StupidTypeBase = ThingBase & {
    /** This is a StupidProperty! - for testing only */
    "stupidProperty"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A StupidType for testing. */
export declare type StupidType = {
    "@type": "StupidType";
} & StupidTypeBase;
declare type SubscribeActionBase = InteractActionBase;
/**
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.
 *
 * Related actions:
 *
 * - {@link http://schema.org/FollowAction FollowAction}: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.
 * - {@link http://schema.org/RegisterAction RegisterAction}: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
 * - {@link http://schema.org/JoinAction JoinAction}: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
 */
export declare type SubscribeAction = {
    "@type": "SubscribeAction";
} & SubscribeActionBase;
declare type SubstanceBase = MedicalEntityBase & {
    /** An active ingredient, typically chemical compounds and/or biologic substances. */
    "activeIngredient"?: Text | readonly Text[];
    /** Recommended intake of this supplement for a given population as defined by a specific recommending authority. */
    "maximumIntake"?: MaximumDoseSchedule | readonly MaximumDoseSchedule[];
};
/** Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical. */
export declare type Substance = ({
    "@type": "Substance";
} & SubstanceBase) | (DietarySupplement | Drug);
declare type SubwayStationBase = CivicStructureBase;
/** A subway station. */
export declare type SubwayStation = ({
    "@type": "SubwayStation";
} & SubwayStationBase) | string;
declare type SuiteBase = AccommodationBase & {
    /** The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property. */
    "bed"?: (BedDetails | BedType | Text) | readonly (BedDetails | BedType | Text)[];
    /** The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue. */
    "numberOfRooms"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).Typical unit code(s): C62 for person */
    "occupancy"?: QuantitativeValue | readonly QuantitativeValue[];
};
/**
 * A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see {@link http://en.wikipedia.org/wiki/Suite_(hotel) http://en.wikipedia.org/wiki/Suite_(hotel)}).
 *
 * See also the {@link /docs/hotels.html dedicated document on the use of schema.org for marking up hotels and other forms of accommodations}.
 */
export declare type Suite = ({
    "@type": "Suite";
} & SuiteBase) | string;
declare type SuperficialAnatomyBase = MedicalEntityBase & {
    /** If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system. */
    "associatedPathophysiology"?: Text | readonly Text[];
    /** Anatomical systems or structures that relate to the superficial anatomy. */
    "relatedAnatomy"?: (AnatomicalStructure | AnatomicalSystem) | readonly (AnatomicalStructure | AnatomicalSystem)[];
    /** A medical condition associated with this anatomy. */
    "relatedCondition"?: MedicalCondition | readonly MedicalCondition[];
    /** A medical therapy related to this anatomy. */
    "relatedTherapy"?: MedicalTherapy | readonly MedicalTherapy[];
    /** The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment. */
    "significance"?: Text | readonly Text[];
};
/** Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure). */
export declare type SuperficialAnatomy = {
    "@type": "SuperficialAnatomy";
} & SuperficialAnatomyBase;
declare type SurgicalProcedureBase = MedicalProcedureBase;
/** A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes. */
export declare type SurgicalProcedure = {
    "@type": "SurgicalProcedure";
} & SurgicalProcedureBase;
declare type SuspendActionBase = ControlActionBase;
/** The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer). */
export declare type SuspendAction = {
    "@type": "SuspendAction";
} & SuspendActionBase;
declare type SynagogueBase = PlaceOfWorshipBase;
/** A synagogue. */
export declare type Synagogue = ({
    "@type": "Synagogue";
} & SynagogueBase) | string;
declare type TableBase = WebPageElementBase;
/** A table on a Web page. */
export declare type Table = {
    "@type": "Table";
} & TableBase;
declare type TakeActionBase = TransferActionBase;
/**
 * The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.
 *
 * Related actions:
 *
 * - {@link http://schema.org/GiveAction GiveAction}: The reciprocal of TakeAction.
 * - {@link http://schema.org/ReceiveAction ReceiveAction}: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.
 */
export declare type TakeAction = {
    "@type": "TakeAction";
} & TakeActionBase;
declare type TattooParlorBase = HealthAndBeautyBusinessBase;
/** A tattoo parlor. */
export declare type TattooParlor = ({
    "@type": "TattooParlor";
} & TattooParlorBase) | string;
declare type TaxiBase = ServiceBase;
/**
 * A taxi.
 * @deprecated Use TaxiService instead.
 */
export declare type Taxi = {
    "@type": "Taxi";
} & TaxiBase;
declare type TaxiReservationBase = ReservationBase & {
    /** Number of people the reservation should accommodate. */
    "partySize"?: (Integer | QuantitativeValue) | readonly (Integer | QuantitativeValue)[];
    /** Where a taxi will pick up a passenger or a rental car can be picked up. */
    "pickupLocation"?: Place | readonly Place[];
    /** When a taxi will pickup a passenger or a rental car can be picked up. */
    "pickupTime"?: DateTime | readonly DateTime[];
};
/**
 * A reservation for a taxi.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {@link http://schema.org/Offer Offer}.
 */
export declare type TaxiReservation = {
    "@type": "TaxiReservation";
} & TaxiReservationBase;
declare type TaxiServiceBase = ServiceBase;
/** A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled. */
export declare type TaxiService = {
    "@type": "TaxiService";
} & TaxiServiceBase;
declare type TaxiStandBase = CivicStructureBase;
/** A taxi stand. */
export declare type TaxiStand = ({
    "@type": "TaxiStand";
} & TaxiStandBase) | string;
declare type TechArticleBase = ArticleBase & {
    /** Prerequisites needed to fulfill steps in article. */
    "dependencies"?: Text | readonly Text[];
    /** Proficiency needed for this content; expected values: 'Beginner', 'Expert'. */
    "proficiencyLevel"?: Text | readonly Text[];
};
/** A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc. */
export declare type TechArticle = ({
    "@type": "TechArticle";
} & TechArticleBase) | APIReference;
declare type TelevisionChannelBase = BroadcastChannelBase;
/** A unique instance of a television BroadcastService on a CableOrSatelliteService lineup. */
export declare type TelevisionChannel = {
    "@type": "TelevisionChannel";
} & TelevisionChannelBase;
declare type TelevisionStationBase = LocalBusinessBase;
/** A television station. */
export declare type TelevisionStation = ({
    "@type": "TelevisionStation";
} & TelevisionStationBase) | string;
declare type TennisComplexBase = SportsActivityLocationBase;
/** A tennis complex. */
export declare type TennisComplex = ({
    "@type": "TennisComplex";
} & TennisComplexBase) | string;
declare type TextDigitalDocumentBase = DigitalDocumentBase;
/** A file composed primarily of text. */
export declare type TextDigitalDocument = {
    "@type": "TextDigitalDocument";
} & TextDigitalDocumentBase;
declare type TheaterEventBase = EventBase;
/** Event type: Theater performance. */
export declare type TheaterEvent = {
    "@type": "TheaterEvent";
} & TheaterEventBase;
declare type TheaterGroupBase = PerformingGroupBase;
/** A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre. */
export declare type TheaterGroup = ({
    "@type": "TheaterGroup";
} & TheaterGroupBase) | string;
declare type TherapeuticProcedureBase = MedicalProcedureBase & {
    /** A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead. */
    "adverseOutcome"?: MedicalEntity | readonly MedicalEntity[];
    /** A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used. */
    "doseSchedule"?: DoseSchedule | readonly DoseSchedule[];
    /** Specifying a drug or medicine used in a medication procedure */
    "drug"?: Drug | readonly Drug[];
    /** A factor that indicates use of this therapy for treatment and/or prevention of a condition, symptom, etc. For therapies such as drugs, indications can include both officially-approved indications as well as off-label uses. These can be distinguished by using the ApprovedIndication subtype of MedicalIndication. */
    "indication"?: MedicalIndication | readonly MedicalIndication[];
};
/** A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition. */
export declare type TherapeuticProcedure = ({
    "@type": "TherapeuticProcedure";
} & TherapeuticProcedureBase) | (MedicalTherapy | PsychologicalTreatment);
declare type ThesisBase = CreativeWorkBase & {
    /** Qualification, candidature, degree, application that Thesis supports. */
    "inSupportOf"?: Text | readonly Text[];
};
/** A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification. */
export declare type Thesis = {
    "@type": "Thesis";
} & ThesisBase;
declare type ThingBase = {
    /** IRI identifying the canonical address of this object. */
    "@id"?: string;
    /** An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally. */
    "additionalType"?: URL | readonly URL[];
    /** An alias for the item. */
    "alternateName"?: Text | readonly Text[];
    /** A description of the item. */
    "description"?: Text | readonly Text[];
    /** A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation. */
    "disambiguatingDescription"?: Text | readonly Text[];
    /** The identifier property represents any kind of identifier for any kind of {@link http://schema.org/Thing Thing}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See {@link /docs/datamodel.html#identifierBg background notes} for more details. */
    "identifier"?: (PropertyValue | Text | URL) | readonly (PropertyValue | Text | URL)[];
    /** An image of the item. This can be a {@link http://schema.org/URL URL} or a fully described {@link http://schema.org/ImageObject ImageObject}. */
    "image"?: (ImageObject | URL) | readonly (ImageObject | URL)[];
    /** Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See {@link /docs/datamodel.html#mainEntityBackground background notes} for details. */
    "mainEntityOfPage"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
    /** The name of the item. */
    "name"?: Text | readonly Text[];
    /** Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role. */
    "potentialAction"?: Action | readonly Action[];
    /** URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website. */
    "sameAs"?: URL | readonly URL[];
    /** A CreativeWork or Event about this Thing. */
    "subjectOf"?: (CreativeWork | Event) | readonly (CreativeWork | Event)[];
    /** URL of the item. */
    "url"?: URL | readonly URL[];
};
/** The most generic type of item. */
export declare type Thing = ({
    "@type": "Thing";
} & ThingBase) | (Action | CreativeWork | Event | Intangible | MedicalEntity | Organization | Person | Place | Product | StupidType);
declare type TicketBase = IntangibleBase & {
    /** The date the ticket was issued. */
    "dateIssued"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The organization issuing the ticket or permit. */
    "issuedBy"?: Organization | readonly Organization[];
    /**
     * The currency of the price, or a price component when attached to {@link http://schema.org/PriceSpecification PriceSpecification} and its subtypes.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "priceCurrency"?: Text | readonly Text[];
    /** The seat associated with the ticket. */
    "ticketedSeat"?: Seat | readonly Seat[];
    /** The unique identifier for the ticket. */
    "ticketNumber"?: Text | readonly Text[];
    /** Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance. */
    "ticketToken"?: (Text | URL) | readonly (Text | URL)[];
    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.
     *
     * Usage guidelines:
     *
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     */
    "totalPrice"?: (Number | PriceSpecification | Text) | readonly (Number | PriceSpecification | Text)[];
    /** The person or organization the reservation or ticket is for. */
    "underName"?: (Organization | Person) | readonly (Organization | Person)[];
};
/** Used to describe a ticket to an event, a flight, a bus ride, etc. */
export declare type Ticket = {
    "@type": "Ticket";
} & TicketBase;
declare type TieActionBase = AchieveActionBase;
/** The act of reaching a draw in a competitive activity. */
export declare type TieAction = {
    "@type": "TieAction";
} & TieActionBase;
declare type TipActionBase = TradeActionBase & {
    /** A sub property of participant. The participant who is at the receiving end of the action. */
    "recipient"?: (Audience | ContactPoint | Organization | Person) | readonly (Audience | ContactPoint | Organization | Person)[];
};
/** The act of giving money voluntarily to a beneficiary in recognition of services rendered. */
export declare type TipAction = {
    "@type": "TipAction";
} & TipActionBase;
declare type TireShopBase = StoreBase;
/** A tire shop. */
export declare type TireShop = ({
    "@type": "TireShop";
} & TireShopBase) | string;
declare type TouristAttractionBase = PlaceBase & {
    /** A language someone may use with or at the item, service or place. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/inLanguage inLanguage} */
    "availableLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /** Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc. */
    "touristType"?: (Audience | Text) | readonly (Audience | Text)[];
};
/** A tourist attraction.  In principle any Thing can be a {@link http://schema.org/TouristAttraction TouristAttraction}, from a {@link http://schema.org/Mountain Mountain} and {@link http://schema.org/LandmarksOrHistoricalBuildings LandmarksOrHistoricalBuildings} to a {@link http://schema.org/LocalBusiness LocalBusiness}.  This Type can be used on its own to describe a general {@link http://schema.org/TouristAttraction TouristAttraction}, or be used as an {@link http://schema.org/additionalType additionalType} to add tourist attraction properties to any other type.  (See examples below) */
export declare type TouristAttraction = ({
    "@type": "TouristAttraction";
} & TouristAttractionBase) | string;
declare type TouristDestinationBase = PlaceBase & {
    /** Attraction located at destination. */
    "includesAttraction"?: TouristAttraction | readonly TouristAttraction[];
    /** Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc. */
    "touristType"?: (Audience | Text) | readonly (Audience | Text)[];
};
/** A tourist destination. In principle any {@link http://schema.org/Place Place} can be a {@link http://schema.org/TouristDestination TouristDestination} from a {@link http://schema.org/City City}, {@link http://schema.org/Region Region} or {@link http://schema.org/Country Country} to an {@link http://schema.org/AmusementPark AmusementPark} or {@link http://schema.org/Hotel Hotel}. This Type can be used on its own to describe a general {@link http://schema.org/TouristDestination TouristDestination}, or be used as an {@link http://schema.org/additionalType additionalType} to add tourist relevant properties to any other {@link http://schema.org/Place Place}.  A {@link http://schema.org/TouristDestination TouristDestination} is defined as a {@link http://schema.org/Place Place} that contains, or is colocated with, one or more {@link http://schema.org/TouristAttraction TouristAttraction}s, often linked by a similar theme or interest to a particular {@link http://schema.org/touristType touristType}. The {@link http://www2.unwto.org/ UNWTO} defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.  (See examples below). */
export declare type TouristDestination = ({
    "@type": "TouristDestination";
} & TouristDestinationBase) | string;
declare type TouristInformationCenterBase = LocalBusinessBase;
/** A tourist information center. */
export declare type TouristInformationCenter = ({
    "@type": "TouristInformationCenter";
} & TouristInformationCenterBase) | string;
declare type TouristTripBase = TripBase & {
    /** Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc. */
    "touristType"?: (Audience | Text) | readonly (Audience | Text)[];
};
/** A tourist trip. A created itinerary of visits to one or more places of interest ({@link http://schema.org/TouristAttraction TouristAttraction}/{@link http://schema.org/TouristDestination TouristDestination}) often linked by a similar theme, geographic area, or interest to a particular {@link http://schema.org/touristType touristType}. The {@link http://www2.unwto.org/ UNWTO} defines tourism trip as the Trip taken by visitors.  (See examples below). */
export declare type TouristTrip = {
    "@type": "TouristTrip";
} & TouristTripBase;
declare type ToyStoreBase = StoreBase;
/** A toy store. */
export declare type ToyStore = ({
    "@type": "ToyStore";
} & ToyStoreBase) | string;
declare type TrackActionBase = FindActionBase & {
    /** A sub property of instrument. The method of delivery. */
    "deliveryMethod"?: DeliveryMethod | readonly DeliveryMethod[];
};
/**
 * An agent tracks an object for updates.
 *
 * Related actions:
 *
 * - {@link http://schema.org/FollowAction FollowAction}: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.
 * - {@link http://schema.org/SubscribeAction SubscribeAction}: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
 */
export declare type TrackAction = {
    "@type": "TrackAction";
} & TrackActionBase;
declare type TradeActionBase = ActionBase & {
    /**
     * The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
     *
     * Usage guidelines:
     *
     * - Use the {@link http://schema.org/priceCurrency priceCurrency} property (with standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR") instead of including {@link http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign ambiguous symbols} such as '$' in the value.
     * - Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     * - Note that both {@link http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute RDFa} and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.
     * - Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.
     */
    "price"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * The currency of the price, or a price component when attached to {@link http://schema.org/PriceSpecification PriceSpecification} and its subtypes.
     *
     * Use standard formats: {@link http://en.wikipedia.org/wiki/ISO_4217 ISO 4217 currency format} e.g. "USD"; {@link https://en.wikipedia.org/wiki/List_of_cryptocurrencies Ticker symbol} for cryptocurrencies e.g. "BTC"; well known names for {@link https://en.wikipedia.org/wiki/Local_exchange_trading_system Local Exchange Tradings Systems} (LETS) and other currency types e.g. "Ithaca HOUR".
     */
    "priceCurrency"?: Text | readonly Text[];
    /** One or more detailed price specifications, indicating the unit price and delivery or payment charges. */
    "priceSpecification"?: PriceSpecification | readonly PriceSpecification[];
};
/** The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment. */
export declare type TradeAction = ({
    "@type": "TradeAction";
} & TradeActionBase) | (BuyAction | DonateAction | OrderAction | PayAction | PreOrderAction | QuoteAction | RentAction | SellAction | TipAction);
declare type TrainReservationBase = ReservationBase;
/**
 * A reservation for train travel.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {@link http://schema.org/Offer Offer}.
 */
export declare type TrainReservation = {
    "@type": "TrainReservation";
} & TrainReservationBase;
declare type TrainStationBase = CivicStructureBase;
/** A train station. */
export declare type TrainStation = ({
    "@type": "TrainStation";
} & TrainStationBase) | string;
declare type TrainTripBase = TripBase & {
    /** The platform where the train arrives. */
    "arrivalPlatform"?: Text | readonly Text[];
    /** The station where the train trip ends. */
    "arrivalStation"?: TrainStation | readonly TrainStation[];
    /** The platform from which the train departs. */
    "departurePlatform"?: Text | readonly Text[];
    /** The station from which the train departs. */
    "departureStation"?: TrainStation | readonly TrainStation[];
    /** The name of the train (e.g. The Orient Express). */
    "trainName"?: Text | readonly Text[];
    /** The unique identifier for the train. */
    "trainNumber"?: Text | readonly Text[];
};
/** A trip on a commercial train line. */
export declare type TrainTrip = {
    "@type": "TrainTrip";
} & TrainTripBase;
declare type TransferActionBase = ActionBase & {
    /** A sub property of location. The original location of the object or the agent before the action. */
    "fromLocation"?: Place | readonly Place[];
    /** A sub property of location. The final location of the object or the agent after the action. */
    "toLocation"?: Place | readonly Place[];
};
/** The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another. */
export declare type TransferAction = ({
    "@type": "TransferAction";
} & TransferActionBase) | (BorrowAction | DownloadAction | GiveAction | LendAction | MoneyTransfer | ReceiveAction | ReturnAction | SendAction | TakeAction);
declare type TravelActionBase = MoveActionBase & {
    /** The distance travelled, e.g. exercising or travelling. */
    "distance"?: Distance | readonly Distance[];
};
/** The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants. */
export declare type TravelAction = {
    "@type": "TravelAction";
} & TravelActionBase;
declare type TravelAgencyBase = LocalBusinessBase;
/** A travel agency. */
export declare type TravelAgency = ({
    "@type": "TravelAgency";
} & TravelAgencyBase) | string;
declare type TreatmentIndicationBase = MedicalIndicationBase;
/** An indication for treating an underlying condition, symptom, etc. */
export declare type TreatmentIndication = {
    "@type": "TreatmentIndication";
} & TreatmentIndicationBase;
declare type TripBase = IntangibleBase & {
    /** The expected arrival time. */
    "arrivalTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** The expected departure time. */
    "departureTime"?: (DateTime | Time) | readonly (DateTime | Time)[];
    /** Destination(s) ( {@link http://schema.org/Place Place} ) that make up a trip. For a trip where destination order is important use {@link http://schema.org/ItemList ItemList} to specify that order (see examples). */
    "itinerary"?: (ItemList | Place) | readonly (ItemList | Place)[];
    /** An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {@link http://schema.org/businessFunction businessFunction} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {@link http://schema.org/Demand Demand}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer. */
    "offers"?: (Demand | Offer) | readonly (Demand | Offer)[];
    /** Identifies that this {@link http://schema.org/Trip Trip} is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip. */
    "partOfTrip"?: Trip | readonly Trip[];
    /** The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. */
    "provider"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Identifies a {@link http://schema.org/Trip Trip} that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip. */
    "subTrip"?: Trip | readonly Trip[];
};
/** A trip or journey. An itinerary of visits to one or more places. */
export declare type Trip = ({
    "@type": "Trip";
} & TripBase) | (BusTrip | Flight | TouristTrip | TrainTrip);
declare type TVClipBase = ClipBase & {
    /**
     * The TV series to which this episode or season belongs.
     * @deprecated Consider using http://schema.org/partOfSeries instead.
     */
    "partOfTVSeries"?: TVSeries | readonly TVSeries[];
};
/** A short TV program or a segment/part of a TV program. */
export declare type TVClip = {
    "@type": "TVClip";
} & TVClipBase;
declare type TVEpisodeBase = EpisodeBase & {
    /** The country of the principal offices of the production company or individual responsible for the movie or program. */
    "countryOfOrigin"?: Country | readonly Country[];
    /**
     * The TV series to which this episode or season belongs.
     * @deprecated Consider using http://schema.org/partOfSeries instead.
     */
    "partOfTVSeries"?: TVSeries | readonly TVSeries[];
    /** Languages in which subtitles/captions are available, in {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard format}. */
    "subtitleLanguage"?: (Language | Text) | readonly (Language | Text)[];
};
/** A TV episode which can be part of a series or season. */
export declare type TVEpisode = {
    "@type": "TVEpisode";
} & TVEpisodeBase;
declare type TVSeasonBase = (CreativeWorkBase & CreativeWorkSeasonBase) & {
    /** The country of the principal offices of the production company or individual responsible for the movie or program. */
    "countryOfOrigin"?: Country | readonly Country[];
    /**
     * The TV series to which this episode or season belongs.
     * @deprecated Consider using http://schema.org/partOfSeries instead.
     */
    "partOfTVSeries"?: TVSeries | readonly TVSeries[];
};
/** Season dedicated to TV broadcast and associated online delivery. */
export declare type TVSeason = {
    "@type": "TVSeason";
} & TVSeasonBase;
declare type TVSeriesBase = (CreativeWorkBase & CreativeWorkSeriesBase) & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** A season that is part of the media series. */
    "containsSeason"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The country of the principal offices of the production company or individual responsible for the movie or program. */
    "countryOfOrigin"?: Country | readonly Country[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** An episode of a tv, radio or game media within a series or season. */
    "episode"?: Episode | readonly Episode[];
    /**
     * An episode of a TV/radio series or season.
     * @deprecated Consider using http://schema.org/episode instead.
     */
    "episodes"?: Episode | readonly Episode[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The number of episodes in this season or series. */
    "numberOfEpisodes"?: Integer | readonly Integer[];
    /** The number of seasons in this series. */
    "numberOfSeasons"?: Integer | readonly Integer[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/containsSeason instead.
     */
    "season"?: (CreativeWorkSeason | URL) | readonly (CreativeWorkSeason | URL)[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/season instead.
     */
    "seasons"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** CreativeWorkSeries dedicated to TV broadcast and associated online delivery. */
export declare type TVSeries = {
    "@type": "TVSeries";
} & TVSeriesBase;
declare type TypeAndQuantityNodeBase = StructuredValueBase & {
    /** The quantity of the goods included in the offer. */
    "amountOfThisGood"?: Number | readonly Number[];
    /** The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell. */
    "businessFunction"?: BusinessFunction | readonly BusinessFunction[];
    /** The product that this structured value is referring to. */
    "typeOfGood"?: (Product | Service) | readonly (Product | Service)[];
    /** The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. */
    "unitCode"?: (Text | URL) | readonly (Text | URL)[];
    /** A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for{@link unitCode unitCode}. */
    "unitText"?: Text | readonly Text[];
};
/** A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer. */
export declare type TypeAndQuantityNode = {
    "@type": "TypeAndQuantityNode";
} & TypeAndQuantityNodeBase;
declare type UnitPriceSpecificationBase = PriceSpecificationBase & {
    /** This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property. */
    "billingIncrement"?: Number | readonly Number[];
    /** A short text or acronym indicating multiple price specifications for the same offer, e.g. SRP for the suggested retail price or INVOICE for the invoice price, mostly used in the car industry. */
    "priceType"?: Text | readonly Text[];
    /** The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit. */
    "referenceQuantity"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. */
    "unitCode"?: (Text | URL) | readonly (Text | URL)[];
    /** A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for{@link unitCode unitCode}. */
    "unitText"?: Text | readonly Text[];
};
/** The price asked for a given offer by the respective organization or person. */
export declare type UnitPriceSpecification = {
    "@type": "UnitPriceSpecification";
} & UnitPriceSpecificationBase;
declare type UnRegisterActionBase = InteractActionBase;
/**
 * The act of un-registering from a service.
 *
 * Related actions:
 *
 * - {@link http://schema.org/RegisterAction RegisterAction}: antonym of UnRegisterAction.
 * - {@link http://schema.org/LeaveAction LeaveAction}: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.
 */
export declare type UnRegisterAction = {
    "@type": "UnRegisterAction";
} & UnRegisterActionBase;
declare type UpdateActionBase = ActionBase & {
    /**
     * A sub property of object. The collection target of the action.
     * @deprecated Consider using http://schema.org/targetCollection instead.
     */
    "collection"?: Thing | readonly Thing[];
    /** A sub property of object. The collection target of the action. */
    "targetCollection"?: Thing | readonly Thing[];
};
/** The act of managing by changing/editing the state of the object. */
export declare type UpdateAction = ({
    "@type": "UpdateAction";
} & UpdateActionBase) | (AddAction | DeleteAction | ReplaceAction);
declare type URLBase = Text;
/** Data type: URL. */
export declare type URL = URLBase;
declare type UseActionBase = ConsumeActionBase;
/** The act of applying an object to its intended purpose. */
export declare type UseAction = ({
    "@type": "UseAction";
} & UseActionBase) | WearAction;
declare type UserBlocksBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserBlocks = {
    "@type": "UserBlocks";
} & UserBlocksBase;
declare type UserCheckinsBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserCheckins = {
    "@type": "UserCheckins";
} & UserCheckinsBase;
declare type UserCommentsBase = UserInteractionBase & {
    /** The text of the UserComment. */
    "commentText"?: Text | readonly Text[];
    /** The time at which the UserComment was made. */
    "commentTime"?: (Date | DateTime) | readonly (Date | DateTime)[];
    /** The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork. */
    "creator"?: (Organization | Person) | readonly (Organization | Person)[];
    /** Specifies the CreativeWork associated with the UserComment. */
    "discusses"?: CreativeWork | readonly CreativeWork[];
    /** The URL at which a reply may be posted to the specified UserComment. */
    "replyToUrl"?: URL | readonly URL[];
};
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserComments = {
    "@type": "UserComments";
} & UserCommentsBase;
declare type UserDownloadsBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserDownloads = {
    "@type": "UserDownloads";
} & UserDownloadsBase;
declare type UserInteractionBase = EventBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserInteraction = ({
    "@type": "UserInteraction";
} & UserInteractionBase) | (UserBlocks | UserCheckins | UserComments | UserDownloads | UserLikes | UserPageVisits | UserPlays | UserPlusOnes | UserTweets);
declare type UserLikesBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserLikes = {
    "@type": "UserLikes";
} & UserLikesBase;
declare type UserPageVisitsBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserPageVisits = {
    "@type": "UserPageVisits";
} & UserPageVisitsBase;
declare type UserPlaysBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserPlays = {
    "@type": "UserPlays";
} & UserPlaysBase;
declare type UserPlusOnesBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserPlusOnes = {
    "@type": "UserPlusOnes";
} & UserPlusOnesBase;
declare type UserReviewBase = ReviewBase;
/** A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with {@link http://schema.org/CriticReview CriticReview}. */
export declare type UserReview = {
    "@type": "UserReview";
} & UserReviewBase;
declare type UserTweetsBase = UserInteractionBase;
/**
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {@link http://schema.org/Action Action}-based vocabulary, alongside types such as {@link http://schema.org/Comment Comment}.
 * @deprecated Use InteractionCounter instead.
 */
export declare type UserTweets = {
    "@type": "UserTweets";
} & UserTweetsBase;
declare type VehicleBase = ProductBase & {
    /**
     * The time needed to accelerate the vehicle from a given start velocity to a given target velocity.
     *
     * Typical unit code(s): SEC for seconds
     *
     * - Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue}, or use {@link http://schema.org/valueReference valueReference} with a {@link http://schema.org/QuantitativeValue QuantitativeValue} of 0..60 mph or 0..100 km/h to specify the reference speeds.
     */
    "accelerationTime"?: QuantitativeValue | readonly QuantitativeValue[];
    /** Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.). */
    "bodyType"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /** A {@link https://en.wikipedia.org/wiki/Call_sign callsign}, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. */
    "callSign"?: Text | readonly Text[];
    /**
     * The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
     *
     * Typical unit code(s): LTR for liters, FTQ for cubic foot/feet
     *
     * Note: You can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "cargoVolume"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The date of the first registration of the vehicle with the respective public authorities. */
    "dateVehicleFirstRegistered"?: Date | readonly Date[];
    /** The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain. */
    "driveWheelConfiguration"?: (DriveWheelConfigurationValue | Text) | readonly (DriveWheelConfigurationValue | Text)[];
    /** The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property of that value, since there is no UN/CEFACT Common Code for "g/km". */
    "emissionsCO2"?: Number | readonly Number[];
    /**
     * The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.
     *
     * Typical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
     */
    "fuelCapacity"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).
     *
     * - Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use {@link http://schema.org/unitText unitText} to indicate the unit of measurement, e.g. L/100 km.
     * - Note 2: There are two ways of indicating the fuel consumption, {@link http://schema.org/fuelConsumption fuelConsumption} (e.g. 8 liters per 100 km) and {@link http://schema.org/fuelEfficiency fuelEfficiency} (e.g. 30 miles per gallon). They are reciprocal.
     * - Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use {@link http://schema.org/valueReference valueReference} to link the value for the fuel consumption to another value.
     */
    "fuelConsumption"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).
     *
     * - Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use {@link http://schema.org/unitText unitText} to indicate the unit of measurement, e.g. mpg or km/L.
     * - Note 2: There are two ways of indicating the fuel consumption, {@link http://schema.org/fuelConsumption fuelConsumption} (e.g. 8 liters per 100 km) and {@link http://schema.org/fuelEfficiency fuelEfficiency} (e.g. 30 miles per gallon). They are reciprocal.
     * - Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use {@link http://schema.org/valueReference valueReference} to link the value for the fuel economy to another value.
     */
    "fuelEfficiency"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle. */
    "fuelType"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /** A textual description of known damages, both repaired and unrepaired. */
    "knownVehicleDamages"?: Text | readonly Text[];
    /** Indicates that the vehicle meets the respective emission standard. */
    "meetsEmissionStandard"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /**
     * The total distance travelled by the particular vehicle since its initial production, as read from its odometer.
     *
     * Typical unit code(s): KMT for kilometers, SMI for statute miles
     */
    "mileageFromOdometer"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The release date of a vehicle model (often used to differentiate versions of the same make and model). */
    "modelDate"?: Date | readonly Date[];
    /** The number or type of airbags in the vehicle. */
    "numberOfAirbags"?: (Number | Text) | readonly (Number | Text)[];
    /**
     * The number of axles.
     *
     * Typical unit code(s): C62
     */
    "numberOfAxles"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /**
     * The number of doors.
     *
     * Typical unit code(s): C62
     */
    "numberOfDoors"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /**
     * The total number of forward gears available for the transmission system of the vehicle.
     *
     * Typical unit code(s): C62
     */
    "numberOfForwardGears"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /**
     * The number of owners of the vehicle, including the current one.
     *
     * Typical unit code(s): C62
     */
    "numberOfPreviousOwners"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /**
     * The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound
     *
     * - Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of {@link http://schema.org/weight weight} and {@link http://schema.org/payload payload}
     * - Note 2: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.
     * - Note 3: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}.
     * - Note 4: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "payload"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The date of production of the item, e.g. vehicle. */
    "productionDate"?: Date | readonly Date[];
    /** The date the item e.g. vehicle was purchased by the current owner. */
    "purchaseDate"?: Date | readonly Date[];
    /**
     * The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.
     *
     * Typical unit code(s): C62 for persons
     */
    "seatingCapacity"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /**
     * The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by {@link http://schema.org/maxValue maxValue} should be the maximum speed achievable under regular conditions.
     *
     * Typical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot
     *
     * *Note 1: Use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate the range. Typically, the minimal value is zero.* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the {@link http://schema.org/valueReference valueReference} property.
     */
    "speed"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The position of the steering wheel or similar device (mostly for cars). */
    "steeringPosition"?: SteeringPositionValue | readonly SteeringPositionValue[];
    /** This is a StupidProperty! - for testing only */
    "stupidProperty"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR)
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound
     *
     * - Note 1: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.
     * - Note 2: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}.
     * - Note 3: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "tongueWeight"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The permitted weight of a trailer attached to the vehicle.
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound* Note 1: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.* Note 2: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}.* Note 3: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "trailerWeight"?: QuantitativeValue | readonly QuantitativeValue[];
    /** A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'. */
    "vehicleConfiguration"?: Text | readonly Text[];
    /** Information about the engine or engines of the vehicle. */
    "vehicleEngine"?: EngineSpecification | readonly EngineSpecification[];
    /** The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles. */
    "vehicleIdentificationNumber"?: Text | readonly Text[];
    /** The color or color combination of the interior of the vehicle. */
    "vehicleInteriorColor"?: Text | readonly Text[];
    /** The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience. */
    "vehicleInteriorType"?: Text | readonly Text[];
    /** The release date of a vehicle model (often used to differentiate versions of the same make and model). */
    "vehicleModelDate"?: Date | readonly Date[];
    /**
     * The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.
     *
     * Typical unit code(s): C62 for persons.
     */
    "vehicleSeatingCapacity"?: (Number | QuantitativeValue) | readonly (Number | QuantitativeValue)[];
    /** Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale. */
    "vehicleSpecialUsage"?: (CarUsageType | Text) | readonly (CarUsageType | Text)[];
    /** The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars). */
    "vehicleTransmission"?: (QualitativeValue | Text | URL) | readonly (QualitativeValue | Text | URL)[];
    /**
     * The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.
     *
     * Typical unit code(s): KGM for kilogram, LBR for pound
     *
     * - Note 1: You can indicate additional information in the {@link http://schema.org/name name} of the {@link http://schema.org/QuantitativeValue QuantitativeValue} node.
     * - Note 2: You may also link to a {@link http://schema.org/QualitativeValue QualitativeValue} node that provides additional information using {@link http://schema.org/valueReference valueReference}.
     * - Note 3: Note that you can use {@link http://schema.org/minValue minValue} and {@link http://schema.org/maxValue maxValue} to indicate ranges.
     */
    "weightTotal"?: QuantitativeValue | readonly QuantitativeValue[];
    /**
     * The distance between the centers of the front and rear wheels.
     *
     * Typical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet
     */
    "wheelbase"?: QuantitativeValue | readonly QuantitativeValue[];
};
/** A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space. */
export declare type Vehicle = ({
    "@type": "Vehicle";
} & VehicleBase) | (BusOrCoach | Car | Motorcycle | MotorizedBicycle);
declare type VeinBase = VesselBase & {
    /** The vasculature that the vein drains into. */
    "drainsTo"?: Vessel | readonly Vessel[];
    /** The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ. */
    "regionDrained"?: (AnatomicalStructure | AnatomicalSystem) | readonly (AnatomicalStructure | AnatomicalSystem)[];
    /** The anatomical or organ system that the vein flows into; a larger structure that the vein connects to. */
    "tributary"?: AnatomicalStructure | readonly AnatomicalStructure[];
};
/** A type of blood vessel that specifically carries blood to the heart. */
export declare type Vein = {
    "@type": "Vein";
} & VeinBase;
declare type VesselBase = AnatomicalStructureBase;
/** A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body. */
export declare type Vessel = ({
    "@type": "Vessel";
} & VesselBase) | (Artery | LymphaticVessel | Vein);
declare type VeterinaryCareBase = MedicalOrganizationBase;
/** A vet's office. */
export declare type VeterinaryCare = ({
    "@type": "VeterinaryCare";
} & VeterinaryCareBase) | string;
declare type VideoGalleryBase = MediaGalleryBase;
/** Web page type: Video gallery page. */
export declare type VideoGallery = {
    "@type": "VideoGallery";
} & VideoGalleryBase;
declare type VideoGameBase = (GameBase & SoftwareApplicationBase) & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** Cheat codes to the game. */
    "cheatCode"?: CreativeWork | readonly CreativeWork[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** The electronic systems used to play {@link http://en.wikipedia.org/wiki/Category:Video_game_platforms video games}. */
    "gamePlatform"?: (Text | Thing | URL) | readonly (Text | Thing | URL)[];
    /** The server on which  it is possible to play the game. */
    "gameServer"?: GameServer | readonly GameServer[];
    /** Links to tips, tactics, etc. */
    "gameTip"?: CreativeWork | readonly CreativeWork[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time. */
    "playMode"?: GamePlayMode | readonly GamePlayMode[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device. */
export declare type VideoGame = {
    "@type": "VideoGame";
} & VideoGameBase;
declare type VideoGameClipBase = ClipBase;
/** A short segment/part of a video game. */
export declare type VideoGameClip = {
    "@type": "VideoGameClip";
} & VideoGameClipBase;
declare type VideoGameSeriesBase = CreativeWorkSeriesBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage). */
    "characterAttribute"?: Thing | readonly Thing[];
    /** Cheat codes to the game. */
    "cheatCode"?: CreativeWork | readonly CreativeWork[];
    /** A season that is part of the media series. */
    "containsSeason"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** An episode of a tv, radio or game media within a series or season. */
    "episode"?: Episode | readonly Episode[];
    /**
     * An episode of a TV/radio series or season.
     * @deprecated Consider using http://schema.org/episode instead.
     */
    "episodes"?: Episode | readonly Episode[];
    /** An item is an object within the game world that can be collected by a player or, occasionally, a non-player character. */
    "gameItem"?: Thing | readonly Thing[];
    /** Real or fictional location of the game (or part of game). */
    "gameLocation"?: (Place | PostalAddress | URL) | readonly (Place | PostalAddress | URL)[];
    /** The electronic systems used to play {@link http://en.wikipedia.org/wiki/Category:Video_game_platforms video games}. */
    "gamePlatform"?: (Text | Thing | URL) | readonly (Text | Thing | URL)[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** The number of episodes in this season or series. */
    "numberOfEpisodes"?: Integer | readonly Integer[];
    /** Indicate how many people can play this game (minimum, maximum, or range). */
    "numberOfPlayers"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The number of seasons in this series. */
    "numberOfSeasons"?: Integer | readonly Integer[];
    /** Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time. */
    "playMode"?: GamePlayMode | readonly GamePlayMode[];
    /** The production company or studio responsible for the item e.g. series, video game, episode etc. */
    "productionCompany"?: Organization | readonly Organization[];
    /** The task that a player-controlled character, or group of characters may complete in order to gain a reward. */
    "quest"?: Thing | readonly Thing[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/containsSeason instead.
     */
    "season"?: (CreativeWorkSeason | URL) | readonly (CreativeWorkSeason | URL)[];
    /**
     * A season in a media series.
     * @deprecated Consider using http://schema.org/season instead.
     */
    "seasons"?: CreativeWorkSeason | readonly CreativeWorkSeason[];
    /** The trailer of a movie or tv/radio series, season, episode, etc. */
    "trailer"?: VideoObject | readonly VideoObject[];
};
/** A video game series. */
export declare type VideoGameSeries = {
    "@type": "VideoGameSeries";
} & VideoGameSeriesBase;
declare type VideoObjectBase = MediaObjectBase & {
    /** An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip. */
    "actor"?: Person | readonly Person[];
    /**
     * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/actor instead.
     */
    "actors"?: Person | readonly Person[];
    /** The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the {@link http://schema.org/encodingFormat encodingFormat}. */
    "caption"?: (MediaObject | Text) | readonly (MediaObject | Text)[];
    /** A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip. */
    "director"?: Person | readonly Person[];
    /**
     * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
     * @deprecated Consider using http://schema.org/director instead.
     */
    "directors"?: Person | readonly Person[];
    /** The composer of the soundtrack. */
    "musicBy"?: (MusicGroup | Person) | readonly (MusicGroup | Person)[];
    /** Thumbnail image for an image or video. */
    "thumbnail"?: ImageObject | readonly ImageObject[];
    /** If this MediaObject is an AudioObject or VideoObject, the transcript of that object. */
    "transcript"?: Text | readonly Text[];
    /** The frame size of the video. */
    "videoFrameSize"?: Text | readonly Text[];
    /** The quality of the video. */
    "videoQuality"?: Text | readonly Text[];
};
/** A video file. */
export declare type VideoObject = {
    "@type": "VideoObject";
} & VideoObjectBase;
declare type ViewActionBase = ConsumeActionBase;
/** The act of consuming static visual content. */
export declare type ViewAction = {
    "@type": "ViewAction";
} & ViewActionBase;
declare type VisualArtsEventBase = EventBase;
/** Event type: Visual arts event. */
export declare type VisualArtsEvent = {
    "@type": "VisualArtsEvent";
} & VisualArtsEventBase;
declare type VisualArtworkBase = CreativeWorkBase & {
    /** The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20"). */
    "artEdition"?: (Integer | Text) | readonly (Integer | Text)[];
    /** e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc. */
    "artform"?: (Text | URL) | readonly (Text | URL)[];
    /** The primary artist for a work    in a medium other than pencils or digital line art--for example, if the    primary artwork is done in watercolors or digital paints. */
    "artist"?: Person | readonly Person[];
    /** The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.) */
    "artMedium"?: (Text | URL) | readonly (Text | URL)[];
    /** The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc. */
    "artworkSurface"?: (Text | URL) | readonly (Text | URL)[];
    /** The individual who adds color to inked drawings. */
    "colorist"?: Person | readonly Person[];
    /** The depth of the item. */
    "depth"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** The height of the item. */
    "height"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
    /** The individual who traces over the pencil drawings in ink after pencils are complete. */
    "inker"?: Person | readonly Person[];
    /** The individual who adds lettering, including speech balloons and sound effects, to artwork. */
    "letterer"?: Person | readonly Person[];
    /** The individual who draws the primary narrative artwork. */
    "penciler"?: Person | readonly Person[];
    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     * @deprecated Consider using http://schema.org/artworkSurface instead.
     */
    "surface"?: (Text | URL) | readonly (Text | URL)[];
    /** The width of the item. */
    "width"?: (Distance | QuantitativeValue) | readonly (Distance | QuantitativeValue)[];
};
/** A work of art that is primarily visual in character. */
export declare type VisualArtwork = ({
    "@type": "VisualArtwork";
} & VisualArtworkBase) | CoverArt;
declare type VitalSignBase = MedicalSignBase;
/** Vital signs are measures of various physiological functions in order to assess the most basic body functions. */
export declare type VitalSign = {
    "@type": "VitalSign";
} & VitalSignBase;
declare type VolcanoBase = LandformBase;
/** A volcano, like Fuji san. */
export declare type Volcano = ({
    "@type": "Volcano";
} & VolcanoBase) | string;
declare type VoteActionBase = ChooseActionBase & {
    /** A sub property of object. The candidate subject of this action. */
    "candidate"?: Person | readonly Person[];
};
/** The act of expressing a preference from a fixed/finite/structured set of choices/options. */
export declare type VoteAction = {
    "@type": "VoteAction";
} & VoteActionBase;
declare type WantActionBase = ReactActionBase;
/** The act of expressing a desire about the object. An agent wants an object. */
export declare type WantAction = {
    "@type": "WantAction";
} & WantActionBase;
declare type WarrantyPromiseBase = StructuredValueBase & {
    /** The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days. */
    "durationOfWarranty"?: QuantitativeValue | readonly QuantitativeValue[];
    /** The scope of the warranty promise. */
    "warrantyScope"?: WarrantyScope | readonly WarrantyScope[];
};
/** A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product. */
export declare type WarrantyPromise = {
    "@type": "WarrantyPromise";
} & WarrantyPromiseBase;
declare type WarrantyScopeBase = EnumerationBase;
/**
 * A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
 *
 * Commonly used values:
 *
 * - http://purl.org/goodrelations/v1#Labor-BringIn
 * - http://purl.org/goodrelations/v1#PartsAndLabor-BringIn
 * - http://purl.org/goodrelations/v1#PartsAndLabor-PickUp
 */
export declare type WarrantyScope = {
    "@type": "WarrantyScope";
} & WarrantyScopeBase;
declare type WatchActionBase = ConsumeActionBase;
/** The act of consuming dynamic/moving visual content. */
export declare type WatchAction = {
    "@type": "WatchAction";
} & WatchActionBase;
declare type WaterfallBase = BodyOfWaterBase;
/** A waterfall, like Niagara. */
export declare type Waterfall = ({
    "@type": "Waterfall";
} & WaterfallBase) | string;
declare type WearActionBase = UseActionBase;
/** The act of dressing oneself in clothing. */
export declare type WearAction = {
    "@type": "WearAction";
} & WearActionBase;
declare type WebAPIBase = ServiceBase & {
    /** Further documentation describing the Web API in more detail. */
    "documentation"?: (CreativeWork | URL) | readonly (CreativeWork | URL)[];
};
/** An application programming interface accessible over Web/Internet technologies. */
export declare type WebAPI = {
    "@type": "WebAPI";
} & WebAPIBase;
declare type WebApplicationBase = SoftwareApplicationBase & {
    /** Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'. */
    "browserRequirements"?: Text | readonly Text[];
};
/** Web applications. */
export declare type WebApplication = {
    "@type": "WebApplication";
} & WebApplicationBase;
declare type WebContentBase = CreativeWorkBase;
/** WebContent is a type representing all {@link http://schema.org/WebPage WebPage}, {@link http://schema.org/WebSite WebSite} and {@link http://schema.org/WebPageElement WebPageElement} content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  {@link http://schema.org/WebContent WebContent} type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types {@link http://schema.org/WebPage WebPage}, {@link http://schema.org/WebSite WebSite} and {@link http://schema.org/WebPageElement WebPageElement} will eventually be declared as subtypes of {@link http://schema.org/WebContent WebContent}.) */
export declare type WebContent = ({
    "@type": "WebContent";
} & WebContentBase) | HealthTopicContent;
declare type WebPageBase = CreativeWorkBase & {
    /** A set of links that can help a user understand and navigate a website hierarchy. */
    "breadcrumb"?: (BreadcrumbList | Text) | readonly (BreadcrumbList | Text)[];
    /** Date on which the content on this web page was last reviewed for accuracy and/or completeness. */
    "lastReviewed"?: Date | readonly Date[];
    /** Indicates if this web page element is the main subject of the page. */
    "mainContentOfPage"?: WebPageElement | readonly WebPageElement[];
    /** Indicates the main image on the page. */
    "primaryImageOfPage"?: ImageObject | readonly ImageObject[];
    /** A link related to this web page, for example to other related web pages. */
    "relatedLink"?: URL | readonly URL[];
    /** People or organizations that have reviewed the content on this web page for accuracy and/or completeness. */
    "reviewedBy"?: (Organization | Person) | readonly (Organization | Person)[];
    /** One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most. */
    "significantLink"?: URL | readonly URL[];
    /**
     * The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
     * @deprecated Consider using http://schema.org/significantLink instead.
     */
    "significantLinks"?: URL | readonly URL[];
    /**
     * Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.
     *
     * The _speakable_ property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:
     *
     * 1.) _id-value_ URL references - uses _id-value_ of an element in the page being annotated. The simplest use of _speakable_ has (potentially relative) URL values, referencing identified sections of the document concerned.
     *
     * 2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the {@link http://schema.org/cssSelector cssSelector} property.
     *
     * 3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the {@link http://schema.org/xpath xpath} property.
     *
     * For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For thiswe define a supporting type, {@link http://schema.org/SpeakableSpecification SpeakableSpecification}  which is defined to be a possible value of the _speakable_ property.
     */
    "speakable"?: (SpeakableSpecification | URL) | readonly (SpeakableSpecification | URL)[];
    /** One of the domain specialities to which this web page's content applies. */
    "specialty"?: Specialty | readonly Specialty[];
};
/** A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as `breadcrumb` may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page. */
export declare type WebPage = ({
    "@type": "WebPage";
} & WebPageBase) | (AboutPage | CheckoutPage | CollectionPage | ContactPage | FAQPage | ItemPage | MedicalWebPage | ProfilePage | QAPage | RealEstateListing | SearchResultsPage);
declare type WebPageElementBase = CreativeWorkBase & {
    /** A CSS selector, e.g. of a {@link http://schema.org/SpeakableSpecification SpeakableSpecification} or {@link http://schema.org/WebPageElement WebPageElement}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element". */
    "cssSelector"?: CssSelectorType | readonly CssSelectorType[];
    /** An XPath, e.g. of a {@link http://schema.org/SpeakableSpecification SpeakableSpecification} or {@link http://schema.org/WebPageElement WebPageElement}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element". */
    "xpath"?: XPathType | readonly XPathType[];
};
/** A web page element, like a table or an image. */
export declare type WebPageElement = ({
    "@type": "WebPageElement";
} & WebPageElementBase) | (SiteNavigationElement | Table | WPAdBlock | WPFooter | WPHeader | WPSideBar);
declare type WebSiteBase = CreativeWorkBase & {
    /** The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication. */
    "issn"?: Text | readonly Text[];
};
/** A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs. */
export declare type WebSite = {
    "@type": "WebSite";
} & WebSiteBase;
declare type WholesaleStoreBase = StoreBase;
/** A wholesale store. */
export declare type WholesaleStore = ({
    "@type": "WholesaleStore";
} & WholesaleStoreBase) | string;
declare type WinActionBase = AchieveActionBase & {
    /** A sub property of participant. The loser of the action. */
    "loser"?: Person | readonly Person[];
};
/** The act of achieving victory in a competitive activity. */
export declare type WinAction = {
    "@type": "WinAction";
} & WinActionBase;
declare type WineryBase = FoodEstablishmentBase;
/** A winery. */
export declare type Winery = ({
    "@type": "Winery";
} & WineryBase) | string;
declare type WorkBasedProgramBase = EducationalOccupationalProgramBase & {
    /**
     * A category describing the job, preferably using a term from a taxonomy such as {@link http://www.onetcenter.org/taxonomy.html BLS O*NET-SOC}, {@link https://www.ilo.org/public/english/bureau/stat/isco/isco08/ ISCO-08} or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.
     *
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     */
    "occupationalCategory"?: (CategoryCode | Text) | readonly (CategoryCode | Text)[];
    /** The estimated salary earned while in the program. */
    "trainingSalary"?: MonetaryAmountDistribution | readonly MonetaryAmountDistribution[];
};
/** A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs. */
export declare type WorkBasedProgram = {
    "@type": "WorkBasedProgram";
} & WorkBasedProgramBase;
declare type WorkersUnionBase = OrganizationBase;
/** A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying. */
export declare type WorkersUnion = ({
    "@type": "WorkersUnion";
} & WorkersUnionBase) | string;
declare type WPAdBlockBase = WebPageElementBase;
/** An advertising section of the page. */
export declare type WPAdBlock = {
    "@type": "WPAdBlock";
} & WPAdBlockBase;
declare type WPFooterBase = WebPageElementBase;
/** The footer section of the page. */
export declare type WPFooter = {
    "@type": "WPFooter";
} & WPFooterBase;
declare type WPHeaderBase = WebPageElementBase;
/** The header section of the page. */
export declare type WPHeader = {
    "@type": "WPHeader";
} & WPHeaderBase;
declare type WPSideBarBase = WebPageElementBase;
/** A sidebar section of the page. */
export declare type WPSideBar = {
    "@type": "WPSideBar";
} & WPSideBarBase;
declare type WriteActionBase = CreateActionBase & {
    /** The language of the content or performance or used in an action. Please use one of the language codes from the {@link http://tools.ietf.org/html/bcp47 IETF BCP 47 standard}. See also {@link http://schema.org/availableLanguage availableLanguage}. */
    "inLanguage"?: (Language | Text) | readonly (Language | Text)[];
    /**
     * A sub property of instrument. The language used on this action.
     * @deprecated Consider using http://schema.org/inLanguage instead.
     */
    "language"?: Language | readonly Language[];
};
/** The act of authoring written creative content. */
export declare type WriteAction = {
    "@type": "WriteAction";
} & WriteActionBase;
declare type XPathTypeBase = Text;
/** Text representing an XPath (typically but not necessarily version 1.0). */
export declare type XPathType = XPathTypeBase;
declare type ZooBase = CivicStructureBase;
/** A zoo. */
export declare type Zoo = ({
    "@type": "Zoo";
} & ZooBase) | string;
export {};
